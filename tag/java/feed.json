{
    "version": "https://jsonfeed.org/version/1",
    "title": "机煲的小窝 • All posts by \"java\" tag",
    "description": "",
    "home_page_url": "https://blog.unfinished.top",
    "items": [
        {
            "id": "https://blog.unfinished.top/2024/01/05/JavaReview/",
            "url": "https://blog.unfinished.top/2024/01/05/JavaReview/",
            "title": "Java期末考试复习提纲",
            "date_published": "2024-01-05T06:53:13.000Z",
            "content_html": "<p><em>仅供参考,如有错误请联系作者指正</em></p>\n<ul>\n<li>方法头: 包括方法的修饰符、返回值类型、方法名、形式参数(最后两项是方法签名)</li>\n<li>方法体: 在Java语言中方法体一个方法中用大括号{}括起来的部分</li>\n<li>重载(Overload): 一个类中，定义的多个参数名相同但是参数列表不同的方法（签名不同）</li>\n<li>重写(Override): 子父类中，子类定义的和其从父类继承而来的方法中方法签名完全相同的方法。</li>\n</ul>\n<p>实例方法 = 普通方法</p>\n<p>类方法 = 静态方法</p>\n<p>上转型对象可以访问子类继承或隐藏的成员变量</p>\n<h3 id=\"匿名对象\">匿名对象</h3>\n<p>new Student();//这个也是一个对象，但是没有名字，称为匿名对象</p>\n<h3 id=\"局部和成员变量\">局部和成员变量</h3>\n<p>成员变量存储在堆内存的对象中</p>\n<p>局部变量存储在栈内存的方法中</p>\n<p>成员变量随着对象的出现而出现在堆中，随着对象的消失而从堆中消失</p>\n<p>局部变量随着方法的运行而出现在栈中，随着方法的弹栈而消失</p>\n<p>成员变量因为在堆内存中，所有成员变量具有默认的初始化值</p>\n<p>局部变量没有默认的初始化值，必须手动的给其赋值才可以使用。</p>\n<h3 id=\"先后顺序\">先后顺序</h3>\n<p>第一次：静态代码块-非静态代码块-默认构造方法-普通方法</p>\n<p>之后：非静态代码块-默认构造方法-普通方法</p>\n<h3 id=\"protected\">protected</h3>\n<p><img src=\"1703938349037.png\" alt=\"1703938349037\"></p>\n<p>不同包下，在子类中通过父类引用不可以访问其 protected 方法</p>\n<p>不同包下，在子类中通过该子类引用可以访问其 protected 方法还可以通过 super 关键字调用父类中的该方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//print是Parent中的protected方法，并且不在同一个包中</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Parent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Child</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Child</span>();</span><br><span class=\"line\">        c1.print(); <span class=\"comment\">//可以</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.print(); <span class=\"comment\">//可以</span></span><br><span class=\"line\">        <span class=\"type\">Parent</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Child</span>();</span><br><span class=\"line\">        <span class=\"type\">Parent</span> <span class=\"variable\">c3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Child</span>();</span><br><span class=\"line\">        c2.print(); <span class=\"comment\">//达咩</span></span><br><span class=\"line\">        c3.print(); <span class=\"comment\">//达咩</span></span><br><span class=\"line\">        <span class=\"type\">Child2</span> <span class=\"variable\">c4</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Child2</span>();</span><br><span class=\"line\">        c4.print();<span class=\"comment\">//no</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Child2</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Parent</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n<p>不同包下，在子类中不能通过另一个子类引用访问共同基类的 protected 方法</p>\n<p>对于protected修饰的静态成员，无论是否同一个包，在子类中均可直接访问</p>\n<p>在不同包的非子类中则不可访问</p>\n<h2 id=\"继承\">继承</h2>\n<h3 id=\"构造方法\">构造方法</h3>\n<p>创建子类对象时，子类总是按层次结构从上到下的顺序调用所有超类的构造函数。如果继承和组合联用，要先构造基类的构造函数，然后调用组合对象的构造函数（组合按照声明的顺序调用）</p>\n<p>如果父类没有不带参数的构造方法，则在子类的构造方法中必须明确的告诉调用父类的某个带参数的构造方法，通过super关键字，这条语句还必须出现在构造方法的第一句</p>\n<h3 id=\"变量隐藏\">变量隐藏</h3>\n<p>变量隐藏：在子类对父类的继承中，如果子类的成员变量和父类的成员变量同名，此时称为子类隐藏（override）了父类的成员变量。</p>\n<p>子类若要引用父类的同名变量：super.变量名</p>\n<p>final可以被隐藏，static也能被隐藏，都能被隐藏。</p>\n<h3 id=\"方法覆盖隐藏\">方法覆盖隐藏</h3>\n<p>覆盖就是子类的方法跟父类的方法具有完全一样的签名和参数</p>\n<p><u><strong>私有方法、静态方法不能被覆盖，如果在子类出现了同签名的方法，就是方法隐藏</strong></u></p>\n<p><u><strong>用final声明的成员方法是最终方法，最终方法不能被子类覆盖</strong></u>（试图在子类写同名会直接报错）</p>\n<h3 id=\"继承的好处都有啥？\">继承的好处都有啥？</h3>\n<p>提高代码维护性，可重用性，可扩展性</p>\n<p>继承是类实现可重用性和可扩充性的关键持征</p>\n<p>减少模块间的接口和界面</p>\n<p><strong>但是继承破坏了封装性，导致耦合性变高</strong>，但是问题不大</p>\n<h2 id=\"多态\">多态</h2>\n<h3 id=\"静多态\">静多态</h3>\n<p>即在编译时决定调用哪个方法，也称为编译时多态</p>\n<p>一般是指方法重载，方法隐藏</p>\n<h4 id=\"方法重载\">方法重载</h4>\n<p>方法名相同，参数个数、参数类型及参数顺序至少有一个不同</p>\n<p>构造方法和静态成员方法都是可以重载，静态成员方法重载后的方法也可以是非静态成员方法。</p>\n<h4 id=\"方法隐藏\">方法隐藏</h4>\n<p>傻逼父类静态方法，不会被子类静态方法覆盖，只会被隐藏</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Parent</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span>&#123;System.out.print(<span class=\"string\">&quot;Parent&quot;</span>)&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Parent</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span>&#123;System.out.print(<span class=\"string\">&quot;Child&quot;</span>)&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    \t<span class=\"type\">Parent</span> <span class=\"variable\">child1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Child</span>();</span><br><span class=\"line\">        <span class=\"type\">Child</span> <span class=\"variable\">child2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Child</span>();</span><br><span class=\"line\">        child1.print(); <span class=\"comment\">//Parent</span></span><br><span class=\"line\">        child2.print(); <span class=\"comment\">//Child</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"comment\">//傻逼方法隐藏</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"动多态\">动多态</h3>\n<p>运行时才能确定调用哪个方法，也称为运行时多态，也称为动态联编，也称为动绑定</p>\n<p>“覆盖方法、抽象方法和接口” 和动态联编关系紧密</p>\n<h4 id=\"方法覆盖\">方法覆盖</h4>\n<p>继承，方法覆盖，父类的引用指向派生类的实例且通过父类的引用调用被覆盖的方法</p>\n<p>final方法没法被覆盖</p>\n<p><em><strong>但是他妈的final变量又可以被子类的隐藏，傻逼 Java有病是不是</strong></em></p>\n<p>私有方法、静态方法不能被覆盖，如果在子类出现了同签名的方法，那是方法隐藏；</p>\n<p><strong><u>继承是子类使用父类的方法，而多态则是父类使用子类的方法</u></strong></p>\n<h2 id=\"抽象类\">抽象类</h2>\n<p>不能实例化，但可以创建它的引用</p>\n<p>抽象方法不能被private、final或static修饰</p>\n<p>当类实现了一个接口/继承抽象类，但并没有实现该接口/抽象类的所有方法时，该类必须声明为抽象类，否则出错</p>\n<p>抽象类里可以有变量</p>\n<p>可以有构造方法</p>\n<p>可以有非抽象方法</p>\n<p>抽象方法必须在抽象类里</p>\n<h2 id=\"接口\">接口</h2>\n<p>public interface 名字{…}</p>\n<p>interface extents interface</p>\n<p>class implements interface</p>\n<h4 id=\"定义\">定义</h4>\n<p>接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义，而没有方法的实现。接口是抽象方法和常量值的定义的集合</p>\n<p>接口是用来实现类间（不相关类）多重继承功能的结构</p>\n<h4 id=\"接口要点\">接口要点</h4>\n<p>所有的变量都默认是<strong>public static final</strong>，并且没法改</p>\n<p>接口中所有的方法都默认是<strong>public abstract</strong>的</p>\n<p>没有构造方法</p>\n<p>一个类可以实现多个接口</p>\n<p>接口中的方法体可以由 java 语言书写，也可以由其他语言书写，用其他语言书写时，接口方法需要用 native关键字修饰（牛逼）</p>\n<p>类在实现抽象方法时必须显式的使用 <strong>public</strong> 修饰符</p>\n<h4 id=\"接口回调\">接口回调</h4>\n<p>把实现某一接口的类创建的对象引用赋给该接口声明的接口变量</p>\n<p>该接口变量就可以调用被类实现的接口中的方法。</p>\n<h4 id=\"接口的进化\">接口的进化</h4>\n<p>其实就是一个接口继承了多接口…</p>\n<h2 id=\"抽象类和接口的区别\">抽象类和接口的区别</h2>\n<ul>\n<li>\n<p>接口中的成员变量和方法只能是public类型的，而抽象类中的成员变量和方法可以处于各种访问级别。</p>\n</li>\n<li>\n<p>接口中的成员变量只能是public、static和final类型的，而在抽象类中可以定义各种类型的实例变量和静态变量。</p>\n</li>\n<li>\n<p>接口中没有构造方法，抽象类中有构造方法。接口中所有方法都是抽象方法，抽象类中可以有非抽象方法，可以没有抽象方法。抽象类比接口包含了更多的实现细节。</p>\n</li>\n</ul>\n<h2 id=\"转型\">转型</h2>\n<h4 id=\"向上转型\">向上转型</h4>\n<p>将子类转换成父类，在继承关系上面是向上移动的，所以一般称之为向上转型或者向上映射。</p>\n<p>只能调用父类中定义的属性和方法。</p>\n<p>用的变量是父类的，方法是父类被子类覆盖的</p>\n<p>没法用子类独有的变量/方法</p>\n<p>安全</p>\n<h4 id=\"向下转型\">向下转型</h4>\n<p>一个已经向上转型的子类对象可以使用强制类型转换的格式，将父类引用转为子类引用，这个过程是向下转型</p>\n<p>能用子类独有的变量/方法</p>\n<p><strong>若直接创建父类对象，无法向下转型！</strong></p>\n<p>不安全</p>\n<p><strong>不可转会有运行时异常ClassCastException，<u>不是编译时异常！</u></strong></p>\n<h4 id=\"instanceof\">instanceof</h4>\n<p><code>obj instanceof ClassName/InterfaceName</code></p>\n<p>判断是否是某类/接口的实例</p>\n<h2 id=\"设计原则\">设计原则</h2>\n<ul>\n<li>\n<p>开闭原则：一个软件实体应当对扩展开放，对修改关闭——降低维护风险</p>\n</li>\n<li>\n<p>单一职责原则: 一个类只负责一个功能领域中的相应职责——提高可读性</p>\n</li>\n<li>\n<p>里氏代换原则: 所有引用基类（父类）的地方必须能透明地使用其子类的对象——防止继承泛滥</p>\n</li>\n<li>\n<p>合成复用原则：尽量使用组合或者聚合关系实现代码复用，少使用继承。——降低耦合</p>\n</li>\n<li>\n<p>依赖倒转原则: 抽象不应该依赖于细节, 细节应当依赖于抽象。 换言之, 要针对接口编程, 而不是针对实现编程——利于升级拓展</p>\n</li>\n<li>\n<p>接口隔离原则: 使用多个专门的接口, 而不使用单一的总接口, 即客户端不应该依赖那些它不需要的接口——高聚合低耦合</p>\n</li>\n<li>\n<p>迪米特法则: 一个软件实体应当尽可能少地与其他实体发生相互作用——减少代码臃肿</p>\n</li>\n</ul>\n<h2 id=\"设计模式\">设计模式</h2>\n<h3 id=\"单例\">单例</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">饿汉 线程安全效率高，可能浪费空间</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//静态的,保留自身的引用,类加载时就初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Singleton</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">    <span class=\"comment\">//必须是私有的构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//公共的静态的方法。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> test;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">懒汉 线程不安全，不浪费空间</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//静态的。保留自身的引用。</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Singleton</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//必须是私有的构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//公共的静态的方法。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(test == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            test = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> test;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Object类\">Object类</h2>\n<p>public final Class&lt;?&gt; getClass（）{ }</p>\n<p>public int hashCode() { }对地址或者String进行Hash</p>\n<p>自己的类：equal和==基本一样</p>\n<p>一些系统的类：String、File、Integer、Double，</p>\n<p>Equal判断值是否一样，==判断是否是一个实例</p>\n<h2 id=\"Final方法-类\">Final方法/类</h2>\n<p>最终方法既不能被覆盖，也不能被重载</p>\n<p>final类中的方法都是隐式的final方法，private默认final</p>\n<p><strong>abstract和final不能同时使用</strong></p>\n<p>简单数据类型常量其值一旦确定，就不能被改变</p>\n<p><strong>复合数据类型常量指的是引用不能被改变，而其具体的值是可以改变的</strong></p>\n<p>final变量要么就直接赋值，要么就得在代码块或者构造函数中赋值</p>\n<h2 id=\"内部类\">内部类</h2>\n<p>在创建实例内部类的实例时，外部类的实例必须已经存在</p>\n<p>静态内部类的实例不会自动持有外部类的特定实例的引用，在创建内部类的实例时，不必创建外部类的实例</p>\n<h4 id=\"局部内部类\">局部内部类</h4>\n<p>只能在当前方法中使用</p>\n<p>可访问外部类的所有成员以及方法中用final修饰的内部成员</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">(<span class=\"keyword\">final</span> x)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> y=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">z</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">class</span> <span class=\"title class_\">B</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//可访问a,x,y</span></span><br><span class=\"line\">            <span class=\"comment\">//不可访问z</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"匿名类\">匿名类</h4>\n<p>匿名类就是没有名字的类，是将类和类的方法定义在一个表达式范围里</p>\n<p>匿名类本身没有构造方法，但是会调用父类的构造方法</p>\n<p>作用：封装类型、直接访问外部类的成员、回调外部类的方法</p>\n<h4 id=\"回调\">回调</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Adjustable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">adjust</span><span class=\"params\">(<span class=\"type\">int</span> temperature)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Base</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> speed;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">adjust</span><span class=\"params\">(<span class=\"type\">int</span> speed)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.speed=speed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sub</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> temperature;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">adjustTemperature</span><span class=\"params\">(<span class=\"type\">int</span> temperature)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.temperature=temperature;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Closure</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Adjustable</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">adjust</span><span class=\"params\">(<span class=\"type\">int</span> temperature)</span>&#123;</span><br><span class=\"line\">            adjustTemperature(temperature);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Adjustable <span class=\"title function_\">getCallBackReference</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Closure</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">    <span class=\"type\">Sub</span> <span class=\"variable\">sub</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Sub</span>();</span><br><span class=\"line\">\t<span class=\"type\">Adjustable</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> sub.getCallBackReference();</span><br><span class=\"line\">\ta.adjust(<span class=\"number\">10</span>); <span class=\"comment\">//温度</span></span><br><span class=\"line\">\tsub.adjust(<span class=\"number\">114514</span>); <span class=\"comment\">//速度</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"异常\">异常</h2>\n<p>方法中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法声明处：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void method() throws xxx&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>自定义异常</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class 名字 extends Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"集合\">集合</h2>\n<h3 id=\"Set\">Set</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeSet</span>&lt;&gt;(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(o1==<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(o2==<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o1&gt;o2?-<span class=\"number\">1</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Integer integer : set) &#123;</span><br><span class=\"line\">    System.out.println(integer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Iterator&lt;Integer&gt; setIt = set.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span>(setIt.hasNext())&#123;</span><br><span class=\"line\">    System.out.println(setIt.next());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Object[] setArray = set.toArray();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i&lt;setArray.length;i++)&#123;</span><br><span class=\"line\">    System.out.println(setArray[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SortedSet是一个按照升序排列元素的Set，狗都不用。</p>\n<h3 id=\"List\">List</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> List&lt;Food&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Food&gt;();</span><br><span class=\"line\"><span class=\"keyword\">static</span> List&lt;Food&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;Food&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(Food f : list)&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"number\">2</span>+<span class=\"string\">&quot; &quot;</span>+f.type);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;<span class=\"comment\">//can break</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">list.forEach(</span><br><span class=\"line\">    x-&gt;&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;1 &quot;</span>+x.type);</span><br><span class=\"line\">        <span class=\"comment\">//can&#x27;t break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i&lt;list.size();i++)&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"number\">3</span>+<span class=\"string\">&quot; &quot;</span>+list.get(i).type);<span class=\"comment\">//can break</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Linked还能选择在头或者尾 加元素/获取元素/删除元素</span><br></pre></td></tr></table></figure>\n<h3 id=\"Map\">Map</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Integer, String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeMap</span>&lt;&gt;(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Integer obj1, Integer obj2)</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 降序排序</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> obj2.compareTo(obj1);</span><br><span class=\"line\">            <span class=\"comment\">//return obj1.compareTo(obj2);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">map.keySet();<span class=\"comment\">//返回Set</span></span><br><span class=\"line\">map.values();<span class=\"comment\">//返回Collection</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(Entry entry: map.entrySet())&#123;</span><br><span class=\"line\">    System.out.println(entry.getKey()+<span class=\"string\">&quot; &quot;</span>+entry.getValue());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"集合对比\">集合对比</h3>\n<h4 id=\"Vector-ArrayList\">Vector &amp; ArrayList</h4>\n<p>Vector线程安全</p>\n<p>ArrayList重速度轻安全，线程非安全</p>\n<p>长度需增长时，Vector默认增长一倍，ArrayList增长50%</p>\n<h4 id=\"Hashtable-HashMap\">Hashtable &amp; HashMap</h4>\n<p>Hashtable线程安全，不允许null值，继承Dictionary类</p>\n<p>HashMap线程非安全，允许null值，实现Map接口</p>\n<h3 id=\"Iterator\">Iterator</h3>\n<p>只能用来遍历喵</p>\n<h3 id=\"Arrays-sort\">Arrays.sort</h3>\n<p>不会真有人用这玩意吧</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer[] a = &#123;<span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Arrays.sort(a,<span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Integer obj1, Integer obj2)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 降序排序</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj1.compareTo(obj2);</span><br><span class=\"line\">        <span class=\"comment\">//return obj1.compareTo(obj2);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"IO\">IO</h2>\n<p>Input/OutputStream：字节流</p>\n<p>Reader/Writer：字符流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure>\n<h3 id=\"各种流\">各种流</h3>\n<p>过滤流类的主要功能是为输入/输出流提供一个通用的接口，提供将流连接在一起的能力，即将一个流连接到另一个流的尾部，这样可以得到满足应用程序要求的很长的输入和输出过滤器。</p>\n<p>带缓存的输入流和输出流对应的类是：BufferedInputStream，BufferedOutputStream：快得很呐</p>\n<p>回压流：类PushbackInputStream提供了几个unread()方法，把读过的一个或几个字节数据退回到输入流中，当然也可以回压别的字节数据到输入流中。</p>\n<p>unread(int b)   unread(byte[] b)</p>\n<p>打印流PrintStream是非常重要的输出流，在标准输出中经常用到的System.out就是指向PrintStream实例的一个引用</p>\n<p>对象流：读取文件中的对象或将对象写入文件中（看下面序列化）</p>\n<p>管道流：管道数据流主要用于线程间的通信</p>\n<h3 id=\"文件\">文件</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//反正我大作业这么写能跑</span></span><br><span class=\"line\"><span class=\"type\">File</span> <span class=\"variable\">chatFile</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;...&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">BufferedReader</span> <span class=\"variable\">Br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(chatFile));</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((Message = Br.readLine())!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">    System.out.println(Message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这么写也行</span></span><br><span class=\"line\"><span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> .......;</span><br><span class=\"line\"><span class=\"type\">BufferedReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(fileInputStream));</span><br><span class=\"line\">String str;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((str = reader.readLine())!=<span class=\"literal\">null</span>)</span><br><span class=\"line\">    System.out.println(str);</span><br></pre></td></tr></table></figure>\n<h3 id=\"序列化\">序列化</h3>\n<p>简单</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">serializeBox</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;./box.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">oos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(f));</span><br><span class=\"line\">    oos.writeObject(box);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Box <span class=\"title function_\">deserializeBox</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;./box.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">ois</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(f));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (Box)ois.readObject();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多线程\">多线程</h2>\n<h3 id=\"进程？线程？\">进程？线程？</h3>\n<p>进程（process）是<strong>程序的一次执行过程</strong>，是系统运行程序的基本单位。程序是静态的，进程是动态的。系统运行一个程序即是一个进程从创建、运行到消亡的过程</p>\n<p>**线程：**比进程更小的执行单位，一个进程中可以包含多个线程</p>\n<p>线程优先级：范围 1~10 （10 级）。数值越大，级别越高 setPriority( )</p>\n<h3 id=\"线程方法\">线程方法</h3>\n<p>start()：启动一个线程。</p>\n<p>run()：线程体,由start()方法调用，run()方法返回时当前线程结束</p>\n<p>sleep(int n)：使线程睡眠n毫秒</p>\n<p>yield()：将CPU控制权主动移交到下一个可运行线程</p>\n<p>join()：方法join()将引起现行线程等待</p>\n<p>sleep&amp;yield：都是静态的实例方法</p>\n<p>sleep()使线程转入阻塞状态，而yield()使线程转入runnable状态</p>\n<p>yield()给相同优先级或更高的线程运行机会，如果当前没有存在相同优先级的线程，则yield()什么都不做</p>\n<p>sleep()会有中断异常抛出，而yiled()不抛出任何异常</p>\n<p>sleep()方法具有更好的可移植性</p>\n<p>wait&amp;sleep</p>\n<p>sleep()方法不会释放对象的锁，而wait()\\方法进入等待时，可以释放对象的锁</p>\n<p>wait,notify和notifyAll都是与同步相关联的方法,只有在synchronized方法中才可以用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Thread1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;o.O&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestThread</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//??</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">TestThread</span> <span class=\"variable\">testThread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestThread</span>();</span><br><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">thread1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(testThread, <span class=\"string\">&quot;Thread1&quot;</span>);</span><br><span class=\"line\">thread1.start();</span><br></pre></td></tr></table></figure>\n<h3 id=\"synchronized\">synchronized</h3>\n<p>用关synchronized为共享资源加锁，在任何时刻只有一个线程能用</p>\n<p>synchronized关键字可以使用在：</p>\n<p>①1.一个成员方法上</p>\n<p>②2.一个静态方法上</p>\n<p>③3.一个语句块上</p>\n<p>synchronized(obj)</p>\n<p>wait让本线程等待；别的线程notify可以让等待区一个线程准备开始（但是如果有线程用锁，该线程还是会处于BLOCKED状态）notifyAll唤醒所有</p>\n<p>wait(xx)可以传入时间，单位毫秒</p>\n<h3 id=\"守护进程\">守护进程</h3>\n<p>当一个应用程序的所有非守护线程终止运行时，即使仍然有守护线程在运行，应用程序也将终止</p>\n<p>只要有一个非守护线程在运行，应用程序就不会终止</p>\n<p>用setDaemon() 来将一个线程设为守护线程</p>\n<h3 id=\"Timer\">Timer</h3>\n<p>Timer类的schedule(TimerTask task, long delay, long period)方法用来设置定时器需要定时执行的任务</p>\n<p>定时器将在delay毫秒以后开始执行task任务（即执行TimerTask实例的run()方法），每隔period毫秒重复执行一次</p>\n<h2 id=\"网络\">网络</h2>\n<p>最常用的传输层的网络通信协议是TCP和UDP.</p>\n<p>端口号的范围为0~65535之间，0~1023之间的端口数是用于一些知名的网络服务和应用</p>\n<p>利用TCP协议进行通信的两个应用程序是有主从之分的，一个称为服务器程序，一个称为客户机程序，两者的功能和编写方法不大一样</p>\n<p>Socket(String host,int port);</p>\n<p>socket.getOutputStream();</p>\n<p>利用UDP通信的两个程序是平等的，没有主次之分，两个程序的代码可以完全一样</p>\n<p>Public DatagramSocket(int port);</p>\n<p>Send(DatagramPacket p)方法</p>\n<p>Receive(DatagramPacket p)</p>\n<p>Public DatagramPacket(byte[] buf,int length);</p>\n<p>tcp能提供数据可靠性</p>\n<p>udp不能保证数据库可靠性</p>\n<p>tcp传输效率比udp低</p>\n",
            "tags": [
                "大学",
                "总结",
                "Java"
            ]
        }
    ]
}