<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.unfinished.top</id>
    <title>机煲的小窝 • Posts by &#34;计组&#34; tag</title>
    <link href="https://blog.unfinished.top" />
    <updated>2024-01-08T10:16:31.000Z</updated>
    <category term="大学" />
    <category term="总结" />
    <category term="编译" />
    <category term="Java" />
    <category term="Hexo" />
    <category term="格式" />
    <category term="测试" />
    <category term="考研" />
    <category term="高等数学" />
    <category term="编译原理" />
    <category term="操作系统" />
    <category term="数字电路" />
    <category term="计组" />
    <category term="计网" />
    <entry>
        <id>https://blog.unfinished.top/2024/01/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/</id>
        <title>计算机组成</title>
        <link rel="alternate" href="https://blog.unfinished.top/2024/01/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
        <content type="html">&lt;h1&gt;-1 蛤？&lt;/h1&gt;
&lt;p&gt;1个字节（byte）= 8位（bit）&lt;/p&gt;
&lt;p&gt;32位系统中，1 字 = 4 字节；64位，1 字 = 8 字节&lt;/p&gt;
&lt;p&gt;在 MIPS 指令集中可以用来实现跳转到 4GB 空间内任意地址的指令是 &lt;strong&gt;jr&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;j：可跳转226+2=228个地址单元，即228+3bits = 256 MB&lt;/p&gt;
&lt;p&gt;beq：256 KB&lt;/p&gt;
&lt;h1&gt;0 绪论&lt;/h1&gt;
&lt;h3 id=&#34;冯诺依曼架构&#34;&gt;冯诺依曼架构&lt;/h3&gt;
&lt;p&gt;计算机应由运算器、控制器、存储器、输入设备和输出设备五个基本部件组成。&lt;/p&gt;
&lt;p&gt;存储器不仅能存放数据，而且也能存放指令，形式上两者没有区别，但计算机应能区分数据还是指令；控制器应能自动取出指令来执行；运算器应能进行加/减/乘/除四种基本算术运算，并且也能进行一些逻辑运算和附加运算；操作人员可以通过输入设备、输出设备和主机进行通信。&lt;/p&gt;
&lt;h3 id=&#34;抽象&#34;&gt;抽象&lt;/h3&gt;
&lt;p&gt;文件是对 I/0 设备的抽象&lt;/p&gt;
&lt;p&gt;虚拟内存是对程序存储器的抽象&lt;/p&gt;
&lt;p&gt;进程是对一个正在运行的程序的抽象：是在给定数据集上的一次程序执行&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1703731953839.png&#34; alt=&#34;1703731953839&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;并发并行&#34;&gt;并发并行&lt;/h3&gt;
&lt;p&gt;并发:  逻辑上的并行，物理上交替执行（使系统能够同时处理多个任务）&lt;/p&gt;
&lt;p&gt;并行:  物理上的并行（使系统真正地运行更快）&lt;/p&gt;
&lt;h1&gt;1 数制与运算&lt;/h1&gt;
&lt;h2 id=&#34;进制&#34;&gt;进制&lt;/h2&gt;
&lt;h3 id=&#34;进制转换&#34;&gt;进制转换&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1703732717527.png&#34; alt=&#34;1703732717527&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1703732759516.png&#34; alt=&#34;1703732759516&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;补码&#34;&gt;补码&lt;/h3&gt;
&lt;p&gt;补码取反加一 0011 → 1101  (3 → -3)     取反加一和减一取反效果一样&lt;/p&gt;
&lt;p&gt;反码只取反，原码只改符号位&lt;/p&gt;
&lt;h3 id=&#34;补码运算&#34;&gt;补码运算&lt;/h3&gt;
&lt;p&gt;[X+Y]补= [X]补+ [Y]补，[X-Y]补=[X]补+[-Y]补&lt;/p&gt;
&lt;p&gt;3+4 = 7  0011+0100 = 0111&lt;/p&gt;
&lt;p&gt;3-4 = -1  0011+1100 = 1111&lt;/p&gt;
&lt;h3 id=&#34;浮点数表示&#34;&gt;浮点数表示&lt;/h3&gt;
&lt;p&gt;阶码：01000    尾数：0.10110010001&lt;/p&gt;
&lt;p&gt;178.125 =  10110010.001 = 0.10110010001 * （2^01000）&lt;/p&gt;
&lt;h3 id=&#34;浮点数规格化&#34;&gt;浮点数规格化&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1704519002020.png&#34; alt=&#34;1704519002020&#34;&gt;&lt;/p&gt;
&lt;p&gt;数符 S： 1位，0表示正数，1表示负数&lt;/p&gt;
&lt;p&gt;阶码 E：用移码表示，n 位阶码偏移量为 2n-1-1&lt;/p&gt;
&lt;p&gt;如8位阶码偏移量为 7FH（即127）， 11位阶码偏移量3FFH（即1023）&lt;/p&gt;
&lt;p&gt;尾数 M： 尾数必须规格化成小数点左侧一定为1，并且小数点前面这个1作为隐含位被省略。这样单精度浮点数尾数实际上为24位&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;计算： 1.m * 2^(E-127)  如果是双精度，是E-1023&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;E一定要先减&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106140221740.png&#34; alt=&#34;image-20240106140221740&#34; style=&#34;zoom: 50%;&#34; /&gt;&lt;img src=&#34;image-20240106140645838.png&#34; alt=&#34;image-20240106140645838&#34; style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2的-126 ~ 127次方&lt;/p&gt;
&lt;h3 id=&#34;大端小端&#34;&gt;大端小端&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;大端存储模式&lt;/strong&gt;：数据的低位保存在内存中的高地址中，数据的高位保存在内存中的低地址中；&lt;br&gt;
&lt;strong&gt;小端存储模式&lt;/strong&gt;：数据的低位保存在内存中的低地址中，数据的高位保存在内存中的高地址中；&lt;/p&gt;
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200525162747150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4NjU5Mg==,size_16,color_FFFFFF,t_70&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;h3 id=&#34;各种编码表示10进制&#34;&gt;各种编码表示10进制&lt;/h3&gt;
&lt;p&gt;8421：正常，0＝0000 1＝0001 2＝0010 3＝0011 4＝0100 … 9＝1001&lt;/p&gt;
&lt;p&gt;5421：… 3＝0011 4＝0100 5＝1000 … 9＝1100 ; 而0101是禁止码&lt;/p&gt;
&lt;p&gt;2421：… 4＝0100  5＝1011  6＝1100  7＝1101  8＝1110  9＝1111&lt;/p&gt;
&lt;p&gt;余3：每个字符编码比相应的8421码多3，0＝0011 1＝0100 2＝0101 3＝0110 … 9＝1100&lt;/p&gt;
&lt;p&gt;不是重点，但是挺逆天的&lt;/p&gt;
&lt;h2 id=&#34;逻辑代数&#34;&gt;逻辑代数&lt;/h2&gt;
&lt;p&gt;按位或：“|”&lt;/p&gt;
&lt;p&gt;按位与：“&amp;amp;”&lt;/p&gt;
&lt;p&gt;按位取反：“~”（单目运算）&lt;/p&gt;
&lt;p&gt;按位异或：“^”&lt;/p&gt;
&lt;p&gt;左移：高位移出，低位补0。可能溢出！&lt;/p&gt;
&lt;p&gt;右移：低位移出，高位补符，可能发生有效数据丢失。&lt;/p&gt;
&lt;p&gt;与：F = A·B ，F=AB   或者    F = A∧B&lt;/p&gt;
&lt;p&gt;或：F = A + B    或者  F = A ∨ B&lt;/p&gt;
&lt;p&gt;异或F=A 圆中间一个十字B&lt;/p&gt;
&lt;p&gt;同或F = A⊙ B&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1704522811761.png&#34; alt=&#34;1704522811761&#34; style=&#34;zoom: 50%;&#34; /&gt;&lt;img src=&#34;1704524870583.png&#34; alt=&#34;1704524870583&#34;&gt;&lt;/p&gt;
&lt;p&gt;对偶定理：将原函数F中的全部 “•” 换成 “+”，“+” 换成 “•”，“0”换成 “1”，“1” 换成 “0”，所得的新函数就是原函数的对偶式，记作F’或F*&lt;/p&gt;
&lt;p&gt;由n个变量组成的 “与” 项中，每个变量以原变量或反变量的形式出现且仅出现一次，则这个与项称为最小项&lt;/p&gt;
&lt;p&gt;n个变量有2^n个最小项&lt;/p&gt;
&lt;p&gt;全部由最小项构成的与或式，也称标准与或式&lt;/p&gt;
&lt;img src=&#34;1704523166223.png&#34; alt=&#34;1704523166223&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;img src=&#34;1704523282308.png&#34; alt=&#34;1704523282308&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;img src=&#34;1704523306716.png&#34; alt=&#34;1704523306716&#34; style=&#34;zoom:45%;&#34; /&gt;
&lt;h3 id=&#34;简化公式&#34;&gt;简化公式&lt;/h3&gt;
&lt;img src=&#34;1704523501199.png&#34; alt=&#34;1704523501199&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;&lt;img src=&#34;1704523947036.png&#34; alt=&#34;1704523947036&#34; style=&#34;zoom:50%;&#34; /&gt;吸收率1&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1704523908797.png&#34; alt=&#34;1704523908797&#34; style=&#34;zoom:50%;&#34; /&gt;吸收率2&lt;/p&gt;
&lt;h1&gt;2 数字逻辑&lt;/h1&gt;
&lt;h2 id=&#34;组合逻辑&#34;&gt;组合逻辑&lt;/h2&gt;
&lt;p&gt;从结构看，组合逻辑电路由门电路构成，不含   反馈电路       ，也不含   存储电路      ，信号从输入开始单向传输到输出。对于组合逻辑电路，任何时刻电路的输出仅由当时的  输入信号       决定&lt;/p&gt;
&lt;h3 id=&#34;半加器&#34;&gt;半加器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106150537827.png&#34; alt=&#34;image-20240106150537827&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;img src=&#34;image-20240106150548415.png&#34; alt=&#34;image-20240106150548415&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;全加器&#34;&gt;全加器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106150930863.png&#34; alt=&#34;image-20240106150930863&#34; style=&#34;zoom: 50%;&#34; /&gt;&lt;img src=&#34;image-20240106151004002.png&#34; alt=&#34;image-20240106151004002&#34; style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;img src=&#34;image-20240106150945894.png&#34; alt=&#34;image-20240106150945894&#34; style=&#34;zoom: 80%;&#34; /&gt;
&lt;h4 id=&#34;溢出&#34;&gt;溢出&lt;/h4&gt;
&lt;p&gt;“00”表示正，“11”表示负，如果运算结果符号位出现“01”（正溢）或“10” （负溢）都表示出现溢出&lt;/p&gt;
&lt;p&gt;6 = 0110   7 = 0111   6+7 = 01101，正溢出&lt;/p&gt;
&lt;p&gt;-6=1010     -7=1001  -6-7 = 10011，负溢出&lt;/p&gt;
&lt;p&gt;-3 = 1101    -3-3 = 11010  负数不溢出&lt;/p&gt;
&lt;h3 id=&#34;数值比较器&#34;&gt;数值比较器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106155205001.png&#34; alt=&#34;image-20240106155205001&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;img src=&#34;image-20240106155231376.png&#34; alt=&#34;image-20240106155231376&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;ALU&#34;&gt;ALU&lt;/h3&gt;
&lt;p&gt;操作数，选择数&lt;/p&gt;
&lt;h3 id=&#34;编码器&#34;&gt;编码器&lt;/h3&gt;
&lt;p&gt;某一个输入端的信号变换成相应的一组二进制代码输出的过程叫做   编码&lt;/p&gt;
&lt;img src=&#34;image-20240106160236976.png&#34; alt=&#34;image-20240106160236976&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;&lt;img src=&#34;1704528511028.png&#34; alt=&#34;1704528511028&#34; style=&#34;zoom: 50%;&#34; /&gt;74147优先编码器（谁优先输出谁）&lt;/p&gt;
&lt;h3 id=&#34;译码器&#34;&gt;译码器&lt;/h3&gt;
&lt;p&gt;将二进制代码所表示的信息翻译成对应高低电平信号输出的过程称为译码&lt;/p&gt;
&lt;p&gt;3线-8线译码器（74138）&lt;/p&gt;
&lt;p&gt;3个输入：A2，A1，A0；000~111共8种输入组合。&lt;/p&gt;
&lt;p&gt;8个输出：Y7~Y0，&lt;strong&gt;低电平&lt;/strong&gt;输出有效；任何时刻最多只有一个输出有效。当输入为000时，Y0输出有效；当输入为001时，Y1输出有效。&lt;/p&gt;
&lt;p&gt;3个使能控制：S0，S1，S2 为使能输入，仅当它们分别为1、0、0时，译码器才正常译码；否则禁止工作。&lt;/p&gt;
&lt;h3 id=&#34;多路选择器&#34;&gt;多路选择器&lt;/h3&gt;
&lt;img src=&#34;image-20240106162146201.png&#34; alt=&#34;image-20240106162146201&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;若D7-D0  = 10100101&lt;/p&gt;
&lt;p&gt;Y = m7+m5+m2+m0&lt;/p&gt;
&lt;h3 id=&#34;竞争冒险&#34;&gt;竞争冒险&lt;/h3&gt;
&lt;h4 id=&#34;竞争&#34;&gt;竞争&lt;/h4&gt;
&lt;p&gt;某个输入变量通过两条或两条以上的途径传到输出端，由于每条途径延迟时间不同，到达输出门的时间就有先有后&lt;/p&gt;
&lt;h4 id=&#34;冒险&#34;&gt;冒险&lt;/h4&gt;
&lt;p&gt;门电路因输入端的竞争而导致输出端产生不正常的尖峰干扰脉冲信号（毛刺）的现象&lt;/p&gt;
&lt;p&gt;A+ !A 存在0冒险          A ·!A存在1冒险&lt;/p&gt;
&lt;h4 id=&#34;卡诺图法判断&#34;&gt;卡诺图法判断&lt;/h4&gt;
&lt;p&gt;在逻辑函数的卡诺图中，函数的每个与项对应卡诺图上的一个卡诺圈，若两个卡诺圈相切，相切处将存在冒险。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1704530434352.png&#34; alt=&#34;1704530434352&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;img src=&#34;1704530834543.png&#34; alt=&#34;1704530834543&#34; style=&#34;zoom: 67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;增加冗余项。&lt;/p&gt;
&lt;p&gt;L=AC+ ̅AB，当B=C=1时， L=A+ ̅A，存在冒险。增加冗余项 L=AC+  ̅AB+BC，逻辑函数功能不变，冒险消除。&lt;/p&gt;
&lt;h2 id=&#34;时序逻辑&#34;&gt;时序逻辑&lt;/h2&gt;
&lt;h3 id=&#34;锁存器和触发器&#34;&gt;锁存器和触发器&lt;/h3&gt;
&lt;p&gt;锁存器是电位（电平）触发的，只有在时钟CP有效电平（高电平CP=1或者低电平CP＝0）期间，触发器的状态才有可能发生变化。&lt;/p&gt;
&lt;p&gt;触发器的状态变化只发生在时钟CP的有效沿（上升沿或者下降沿）期间，CP＝1、CP=0时触发器的状态不会发生变化&lt;/p&gt;
&lt;p&gt;D锁存：CP=0保持；CP=1置为D的值&lt;/p&gt;
&lt;h4 id=&#34;D触发器&#34;&gt;D触发器&lt;/h4&gt;
&lt;p&gt;D触发由2个D锁存组成；CP从0到1触发&lt;/p&gt;
&lt;p&gt;加使能EN：EN=1正常，EN=0一直保持&lt;/p&gt;
&lt;h4 id=&#34;JK触发器&#34;&gt;JK触发器&lt;/h4&gt;
&lt;p&gt;J0K0，输出不变； J0K1，输出为0； J1K0，输出为1；J1K1，输出反转&lt;/p&gt;
&lt;h3 id=&#34;状态机&#34;&gt;状态机&lt;/h3&gt;
&lt;h4 id=&#34;Moore&#34;&gt;Moore&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;1704532315803.png&#34; alt=&#34;1704532315803&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;img src=&#34;1704535620164.png&#34; alt=&#34;1704535620164&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;输出信号仅与当前状态有关&lt;/p&gt;
&lt;h4 id=&#34;Mealy&#34;&gt;Mealy&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106171247758.png&#34; alt=&#34;image-20240106171247758&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;img src=&#34;1704535645537.png&#34; alt=&#34;1704535645537&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;输出信号与当前状态及输入信号有关&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1704535954265.png&#34; alt=&#34;1704535954265&#34; style=&#34;zoom:33%;&#34; /&gt;&lt;strong&gt;状态转移表长这样&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;移位寄存器&#34;&gt;移位寄存器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1704537187152.png&#34; alt=&#34;1704537187152&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;img src=&#34;image-20240106183331197.png&#34; alt=&#34;image-20240106183331197&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;脉冲一次移位一次&lt;/p&gt;
&lt;h3 id=&#34;计数器&#34;&gt;计数器&lt;/h3&gt;
&lt;h4 id=&#34;同步&#34;&gt;同步&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106184440187.png&#34; alt=&#34;image-20240106184440187&#34; style=&#34;zoom:50%;&#34; /&gt;同步计数器&lt;/p&gt;
&lt;img src=&#34;image-20240106184621964.png&#34; alt=&#34;image-20240106184621964&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h4 id=&#34;异步&#34;&gt;异步&lt;/h4&gt;
&lt;img src=&#34;image-20240106184719666.png&#34; alt=&#34;image-20240106184719666&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;img src=&#34;image-20240106184645318.png&#34; alt=&#34;image-20240106184645318&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h3 id=&#34;时钟同步？&#34;&gt;时钟同步？&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1704538203568.png&#34; alt=&#34;1704538203568&#34;&gt;&lt;/p&gt;
&lt;p&gt;Tccq：触发器时钟到Q的最小延迟&lt;/p&gt;
&lt;img src=&#34;1704539135847.png&#34; alt=&#34;1704539135847&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;p&gt;Tcd：组合逻辑的延迟&lt;/p&gt;
&lt;h1&gt;3 汇编&lt;/h1&gt;
&lt;h2 id=&#34;寻址&#34;&gt;寻址&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;立即寻址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;操作数直接在指令代码中给出。addi $s1, $s2, 100&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;寄存器直接寻址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;操作数在寄存器中，指令地址字段给出寄存器的地址  add &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;s1,&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8388800000000001em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;s2,$s3&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;寄存器间接寻址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;操作数在存储器中，指令地址字段中给出的寄存器的内容是操作数在存储器中的地址 lw  &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;s1, 0(&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;s2)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基址寻址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;操作数在存储器中，指令地址字段给出一基址寄存器和一形式地址，基址寄存器的内容与形式地址之和是操作数的内存地址 lw  &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mn&gt;100&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;s1,***100***(&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8388800000000001em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.46528em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;s2)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;变址寻址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;操作数在存储器中，指令地址字段给出一变址寄存器和一形式地址，变址寄存器的内容与形式地址之和是操作数的内存地址 lb &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;t1, string(&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;t0)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相对寻址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基址寻址的特例，由程序计数器PC作为基址寄存器，指令中给出的形式地址作为位移量，二者之和是操作数的内存地址。beq  $s1, $s2,  100&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;堆栈寻址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;压栈SP -= 4；出栈SP += 4；&lt;/p&gt;
&lt;h2 id=&#34;指令&#34;&gt;指令&lt;/h2&gt;
&lt;h3 id=&#34;指令类型-R-I-J&#34;&gt;指令类型 R/I/J&lt;/h3&gt;
&lt;p&gt;R：两个寄存器运算，结果存到第三个&lt;/p&gt;
&lt;p&gt;I：有1个符号立即数&lt;/p&gt;
&lt;p&gt;J：跳转，26位跳转地址&lt;/p&gt;
&lt;img src=&#34;image-20240106192507043.png&#34; alt=&#34;image-20240106192507043&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;h3 id=&#34;指令格式&#34;&gt;指令格式&lt;/h3&gt;
&lt;h4 id=&#34;R-Type&#34;&gt;R-Type&lt;/h4&gt;
&lt;p&gt;OP永为000000&lt;/p&gt;
&lt;p&gt;add：&lt;/p&gt;
&lt;img src=&#34;image-20240106192749894.png&#34; alt=&#34;image-20240106192749894&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;p&gt;&lt;strong&gt;逻辑左移sll&lt;/strong&gt; &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;t1,&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8388800000000001em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;t2,10也是R型，10存在Shamt里；sllv $t1, $t2, $t3&lt;/p&gt;
&lt;p&gt;jr $t1  # PC = $t1&lt;/p&gt;
&lt;img src=&#34;image-20240106193339782.png&#34; alt=&#34;image-20240106193339782&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h4 id=&#34;I-Type&#34;&gt;I-Type&lt;/h4&gt;
&lt;p&gt;rt ← rs + immediate&lt;/p&gt;
&lt;img src=&#34;image-20240106195235935.png&#34; alt=&#34;image-20240106195235935&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;rt ← memory[base + offest]&lt;/p&gt;
&lt;img src=&#34;image-20240106195301150.png&#34; alt=&#34;image-20240106195301150&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;img src=&#34;image-20240106195442117.png&#34; alt=&#34;image-20240106195442117&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;if (rs = rt) then PC ← PC + sign_extend&lt;/p&gt;
&lt;img src=&#34;image-20240106195502445.png&#34; alt=&#34;image-20240106195502445&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h4 id=&#34;J-Type&#34;&gt;J-Type&lt;/h4&gt;
&lt;p&gt;j直接跳转&lt;/p&gt;
&lt;img src=&#34;image-20240106195551348.png&#34; alt=&#34;image-20240106195551348&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;jal 指令的意思是跳转到对应标签的位置，并将当前执行的指令位置存储在 $ra 寄存器中。&lt;/p&gt;
&lt;h3 id=&#34;各种指令&#34;&gt;各种指令&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;赋值 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;li $t1, 100  ori $t1, 100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;传值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;move $t1, $t2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;add $t1, $t2, $t3 加&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mul $t1, $t2, $t3 乘&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;除法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;div $t1, $t2 # 计算 5 / 2，其中商存放在 lo 寄存器，而余数存放在 hi 寄存器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mfhi $t3 # 将 hi 寄存器中的值取出放到 t3 寄存器（余数，值为 1）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mflo $t4 # 将 lo 寄存器中的值取出放到 t4 寄存器（商，值为 2）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;跳转&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ble $t1, 5, label&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;j label&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;跳转到函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;jal 指令的意思是跳转到对应标签的位置，并将当前执行的指令位置存储在 $ra 寄存器中。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;jr $ra 函数结束后返回！很重要&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;数组&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;array: .space 400&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;la $t1, array&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;lw $t2, 0($t1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sw $t2, array($t3)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;字符串不用lw和sw&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;lb $a0, 0($t0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sb $a0, 0($t0)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&#34;image-20240106201044299.png&#34; alt=&#34;image-20240106201044299&#34; style=&#34;zoom: 45%;&#34; /&gt;
&lt;h1&gt;4 MIPS处理器&lt;/h1&gt;
&lt;h2 id=&#34;MIPS模型机&#34;&gt;MIPS模型机&lt;/h2&gt;
&lt;p&gt;寄存器，32位虚拟地址&lt;/p&gt;
&lt;p&gt;组合部件ALU（逻辑运算）、MUX（多路选择器）Signext（符号扩展）&lt;/p&gt;
&lt;p&gt;寄存器堆：两个32位数据输出端口，一个32位数据输入端口，三个5位寄存器地址输入端口&lt;/p&gt;
&lt;p&gt;边沿触发的时钟同步方法&lt;/p&gt;
&lt;h2 id=&#34;单周期处理器&#34;&gt;单周期处理器&lt;/h2&gt;
&lt;p&gt;哈佛体系结构：使用指令存储区（IM）和数据存储区（DM）分别保存指令和数据&lt;/p&gt;
&lt;p&gt;取指令&lt;/p&gt;
&lt;p&gt;32位Instruction = IM[PC]，PC+4，&lt;/p&gt;
&lt;img src=&#34;image-20240106210307704.png&#34; alt=&#34;image-20240106210307704&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;R型如add&lt;/p&gt;
&lt;img src=&#34;image-20240106211146176.png&#34; alt=&#34;image-20240106211146176&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;lw&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106211330560.png&#34; alt=&#34;image-20240106211330560&#34;&gt;&lt;/p&gt;
&lt;p&gt;sw&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106211413808.png&#34; alt=&#34;image-20240106211413808&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1704546944945.png&#34; alt=&#34;1704546944945&#34;&gt;&lt;/p&gt;
&lt;p&gt;寄存器堆写入端地址选择MUX，选择控制信号 RegDst&lt;/p&gt;
&lt;p&gt;ALU输入端B数据源选择MUX，选择控制信号 ALUSrc&lt;/p&gt;
&lt;p&gt;寄存器堆写入端数据源选择MUX，选择控制信号 MemtoReg&lt;/p&gt;
&lt;p&gt;beq&lt;/p&gt;
&lt;img src=&#34;image-20240106212423830.png&#34; alt=&#34;image-20240106212423830&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;img src=&#34;1704547957248.png&#34; alt=&#34;1704547957248&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;p&gt;PC输入端数据源选择MUX，选择控制信号 PCSrc&lt;/p&gt;
&lt;h3 id=&#34;控制信号&#34;&gt;控制信号&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1704548014476.png&#34; alt=&#34;1704548014476&#34;&gt;&lt;/p&gt;
&lt;p&gt;Op：控制7个控制信号&lt;/p&gt;
&lt;p&gt;Func：仅用于R型，控制ALUop&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RegDst&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;R型指令：RegDst=1，选择Rd&lt;/p&gt;
&lt;p&gt;Lw指令： RegDst=0，选择Rt&lt;/p&gt;
&lt;p&gt;其他指令：不关心&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ALUScr&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;R型指令：ALUSrc=0，选择寄存器堆的 Read data2 输出&lt;/p&gt;
&lt;p&gt;Lw Sw指令： ALUSrc=1，选择Signext的输出&lt;/p&gt;
&lt;p&gt;Beq指令（减法运算）： ALUSrc=0，选择 Read data2 输出&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MemtoReg&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;R型指令：MemtoReg=0，选择 ALU 输出&lt;/p&gt;
&lt;p&gt;Lw指令： MemtoReg=1，选择数据存储器DM输出&lt;/p&gt;
&lt;p&gt;其他指令： 不关心&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Branch&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Beq指令：Branch=1，此时若Zero=1，PC输入选择加法器Nadd输出（分支指令目的地址），否则选择加法器Add输出（PC+4）&lt;/p&gt;
&lt;p&gt;其他指令：Branch=0，PC输入选择加法器Add输出（PC+4）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106215650460.png&#34; alt=&#34;image-20240106215650460&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;ALU控制信号&#34;&gt;ALU控制信号&lt;/h4&gt;
&lt;p&gt;ALUOP：10,00,01,分3种情况，10再看FUNC字段，00做一个加法，01做一个减法&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1704549610485.png&#34; alt=&#34;1704549610485&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;单周期过程&#34;&gt;单周期过程&lt;/h3&gt;
&lt;p&gt;R 取值-读寄存器-ALU运算-写寄存器&lt;/p&gt;
&lt;p&gt;lw 取值-读寄存器-ALU运算-读数据-写寄存器&lt;/p&gt;
&lt;h2 id=&#34;多周期流水线&#34;&gt;多周期流水线&lt;/h2&gt;
&lt;h3 id=&#34;五个阶段&#34;&gt;五个阶段&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;取指-IF: 取指, PC自增&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;译码和读寄存器-ID:译码, 读寄存器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行-EX: 执行(ALU)  Lw/Sw指令:  计算内存指针  其他指令:  执行其他算术和逻辑运算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访存-Mem:   Lw:  从内存读数据到CPU寄存器  Sw:  把寄存器的值写到内存中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回写-WB: 把数据写回到寄存器中&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当时钟上升沿到来时，组合逻辑计算结果写入后级寄存器&lt;/p&gt;
&lt;h3 id=&#34;线路&#34;&gt;线路&lt;/h3&gt;
&lt;img src=&#34;image-20240106230648625.png&#34; alt=&#34;image-20240106230648625&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;增加新MUX&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1704551192433.png&#34; alt=&#34;1704551192433&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;指令相关&#34;&gt;指令相关&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;针对寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;读后写，写后读，写后写&lt;/p&gt;
&lt;h3 id=&#34;指令冲突&#34;&gt;指令冲突&lt;/h3&gt;
&lt;p&gt;只有写后读会有指令冲突&lt;/p&gt;
&lt;h2 id=&#34;流水线冒险&#34;&gt;流水线冒险&lt;/h2&gt;
&lt;p&gt;结构冒险：资源竞争，要使用的部件正在忙&lt;/p&gt;
&lt;p&gt;数据冒险：指令执行所需的数据暂时不可用而造成的指令执行的停顿&lt;/p&gt;
&lt;p&gt;控制冒险：也称为分支冒险，必须根据前一条指令的执行结果才能确定下一条真正要执行的指令地址&lt;/p&gt;
&lt;h2 id=&#34;&#34;&gt;&lt;/h2&gt;
&lt;h3 id=&#34;结构冒险&#34;&gt;结构冒险&lt;/h3&gt;
&lt;p&gt;内存：流水线的数据通路需要将指令和数据分别存储&lt;/p&gt;
&lt;p&gt;寄存器：将寄存器组的使用权限分为两部分，一个时钟周期内前半个时钟周期进行写操作，后半个时钟周期进行读操作&lt;/p&gt;
&lt;p&gt;在同一个时钟周期，可以同时进行读寄存器和写寄存器的操作&lt;/p&gt;
&lt;h3 id=&#34;数据冒险&#34;&gt;数据冒险&lt;/h3&gt;
&lt;h4 id=&#34;旁发&#34;&gt;旁发&lt;/h4&gt;
&lt;img src=&#34;1704553400856.png&#34; alt=&#34;1704553400856&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106223518442.png&#34; alt=&#34;image-20240106223518442&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;阻塞&#34;&gt;阻塞&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106230913999.png&#34; alt=&#34;image-20240106230913999&#34; style=&#34;zoom:50%;&#34; /&gt;阻塞+旁发&lt;/p&gt;
&lt;p&gt;阻塞等同插入nop指令&lt;/p&gt;
&lt;p&gt;条件：IF/ID的前序是lw指令，并且lw的rt寄存器与IF/ID的rs或rt相同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冻结IF/ID：sub继续被保存（用寄存器的使能）&lt;/li&gt;
&lt;li&gt;清除ID/EX：指令全为0，等价于插入NOP（用寄存器的CLR清除）&lt;/li&gt;
&lt;li&gt;冻结PC：防止PC继续计数，PC保持不变&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sub $t2,$t1,$t3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;add $t3,$t1,$t2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;从EX/MEM转发到ID/EX后面&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果有转发电路，&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;lw $t2, 4($t0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;add $t3, $t1, $t2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要插入几个NOP指令？&lt;strong&gt;&lt;u&gt;1个&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;有转发的完整流水线&#34;&gt;有转发的完整流水线&lt;/h4&gt;
&lt;img src=&#34;image-20240106235643532.png&#34; alt=&#34;image-20240106235643532&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h3 id=&#34;控制冒险&#34;&gt;控制冒险&lt;/h3&gt;
&lt;p&gt;阻塞或者赌博不跳转&lt;/p&gt;
&lt;p&gt;还可以在ID前放置比较器&lt;/p&gt;
&lt;h3 id=&#34;计算机性能&#34;&gt;计算机性能&lt;/h3&gt;
&lt;p&gt;响应时间：从提交作业到完成作业所花费的时间&lt;/p&gt;
&lt;p&gt;吞吐量：一定时间间隔内完成的作业数&lt;/p&gt;
&lt;h1&gt;5 主存&lt;/h1&gt;
&lt;h2 id=&#34;工作原理&#34;&gt;工作原理&lt;/h2&gt;
&lt;h3 id=&#34;RAM&#34;&gt;RAM&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;随机存取存储器&lt;/strong&gt;（RAM）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1704595506938.png&#34; alt=&#34;1704595506938&#34;&gt;（T是MOS管)&lt;/p&gt;
&lt;p&gt;读出：D 线先预充电到 Vpre=2.5V，然后字选线高电平，T导通&lt;/p&gt;
&lt;p&gt;若电路保存 信息1，Vcs=3.5V，电流方向从单元电路内部向外&lt;/p&gt;
&lt;p&gt;若电路保存信息 0，Vcs=0.0V，电流方向从外向单元电路内部&lt;/p&gt;
&lt;p&gt;写入操作：D 线加高电平（1，3.5V）或低电平（0，0V），字选择线置高电平，T导通；&lt;/p&gt;
&lt;p&gt;写1时，D线高电平，对Cs充电；&lt;/p&gt;
&lt;p&gt;写0时，D线低电平，Cs放电；&lt;/p&gt;
&lt;h3 id=&#34;ROM&#34;&gt;ROM&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;只读存储器&lt;/strong&gt;（ROM）&lt;/p&gt;
&lt;p&gt;PROM&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20240107105109481.png&#34; alt=&#34;image-20240107105109481&#34; style=&#34;zoom:25%;&#34; /&gt;出场时为1，当写入0烧毁熔丝，不可恢复&lt;/p&gt;
&lt;p&gt;紫外线擦除可编程的EPROM、电擦除可编程的EEPROM单元电路可以恢复&lt;/p&gt;
&lt;h2 id=&#34;内部结构&#34;&gt;内部结构&lt;/h2&gt;
&lt;p&gt;芯片容量：2^n * m&lt;/p&gt;
&lt;p&gt;地址线：n位&lt;/p&gt;
&lt;p&gt;数据线：m位&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;&lt;em&gt;这里就是n个字单元，每个字单元m位，很重要&lt;/em&gt;&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1704596437871.png&#34; alt=&#34;1704596437871&#34; style=&#34;zoom:50%;&#34; /&gt;1024×2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二维地址结构&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;4096 × 4，4096×4 = 2^14&lt;/p&gt;
&lt;p&gt;存储：2^7 * （2^5*2^2）；一行4个单元一组为一个字，一行32个字&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1704596831316.png&#34; alt=&#34;1704596831316&#34; style=&#34;zoom: 67%;&#34; /&gt;妙哇&lt;/p&gt;
&lt;h2 id=&#34;存储器扩展&#34;&gt;存储器扩展&lt;/h2&gt;
&lt;h3 id=&#34;位扩展&#34;&gt;位扩展&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1K * 4 扩展为 1K * 8&lt;/strong&gt;：&lt;/p&gt;
&lt;img src=&#34;image-20240107111224018.png&#34; alt=&#34;image-20240107111224018&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;h3 id=&#34;字扩展&#34;&gt;字扩展&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1K * 8 扩展为 4K * 8&lt;/strong&gt;：&lt;/p&gt;
&lt;img src=&#34;image-20240107111347911.png&#34; alt=&#34;image-20240107111347911&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h3 id=&#34;混合扩展&#34;&gt;混合扩展&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20240107111642531.png&#34; alt=&#34;image-20240107111642531&#34; style=&#34;zoom:50%;&#34; /&gt;4Kx4扩展16Kx8&lt;/p&gt;
&lt;h3 id=&#34;ROM、RAM扩展&#34;&gt;ROM、RAM扩展&lt;/h3&gt;
&lt;img src=&#34;1704598394078.png&#34; alt=&#34;1704598394078&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;p&gt;&lt;strong&gt;符号表示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20240107113056551.png&#34; alt=&#34;image-20240107113056551&#34; style=&#34;zoom:33%;&#34; /&gt;符号表示&lt;/p&gt;
&lt;p&gt;读单元地址：Address；读控制信号：MemRead；读出数据：Readdata&lt;/p&gt;
&lt;p&gt;写单元地址：Address；写控制信号：MemWrite；写入数据：Writedata&lt;/p&gt;
&lt;h3 id=&#34;DRAM刷新方式&#34;&gt;DRAM刷新方式&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1704598538571.png&#34; alt=&#34;1704598538571&#34; style=&#34;zoom:50%;&#34; /&gt;D线上加感应放大器&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20240107113613672.png&#34; alt=&#34;image-20240107113613672&#34; style=&#34;zoom: 33%;&#34; /&gt;读1时D线电压&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20240107113638223.png&#34; alt=&#34;image-20240107113638223&#34; style=&#34;zoom:33%;&#34; /&gt;读0时D线电压&lt;/p&gt;
&lt;p&gt;传感放大器会刷新Cs，让Cs保持原来状态而不是被破坏&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分散刷新&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20240107114121678.png&#34; alt=&#34;image-20240107114121678&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;p&gt;一个存储周期分为两段: 前一段用于正常读写，后一段用于刷新操作&lt;/p&gt;
&lt;p&gt;分散刷新间隔 = 刷新行数×存储周期 = 刷新周期&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;集中刷新&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20240107114139422.png&#34; alt=&#34;image-20240107114139422&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;集中刷新间隔 = 刷新周期&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;异步刷新（最常用）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个刷新周期内将存储芯片内的所有行刷新一遍，且只刷新一遍&lt;/p&gt;
&lt;p&gt;以128行为例，在2ms时间内必须轮流对每一行刷新一次，即每隔2ms/128=15.5μs刷新一行。这时假定读/写与刷新操作时间都为0.5μs，则可用前15μs进行正常读/写操作，最后0.5μs完成刷新操作&lt;/p&gt;
&lt;img src=&#34;image-20240107114026887.png&#34; alt=&#34;image-20240107114026887&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;p&gt;异步刷新间隔 = 刷新周期&lt;/p&gt;
&lt;h1&gt;6 高速缓存&lt;/h1&gt;
&lt;p&gt;数据块（block）：Cache与主存的基本划分单位，也是主存与Cache一次交换数据的最小单位，由多个字节（字）组成，取决与主存一次读写操作所能完成的数据字节数。也表明主存于Cache之间局部总线的宽度。&lt;/p&gt;
&lt;p&gt;标记（tag）：Cache每一数据块有一个标记字段，用来保存该数据块对应的主存数据块的地址信息。&lt;/p&gt;
&lt;p&gt;有效位（valid bit）：Cache中每一Block有一个有效位，用于指示相应数据块中是否包含有效数据。&lt;/p&gt;
&lt;p&gt;行（line )：Cache中 一个block及其 tag、valid bit构成1行。&lt;/p&gt;
&lt;p&gt;组（set）：若干块(Block)构成一个组，地址比较一般能在组内各块间同时进行。&lt;/p&gt;
&lt;p&gt;路（way）：Cache相关联的等级，每一路具有独立的地址比较机构，各路地址比较能同时进行（一般与组结合），路数即指一组内的块数。&lt;/p&gt;
&lt;p&gt;命中率（hit rate）：目标数据在Cache中的存储访问的比例。&lt;/p&gt;
&lt;p&gt;缺失率（miss rate）：目标数据不在Cache中的存储访问的比例。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;分S组，每组E行(Block, 数据块)，每数据块包含B个字节&lt;/p&gt;
&lt;p&gt;Cache的容量：N *（ B * 8+tag位+1(valid)）bits&lt;/p&gt;
&lt;h2 id=&#34;映射&#34;&gt;映射&lt;/h2&gt;
&lt;h3 id=&#34;全相联&#34;&gt;全相联&lt;/h3&gt;
&lt;p&gt;主存中的某一Block可以映射到Cache中的任意一Blcok&lt;/p&gt;
&lt;img src=&#34;image-20240107125035390.png&#34; alt=&#34;image-20240107125035390&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;主存地址格式：&lt;/p&gt;
&lt;img src=&#34;image-20240107125050698.png&#34; alt=&#34;image-20240107125050698&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;CPU找Cache中地址时，与所有Tag进行比较&lt;/p&gt;
&lt;p&gt;灵活，成本高&lt;/p&gt;
&lt;h3 id=&#34;直接映射&#34;&gt;直接映射&lt;/h3&gt;
&lt;p&gt;主存中的某一块 J 映射到Cache中的固定块 K， K ＝ J Mod C， 其中C是Cache包含的块数&lt;/p&gt;
&lt;p&gt;相当于&lt;strong&gt;一路组相连&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20240107125655315.png&#34; alt=&#34;image-20240107125655315&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;主存地址格式&lt;/p&gt;
&lt;img src=&#34;image-20240107125720669.png&#34; alt=&#34;image-20240107125720669&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;区内索引数量 = Cache行数&lt;/p&gt;
&lt;p&gt;Cache如果有16行 = Index有4位&lt;/p&gt;
&lt;p&gt;区数量为主存行数/一个区内数量&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例：主存容量1M字节，Cache容量4k字节，Block大小256 Bytes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cache: 2^12 ÷ 2^8 = 2^4 Blocks，Index应该为4位&lt;/p&gt;
&lt;p&gt;主存: 2^12 Blocks，每个区2^4Blocks , 分成2^8个区&lt;/p&gt;
&lt;p&gt;主存地址：20位，其中高 8 位区地址，中间4位为区内块地址，低8位为块内地址。&lt;/p&gt;
&lt;h3 id=&#34;组相联&#34;&gt;组相联&lt;/h3&gt;
&lt;p&gt;主存和Cache 都分成 K 组，其中Cache每组包含 L 块数据（Nc= K * L），主存每组包含M块数据；主存的块 J 以下列原则映射到 Cache 的组 I 中的任何一块（Nm= K * M） 。             I =  J  mod K  （0 ≤ I ≤ K）&lt;/p&gt;
&lt;img src=&#34;image-20240107133841909.png&#34; alt=&#34;image-20240107133841909&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;主存地址格式&lt;/p&gt;
&lt;img src=&#34;image-20240107133833645.png&#34; alt=&#34;image-20240107133833645&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;Cache：valid，Tag，Data&lt;/p&gt;
&lt;p&gt;在组相连中，如果只有一组，则变成了全相联了。&lt;/p&gt;
&lt;p&gt;如果组相联中每组只有一个数据块，则组相联就变成直接相联了。&lt;/p&gt;
&lt;h2 id=&#34;替换策略&#34;&gt;替换策略&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;缺失处理方式&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20240107140809736.png&#34; alt=&#34;image-20240107140809736&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h3 id=&#34;替换方式&#34;&gt;替换方式&lt;/h3&gt;
&lt;p&gt;FIFO：最先装入数据的块被替换&lt;/p&gt;
&lt;p&gt;LRU：最近最少使用法&lt;/p&gt;
&lt;p&gt;访问命中时，所有块的计数值与命中块的计数值进行比较：如果某块计数值小于命中块的计数值， 则该块的计数值加 1；如果该块的计数值大于命中块的计数值，则数值不变。最后将命中块的计数器清为0。&lt;/p&gt;
&lt;p&gt;访问未命中，需要替换时，则选择计数值最大的块被替换（若最大值并列，随机选择一个）。被替换块的计数器清0，而其它的计数器则加1&lt;/p&gt;
&lt;h2 id=&#34;性能分析&#34;&gt;性能分析&lt;/h2&gt;
&lt;p&gt;一般情况增加路数提高命中率，降低时间；&lt;/p&gt;
&lt;p&gt;随着块大小增加，缺失率先降低后增加；&lt;/p&gt;
&lt;p&gt;Cache所需总存储容量=（tag位+有效位+（可能的脏位）+1个数据块容量）* 块数&lt;/p&gt;
&lt;p&gt;命中率 * Cache访问时间+（1-命中率）* （装入Cache+Cache访问时间）&lt;/p&gt;
&lt;p&gt;写回（Write Back）：写操作只更新Cache中的数据，直到Block替换时才将整个Block写回主存，一般使用“脏位”（dirty bit）来表示Block在替换回主存之前是否被修改过；&lt;/p&gt;
&lt;h2 id=&#34;要点？&#34;&gt;要点？&lt;/h2&gt;
&lt;p&gt;内存地址格式：  组内块地址(多少b) + 组地址(多少b) + 块内偏移地址(多少b)1&lt;/p&gt;
&lt;h1&gt;7 虚拟存储&lt;/h1&gt;
&lt;p&gt;把主存当做辅助存储器的高速缓存技术，称为虚拟存储技术，程序中可以使用较大的存储空间称为虚拟存储器&lt;/p&gt;
&lt;p&gt;固定长（简单）分区，浪费空间&lt;/p&gt;
&lt;p&gt;可变长分区，开始好，后面会产生空块&lt;/p&gt;
&lt;h2 id=&#34;页式虚拟存储器&#34;&gt;页式虚拟存储器&lt;/h2&gt;
&lt;p&gt;内存分成定长小块（页），进程也分成定长小块。&lt;/p&gt;
&lt;p&gt;虚存页称为虚页，主存页称为实页&lt;/p&gt;
&lt;p&gt;一个进程用很多小块，可以不连续&lt;/p&gt;
&lt;p&gt;操作系统为进程生成页表&lt;/p&gt;
&lt;p&gt;通过页表实现逻辑地址向物理地址的转换。&lt;/p&gt;
&lt;p&gt;页表基址寄存器：保存页表在内存中的首地址&lt;/p&gt;
&lt;h3 id=&#34;虚实地址的转换&#34;&gt;虚实地址的转换&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;根据虚地址，访问主存中的页表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据实地址，访问主存中的物理页&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;image-20240107151029798.png&#34; alt=&#34;image-20240107151029798&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;img src=&#34;image-20240107151913428.png&#34; alt=&#34;image-20240107151913428&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h2 id=&#34;多级页表&#34;&gt;多级页表&lt;/h2&gt;
&lt;p&gt;二级页表页面大小为4KB的2GB虚拟存储器，每个页表项占4个字节：2^19 * 2^2=2MB&lt;/p&gt;
&lt;p&gt;一级页表2^9项（每项占4个字节），二级页表2^10项（每项占4个字节），整个一级页表常驻内存，常用的两个活跃二级页表装载到内存：  512 * 4+2 * 1K * 4 = 10KB （假定2个活跃页表换入内存时，实际占用的内存）&lt;/p&gt;
&lt;img src=&#34;image-20240107151055751.png&#34; alt=&#34;image-20240107151055751&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h2 id=&#34;例题&#34;&gt;例题&lt;/h2&gt;
&lt;img src=&#34;1704611716703.png&#34; alt=&#34;1704611716703&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;h2 id=&#34;快表TLB&#34;&gt;快表TLB&lt;/h2&gt;
&lt;p&gt;使用Cache存储部分活跃的页表项，称为TLB（快表），它包含了最近使用的那些页表项。&lt;/p&gt;
&lt;p&gt;TLB内容：标记（虚页号）、数据块（实页号）、有效位、修改位。&lt;/p&gt;
&lt;p&gt;TLB一般采用全相联或者组相联&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20240107151819430.png&#34; alt=&#34;image-20240107151819430&#34;&gt;&lt;/p&gt;
&lt;img src=&#34;image-20240107152739212.png&#34; alt=&#34;image-20240107152739212&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;&lt;img src=&#34;image-20240107153422198.png&#34; alt=&#34;image-20240107153422198&#34; style=&#34;zoom:50%;&#34; /&gt;TLB命中与否 与Cache是否命中 &lt;strong&gt;无关&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;1704613616027.png&#34; alt=&#34;1704613616027&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h1&gt;8 链接&lt;/h1&gt;
&lt;h2 id=&#34;目标文件的三种格式&#34;&gt;目标文件的三种格式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可重定位目标文件（relocatable object file:  .o ）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;包含二进制代码和数据&lt;/p&gt;
&lt;p&gt;其形式可以在编译时与其他可重定位目标文件合并起来，创建一个可执行目标文件&lt;/p&gt;
&lt;p&gt;每一个 .c 源文件产生一个对应的 .o 文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可执行目标文件（executable object file）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以没有扩展名（Linux）或者 a.out ;    .exe(Windows)&lt;/p&gt;
&lt;p&gt;包含二进制代码和数据&lt;/p&gt;
&lt;p&gt;其形式可以被直接复制到内存并执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;共享目标文件（shared object file）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一种特殊类型的可重定位目标文件&lt;/p&gt;
&lt;p&gt;可以在加载或者运行时被动态地加载进内存并链接&lt;/p&gt;
&lt;p&gt;windows：.lib (静态链接库)  .dll （动态链接库）；Linux：.a(静态链接) .so(动态链接)&lt;/p&gt;
&lt;h2 id=&#34;Elf格式&#34;&gt;Elf格式&lt;/h2&gt;
&lt;p&gt;.text: 已编译程序的机器代码（Code）&lt;/p&gt;
&lt;p&gt;.rodata: 只读数据&lt;/p&gt;
&lt;p&gt;.data: 已初始化的全局和静态 C 变量&lt;/p&gt;
&lt;p&gt;.bss:  Block Started by Symbol&lt;/p&gt;
&lt;p&gt;.symtab:   符号表&lt;/p&gt;
&lt;p&gt;.rel.text:  .text 节的重定位信息&lt;/p&gt;
&lt;p&gt;.rel.data（.rel.data.rel）:   .data节的重定位信息&lt;/p&gt;
&lt;h2 id=&#34;链接器符号&#34;&gt;链接器符号&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全局符号&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由模块 m 定义并能被其他模块引用的符号：非静态的 C 函数和全局变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;外部符号&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由其他模块定义并被模块 m 引用的全局符号：在其他模块中定义的非静态 C 函数和全局变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;局部符号&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只被模块 m 定义和引用的符号：带 static 属性的 C 函数和全局变量&lt;/p&gt;
&lt;p&gt;**局部链接器符号和局部变量不同 **连接器不知道局部变量&lt;/p&gt;
&lt;p&gt;局部非静态C变量：保存在栈上或寄存器中&lt;/p&gt;
&lt;p&gt;局部静态C变量：保存在 .data 或 .bss&lt;/p&gt;
&lt;h2 id=&#34;符号解析&#34;&gt;符号解析&lt;/h2&gt;
&lt;h3 id=&#34;局部符号&#34;&gt;局部符号&lt;/h3&gt;
&lt;p&gt;在相同模块中定义和引用&lt;/p&gt;
&lt;p&gt;编译器只允许每个模块中每个局部符号有一个定义&lt;/p&gt;
&lt;p&gt;其解析简单明了&lt;/p&gt;
&lt;h3 id=&#34;全局符号&#34;&gt;全局符号&lt;/h3&gt;
&lt;p&gt;符号在当前模块中无定义：编译器会假设该符号是在其他某个模块中定义的，生成一个链接器符号表条目，并把它交给链接器处理&lt;/p&gt;
&lt;p&gt;如果链接器在它的任何输入模块中都找不到这个被引用符号的定义：输出一条错误信息并终止&lt;/p&gt;
&lt;p&gt;还有一种情况：多个目标文件可能会定义相同名字的全局符号&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全局符号分为强符号和弱符号&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;强符号：函数和已初始化的全局变量&lt;/p&gt;
&lt;p&gt;弱符号：未初始化的全局变量和外部符号&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不允许有多个同名的强符号：每个强符号只能定义一次，否则链接错误&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果有一个强符号和多个弱符号同名，那么选择强符号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果有多个弱符号同名，那么从这些弱符号中任意选择一个&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;静态库&#34;&gt;静态库&lt;/h2&gt;
&lt;p&gt;ar rcs name.a name1.o name2.o ：创建静态库&lt;/p&gt;
&lt;p&gt;gcc -static -o test test.o ./name.a ：链接静态库&lt;/p&gt;
&lt;img src=&#34;1704617901075.png&#34; alt=&#34;1704617901075&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;img src=&#34;1704617936261.png&#34; alt=&#34;1704617936261&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h2 id=&#34;链接去年好像没考😅&#34;&gt;链接去年好像没考😅&lt;/h2&gt;
&lt;h1&gt;9 总线和IO&lt;/h1&gt;
&lt;h2 id=&#34;总线仲裁&#34;&gt;总线仲裁&lt;/h2&gt;
&lt;h3 id=&#34;链式查询方式&#34;&gt;链式查询方式&lt;/h3&gt;
&lt;p&gt;总线控制器（仲裁器）收到总线申请BR，BG（总线同意信号）逐个往下传；&lt;/p&gt;
&lt;p&gt;到某接口有总线申请（BR：总线申请信号），BG停止往下传；&lt;/p&gt;
&lt;p&gt;该接口获得总线使用权，并建立总线忙信号BS。&lt;/p&gt;
&lt;h3 id=&#34;计数器定时查询方式&#34;&gt;计数器定时查询方式&lt;/h3&gt;
&lt;p&gt;总线控制器（仲裁器）收到总线申请BR，仲裁器上的计数器开始计数；&lt;/p&gt;
&lt;p&gt;当某个有总线申请的设备地址与计数器一致，便获得总线使用权，并建立总线忙信号BS&lt;/p&gt;
&lt;h3 id=&#34;独立请求方式&#34;&gt;独立请求方式&lt;/h3&gt;
&lt;p&gt;每个设备有独立的请求信号和总线同意信号；&lt;/p&gt;
&lt;p&gt;总线控制器根据设备的优先级决定将总线的使用权交给哪个设备。&lt;/p&gt;
&lt;h2 id=&#34;IO&#34;&gt;IO&lt;/h2&gt;
&lt;p&gt;I/O地址（I/O接口地址, I/O端口地址）：实际上是I/O接口电路中寄存器的地址（外设寄存器）&lt;/p&gt;
&lt;p&gt;？？&lt;/p&gt;
&lt;h2 id=&#34;程序查询IO&#34;&gt;程序查询IO&lt;/h2&gt;
&lt;p&gt;编程式I/O&lt;/p&gt;
&lt;p&gt;控制命令：激活外设完成动作。如指示磁带机快进或快退，控制命令与设备类型相关；&lt;/p&gt;
&lt;p&gt;测试命令：测试与I/O接口及其外部设备的各种状态条件；&lt;/p&gt;
&lt;p&gt;读命令：使I/O接口从外设获得一个数据项，存入内部缓冲区；&lt;/p&gt;
&lt;p&gt;写命令：使I/O接口从数据总线获得一个数据项，然后传送到外设。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I/O操作由CPU直接完成（通过执行I/O指令完成）&lt;/li&gt;
&lt;li&gt;外设速度慢，CPU速度快，在外设准备过程中，CPU处在不断的查询之中，CPU的效率浪费严重&lt;/li&gt;
&lt;li&gt;外设与CPU完全串行工作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;中断IO&#34;&gt;中断IO&lt;/h2&gt;
&lt;p&gt;顾名思义&lt;/p&gt;
&lt;h2 id=&#34;DMA&#34;&gt;DMA&lt;/h2&gt;
&lt;p&gt;DMA控制器接到DMA应答信号后，通过控制逻辑向系统总线发送存储器地址信号、存储器读写控制信号、I/O接口读写控制信号等，完成一次数据传送。&lt;/p&gt;
&lt;p&gt;若是单字传输，一般仅需要一个总线周期，所以这种方式称为周期窃取（cycle-stealing，或者叫周期挪用）方式。若是成组传输，需要多个总线周期来完成。所有数据传送结束后，通过中断方式告知CPU进行善后处理。&lt;/p&gt;
&lt;p&gt;CPU仅在开始DMA操作之前和完成DMA操作之后参与I/O处理，在DMA过程中，CPU可以运行原来的程序&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止CPU访问内存（成组传送方式）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一次DMA请求得到响应后，DMA控制器完全占用总线，进行块数据（多字）传送，直到所有数据传送完毕才释放总线，这段时间完全停止CPU访问内存。&lt;/p&gt;
&lt;p&gt;适应高速外设与存储器交换数据的情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;周期窃取方式（单字传送方式，DMA和CPU交替使用总线）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每次DMA请求得到响应后，DMA控制器窃取一个总线周期完成一次数据传送，然后释放总线，CPU接着使用一个总线周期，然后DMA再窃取一个周期，这样持续循环下去，直到数据传输结束。&lt;/p&gt;
&lt;p&gt;一般情况下，CPU 不访问存储器时释放总线&lt;/p&gt;
&lt;p&gt;一般适应存储器速度远高于I/O设备速度的情况。&lt;/p&gt;
</content>
        <category term="大学" />
        <category term="总结" />
        <category term="计组" />
        <updated>2024-01-08T10:16:31.000Z</updated>
    </entry>
</feed>
