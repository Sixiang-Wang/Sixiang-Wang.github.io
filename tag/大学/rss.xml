<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>机煲的小窝 • Posts by &#34;大学&#34; tag</title>
        <link>https://blog.unfinished.top</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Fri, 03 Jan 2025 09:57:49 +0000</pubDate>
        <lastBuildDate>Fri, 03 Jan 2025 09:57:49 +0000</lastBuildDate>
        <category>大学</category>
        <category>总结</category>
        <category>编译</category>
        <category>Java</category>
        <category>Hexo</category>
        <category>格式</category>
        <category>测试</category>
        <category>考研</category>
        <category>高等数学</category>
        <category>编译原理</category>
        <category>操作系统</category>
        <category>数字电路</category>
        <category>计组</category>
        <category>计网</category>
        <item>
            <guid isPermalink="true">https://blog.unfinished.top/2025/01/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/</guid>
            <title>计算机网络复习</title>
            <link>https://blog.unfinished.top/2025/01/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/</link>
            <category>大学</category>
            <category>总结</category>
            <category>计网</category>
            <pubDate>Fri, 03 Jan 2025 09:57:49 +0000</pubDate>
            <description><![CDATA[ &lt;img src=&#34;我要成为高手.png&#34; alt=&#34;我要成为高手&#34;  /&gt; 
&lt;h1&gt;计算机网络概述&lt;/h1&gt;
&lt;h3 id=&#34;层次划分&#34;&gt;层次划分&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;OSI参考模型&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;应用层&lt;/td&gt;
&lt;td&gt;为用户或应用程序服务的接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;表示层&lt;/td&gt;
&lt;td&gt;负责数据的表示、翻译和格式化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;会话层&lt;/td&gt;
&lt;td&gt;会话和对话控制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;传输层&lt;/td&gt;
&lt;td&gt;端到端的可靠数据传输服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网络层&lt;/td&gt;
&lt;td&gt;解决异构网络的问题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据链路层&lt;/td&gt;
&lt;td&gt;解决可靠性、解决共享信道&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;物理层&lt;/td&gt;
&lt;td&gt;解决比特流在信道上传输的可行性&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;TCP/IP概念层次&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;应用层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;传输层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网际层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网络接口&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;传输层：数据段&lt;/p&gt;
&lt;p&gt;网络层：分组&lt;/p&gt;
&lt;p&gt;数据链路层：数据帧&lt;/p&gt;
&lt;p&gt;物理层：比特&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!TIP]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;玛德莫名其妙&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因特网采用TCP/IP体系结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;协议&#34;&gt;协议&lt;/h3&gt;
&lt;p&gt;网络协议的三要素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语法：数据或控制信息的数据结构&lt;/li&gt;
&lt;li&gt;语义：协议元素的含义&lt;/li&gt;
&lt;li&gt;时序：信息的&lt;strong&gt;每一个单元或事件的传送或执行顺序&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;性能指标&#34;&gt;性能指标&lt;/h3&gt;
&lt;p&gt;速率：b/s bps&lt;/p&gt;
&lt;p&gt;带宽：单位Hz，和bps本质一样&lt;/p&gt;
&lt;p&gt;吞吐量：单位时间通过网络的实际数据量&lt;/p&gt;
&lt;p&gt;信道利用率：有数据通过时间/总时间&lt;/p&gt;
&lt;h1&gt;物理层&lt;/h1&gt;
&lt;h3 id=&#34;基本概念&#34;&gt;基本概念&lt;/h3&gt;
&lt;p&gt;信道：向某个方向传输信息的媒体&lt;/p&gt;
&lt;p&gt;信号：数据的电气或电磁表现&lt;/p&gt;
&lt;p&gt;码元：时间轴上的一个信号编码单元&lt;/p&gt;
&lt;p&gt;波特：码元传输速率单位&lt;/p&gt;
&lt;p&gt;比特率：数据传输速率&lt;/p&gt;
&lt;h3 id=&#34;编码方式&#34;&gt;编码方式&lt;/h3&gt;
&lt;img src=&#34;image-20241228202933127.png&#34; alt=&#34;image-20241228202933127&#34; style=&#34;zoom: 67%;&#34; /&gt; 
&lt;p&gt;曼彻斯特：先低后高为0，先高后低为1&lt;/p&gt;
&lt;p&gt;差分曼彻斯特：前半个码元电平与前一个码元后半个相同为1，反之为0。（保持为1，取反为0）&lt;/p&gt;
&lt;h3 id=&#34;尼奎斯特和香农公式&#34;&gt;尼奎斯特和香农公式&lt;/h3&gt;
&lt;p&gt;尼奎斯特：理想低通信道，无噪声&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mtext&gt;传输率&lt;/mtext&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mtext&gt;带宽&lt;/mtext&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mtext&gt;信号电平级数&lt;/mtext&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mtext&gt;是码元最高传输速率&lt;/mtext&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mtext&gt;是码元能代表几种数据&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;C = 2Wlog_2M\\
C:传输率 b/s\\
W:带宽Hz\\
M:信号电平级数\\
2W是码元最高传输速率
M是码元能代表几种数据
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;传&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;输&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;率&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;带&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;宽&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.08125em;&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;信&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;号&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;电&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;平&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;级&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;是&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;码&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;元&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;最&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;高&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;传&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;输&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;速&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;率&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;是&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;码&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;元&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;能&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;代&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;表&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;几&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;种&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;香农公式：非理想信道计算&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mfrac&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mfrac&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mtext&gt;传输率，&lt;/mtext&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mtext&gt;带宽，&lt;/mtext&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mfrac&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mtext&gt;信噪比，&lt;/mtext&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mfrac&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mfrac&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;msup&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mrow&gt;&lt;mfrac&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mfrac&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mtext&gt;若带宽&lt;/mtext&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mi&gt;K&lt;/mi&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mtext&gt;，信噪比&lt;/mtext&gt;&lt;mn&gt;30&lt;/mn&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;3000&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;msup&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msup&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;30000&lt;/mn&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;C=Wlog_2(1+\frac{S}{N})\\
C:传输率，b/s\\
W:带宽，Hz\\
\frac{S}{N_db}:信噪比，dB\\
\frac{S}{N}=10^{\frac{S}{N_{db}}/10}\\
若带宽W=3KHz，信噪比30dB
C=3000*log_2(1+10^3)=30000b/s
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.04633em;vertical-align:-0.686em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.36033em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;传&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;输&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;率&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;带&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;宽&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.08125em;&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.19633em;vertical-align:-0.8360000000000001em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.36033em;&#34;&gt;&lt;span style=&#34;top:-2.3139999999999996em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8360000000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;信&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;噪&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;比&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.04633em;vertical-align:-0.686em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.36033em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.1338350000000001em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.1338350000000001em;&#34;&gt;&lt;span style=&#34;top:-3.5233700000000003em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mopen nulldelimiter sizing reset-size3 size6&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8720928571428572em;&#34;&gt;&lt;span style=&#34;top:-2.656em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size3 size1 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3448em;&#34;&gt;&lt;span style=&#34;top:-2.3448em;margin-left:-0.10903em;margin-right:0.1em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.69444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.34963999999999995em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.2255000000000003em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line mtight&#34; style=&#34;border-bottom-width:0.049em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.384em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size3 size1 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.5937428571428571em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter sizing reset-size3 size6&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;若&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;带&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;宽&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.08125em;&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;信&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;噪&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;比&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.1141079999999999em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8641079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;数据链路层&lt;/h1&gt;
&lt;p&gt;如何在有差错的线路上，进行无差错传输&lt;/p&gt;
&lt;p&gt;组帧，以7E开头（01111110）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本功能：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链路管理：数据链路的建立、维护和释放&lt;/li&gt;
&lt;li&gt;定界与同步：能够从接受到的比特流当中准确的区分出一帧的开始和结束&lt;/li&gt;
&lt;li&gt;差错控制：纠错和差错检测&lt;/li&gt;
&lt;li&gt;流量控制：调节通讯双方通讯速度&lt;/li&gt;
&lt;li&gt;寻址：确保每一帧能够到达正确的目的端&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;差错检测和纠正&#34;&gt;差错检测和纠正&lt;/h2&gt;
&lt;h3 id=&#34;奇偶校验&#34;&gt;奇偶校验&lt;/h3&gt;
&lt;p&gt;原始数据最后增加一个比特位，让结果中1的个数为奇数（奇校验）或者偶数（偶校验）&lt;/p&gt;
&lt;p&gt;原始数据11010采用偶校验 👉新数据为110101&lt;/p&gt;
&lt;h3 id=&#34;循环冗余校验（CRC）&#34;&gt;循环冗余校验（CRC）&lt;/h3&gt;
&lt;p&gt;约定一个多项式G(x)假设为x^4+x+1，即10011&lt;/p&gt;
&lt;p&gt;在带校验数据后补上4个0（因为Gx最高阶为4）&lt;/p&gt;
&lt;p&gt;带校验数据1101011011→11010110110000&lt;/p&gt;
&lt;p&gt;用&lt;strong&gt;模2除法&lt;/strong&gt;把带校验数据除以G（x）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!WARNING]&lt;/p&gt;
&lt;p&gt;&lt;u&gt;&lt;em&gt;&lt;strong&gt;不是除法！&lt;/strong&gt;&lt;/em&gt;&lt;/u&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;image-20241229143856682.png&#34; alt=&#34;image-20241229143856682&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后结果为1101,0110,1111,10&lt;/p&gt;
&lt;h2 id=&#34;数据链路层协议&#34;&gt;数据链路层协议&lt;/h2&gt;
&lt;p&gt;假设没有出错可以使用：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;具有最简单流量控制的协议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;发送方：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;取数据帧&lt;/li&gt;
&lt;li&gt;送到数据链路层发送缓存&lt;/li&gt;
&lt;li&gt;发送&lt;/li&gt;
&lt;li&gt;等待&lt;/li&gt;
&lt;li&gt;接受到接收节点的确认信息，转到1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接收方&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;等待&lt;/li&gt;
&lt;li&gt;收到数据帧，存到缓存&lt;/li&gt;
&lt;li&gt;缓存上交到主机&lt;/li&gt;
&lt;li&gt;发送确认信息到发送方&lt;/li&gt;
&lt;li&gt;转到1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;image-20241229144818995.png&#34; alt=&#34;image-20241229144818995&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;停止等待协议&#34;&gt;停止等待协议&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20241229144955608.png&#34; alt=&#34;image-20241229144955608&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个比特可表示&lt;/strong&gt; &lt;strong&gt;0&lt;/strong&gt; &lt;strong&gt;和&lt;/strong&gt; &lt;strong&gt;1&lt;/strong&gt; &lt;strong&gt;两种不同的序号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;确认帧带有序号，ACKn表示n-1号帧已经收到，&lt;strong&gt;期望接收&lt;/strong&gt;第 n号帧&lt;/p&gt;
&lt;p&gt;ACK1表示收到0号帧；ACK0表示收到1号帧&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发送方&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20241229152149769.png&#34; alt=&#34;image-20241229152149769&#34; style=&#34;zoom: 45%;&#34; /&gt; 
&lt;p&gt;&lt;strong&gt;接收方&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20241229152209500.png&#34; alt=&#34;image-20241229152209500&#34; style=&#34;zoom:45%;&#34; /&gt;  
&lt;p&gt;&lt;strong&gt;停止等待协议流图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20241229152854873.png&#34; alt=&#34;image-20241229152854873&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mtext&gt;：往返时延&lt;/mtext&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;/msub&gt;&lt;mtext&gt;：分组的发送时延&lt;/mtext&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/msub&gt;&lt;mtext&gt;：确认的发送时延&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;RTT：往返时延\\
T_D：分组的发送时延\\
T_A：确认的发送时延
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;往&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;返&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;延&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;分&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;组&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;发&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;送&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;延&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;确&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;认&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;发&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;送&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;延&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;连续ARQ：后退N帧协议GBN&#34;&gt;连续ARQ：后退N帧协议GBN&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20241229161544583.png&#34; alt=&#34;image-20241229161544583&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接收端只按序接收数据帧&lt;/strong&gt;：收到出错的DATA2后，虽然收到了Data3-5但是要丢弃，并且重传ACK2（因为DATA2出错，希望得到DATA2）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发送端计时器超时重传&lt;/strong&gt;：等不到ACK3，超时后从DATA2开始全部重传&lt;/p&gt;
&lt;h3 id=&#34;选择重传协议&#34;&gt;选择重传协议&lt;/h3&gt;
&lt;p&gt;接收端的滑动窗口大于1，&lt;/p&gt;
&lt;p&gt;发送端超时没有收到ACK(n)  就重发 Data(n)，&lt;strong&gt;不会全部重发&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;滑动窗口&#34;&gt;滑动窗口&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;连续&lt;/strong&gt; &lt;strong&gt;ARQ&lt;/strong&gt;协议中，&lt;strong&gt;接收窗口&lt;/strong&gt;大小为1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;只有当收到的帧的序号与接收窗口一致时才能接收该帧&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;收到一个序号正确的帧，&lt;strong&gt;接收窗口就向前滑动&lt;/strong&gt;，同时发送ACK&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接收窗口向前滑动→发送确认→发送窗口可能向前滑动&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当用&lt;/strong&gt; &lt;strong&gt;n&lt;/strong&gt; &lt;strong&gt;个比特进行编号&lt;/strong&gt;：滑动窗口最大  &lt;u&gt;2^n &lt;strong&gt;- 1&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;发送窗口&lt;/th&gt;
&lt;th&gt;接收窗口&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;停止等待协议&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;连续ARQ（后退N帧协议）&lt;/td&gt;
&lt;td&gt;&amp;gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;选择重传协议&lt;/td&gt;
&lt;td&gt;&amp;gt;1&lt;/td&gt;
&lt;td&gt;&amp;gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;信道利用率&#34;&gt;信道利用率&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;T（发送周期）：从开始发送数据到收到第一个确认帧为止&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mtext&gt;信道利用率&lt;/mtext&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;/mfrac&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/mfrac&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mfrac&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;/mfrac&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mtext&gt;发送数据所用时长&lt;/mtext&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mtext&gt;时间内发送的数据数量&lt;/mtext&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mtext&gt;发送传输率&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;信道利用率=\frac{L}{C}\times\frac{1}{T}\\
\frac{L}{C}:发送数据所用时长\\
L:T时间内发送的数据数量\\
C:发送传输率
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;信&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;道&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;利&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;用&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;率&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.04633em;vertical-align:-0.686em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.36033em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.00744em;vertical-align:-0.686em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.32144em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.04633em;vertical-align:-0.686em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.36033em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;发&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;送&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;据&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;所&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;用&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;长&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;间&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;内&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;发&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;送&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;据&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;量&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;发&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;送&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;传&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;输&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;率&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;HDLC和PPP&#34;&gt;HDLC和PPP&lt;/h3&gt;
&lt;p&gt;主站：&lt;strong&gt;负责控制整个链路的操作&lt;/strong&gt;，&lt;strong&gt;由主站发出的帧为命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从站：&lt;strong&gt;在主站的控制下进行操作&lt;/strong&gt;，&lt;strong&gt;由从站发出的帧为响应&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;链路结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非平衡：一个主站多个从站&lt;/p&gt;
&lt;p&gt;平衡：两个组合站&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HDLC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;真的。。。会考？吗？&lt;/p&gt;
&lt;p&gt;考研不考。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20241229192411603.png&#34; alt=&#34;image-20241229192411603&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PPP：点对点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不是总线型，不适用CSMA/CD&lt;/p&gt;
&lt;p&gt;用于&lt;strong&gt;广域网&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20241229192309151.png&#34; alt=&#34;image-20241229192309151&#34;&gt;&lt;/p&gt;
&lt;p&gt;异步传输采用转义法，填入转义字符0x7D&lt;/p&gt;
&lt;p&gt;同步传输采用零比特填充法，连续5个1后填入1个0&lt;/p&gt;
&lt;h2 id=&#34;局域网的数据链路层&#34;&gt;局域网的数据链路层&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;信道共享技术&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;随缘看看？&lt;/p&gt;
&lt;p&gt;静态划分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;频分复用：不同频率上传输&lt;/li&gt;
&lt;li&gt;时分复用：带宽一样，变成多个时间片依次发送&lt;/li&gt;
&lt;li&gt;波分复用：&lt;strong&gt;光&lt;/strong&gt;的频分复用&lt;/li&gt;
&lt;li&gt;码分复用：每个端都有个自己的码，互相正交。发1则把码发出去，发0则发取反码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;动态媒体介入控制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机接入：ALOHA（接收方判断冲突，发送方超时重传）、CSMA&lt;/li&gt;
&lt;li&gt;轮询：&lt;strong&gt;令牌环网传递令牌，有空令牌的才发，收到令牌看是不是给自己的，不是接着传，是的话复制一份接着传，转一圈发现没出错就变成空令牌&lt;/strong&gt;（负载严重时能较好的工作）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;CSMA-CD&#34;&gt;CSMA/CD&lt;/h3&gt;
&lt;h4 id=&#34;CMSA&#34;&gt;CMSA&lt;/h4&gt;
&lt;p&gt;CS：载波监听，发送前会先检测总线上是否有人发数据&lt;/p&gt;
&lt;p&gt;MA：多点接入，多个计算机接在一个总线&lt;/p&gt;
&lt;p&gt;1-坚持CSMA：空闲就发，忙则一直监听，冲突则等待一个随机时间再监听&lt;/p&gt;
&lt;p&gt;非坚持CSMA：空闲就发，忙则等待一个随机时间再监听&lt;/p&gt;
&lt;p&gt;p-坚持CSMA：空闲则以p概率发，1-p概率等下一个时间单位再发；忙则一直监听；冲突则等待一个时间单位再监听&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!NOTE]&lt;/p&gt;
&lt;p&gt;这是重点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;CD&#34;&gt;CD&lt;/h4&gt;
&lt;p&gt;CD：碰撞检测&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20241229202154923.png&#34; alt=&#34;image-20241229202154923&#34;&gt;&lt;/p&gt;
&lt;p&gt;为了检测冲突，最小帧长为 2 * Prop * 传输速率（确保传完之前能检测到碰撞）&lt;/p&gt;
&lt;p&gt;Prop = 线路长度/电磁波在传播速度&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2Prop&lt;/strong&gt;为争用期，也称碰撞窗口&lt;/p&gt;
&lt;p&gt;以太网取51.2μs为争用期，对于10Mb/s的以太网，成勇气可以发送512bit也就是64字节。若前64字节没有冲突，那么后续也不会冲突。&lt;/p&gt;
&lt;p&gt;以太网取64字节为最短有效帧长&lt;/p&gt;
&lt;p&gt;发生碰撞后，推迟一段时间才能发送，基本退避时间一般取争用期2T&lt;/p&gt;
&lt;p&gt;k = min[重传次数, 10]，从[0,2^k   -1]随机取一个r，重传等待的时间为&lt;strong&gt;r倍的2T&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当重传达到16次还是不成功，说明网络拥挤，直接抛弃此帧报告出错。&lt;/p&gt;
&lt;h3 id=&#34;MAC地址&#34;&gt;MAC地址&lt;/h3&gt;
&lt;p&gt;48位Mac地址，每一台主机都有独立标识符，通常是12个十六进制数来表示&lt;/p&gt;
&lt;p&gt;mac地址举例（01:23:45:67:89:AB）&lt;/p&gt;
&lt;p&gt;目的地址和源地址都是6字节（48位）&lt;/p&gt;
&lt;p&gt;类型指明&lt;strong&gt;网络层&lt;/strong&gt;使用的协议，因为&lt;strong&gt;64字节为最短有效帧长&lt;/strong&gt;（上面说了），所以数据段最短为&lt;strong&gt;46字节&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FCS：采用CRC校验&lt;/p&gt;
&lt;img src=&#34;image-20241229220712926.png&#34; alt=&#34;image-20241229220712926&#34; style=&#34;zoom:100%;&#34; /&gt; 
&lt;p&gt;为什么没有结束的“后导”码：采用曼彻斯特编码，发送的时候1为前高后低，0为前低后高；发完了直接就没信号了，电平不变&lt;/p&gt;
&lt;h3 id=&#34;局域网和VLAN&#34;&gt;局域网和VLAN&lt;/h3&gt;
&lt;p&gt;VLAN是虚拟局域网&lt;/p&gt;
&lt;p&gt;创建VLAN后交换机转发表形如：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;MAC地址&lt;/th&gt;
&lt;th&gt;端口&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A的地址&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B的地址&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C的地址&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;VLAN ID&lt;/th&gt;
&lt;th&gt;端口&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;交换机之间建立VLAN发送数据会在数据帧插入VLAN标记&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20241230141150645.png&#34; alt=&#34;image-20241230141150645&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;网桥&#34;&gt;网桥&lt;/h4&gt;
&lt;p&gt;网桥会通过数据 学习 不同地址对应的接口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20241230143307475.png&#34; alt=&#34;image-20241230143307475&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用网桥能够隔开各个网段的碰撞域&lt;/li&gt;
&lt;li&gt;扩大物理范围&lt;/li&gt;
&lt;li&gt;提高可靠性&lt;/li&gt;
&lt;li&gt;过滤通信量，增大吞吐量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是只能用于用户不太多的局域网，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;广播信息过多会产生广播风暴&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;其他概念&#34;&gt;其他概念&lt;/h4&gt;
&lt;p&gt;交换机：学习、转发、过滤&lt;/p&gt;
&lt;p&gt;冲突域：任意时刻，&lt;strong&gt;一个碰撞域中，只能有一个站在发送数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;广播域：&lt;strong&gt;同一广播包能到达的所有设备集合&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;交换机和路由器&#34;&gt;交换机和路由器&lt;/h3&gt;
&lt;p&gt;交换机能划分冲突域，&lt;strong&gt;不划分广播域&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;路由器可以划分广播域&lt;/p&gt;
&lt;h1&gt;网络层&lt;/h1&gt;
&lt;p&gt;网络层功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路由选择和分组转发，找到最佳路径&lt;/li&gt;
&lt;li&gt;异构网络的互联&lt;/li&gt;
&lt;li&gt;拥塞控制&lt;/li&gt;
&lt;li&gt;尽最大可能交付&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不可靠传输！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;image-20241230173853910.png&#34; alt=&#34;image-20241230173853910&#34; style=&#34;zoom:80%;&#34; /&gt; 
&lt;p&gt;&lt;strong&gt;因特网采用数据报形式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么要有IP地址和MAC地址两种地址：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IP 地址&lt;/strong&gt;解决了设备在大规模网络中的定位和路由问题，适用于网络间通信。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MAC 地址&lt;/strong&gt;解决了局域网中设备的物理标识和直接通信问题。&lt;/p&gt;
&lt;p&gt;MAC地址是固定的，无法适应网络位置变化，难以支持跨网络分组转发&lt;/p&gt;
&lt;h2 id=&#34;IP数据报&#34;&gt;IP数据报&lt;/h2&gt;
 &lt;img src=&#34;image-20241230174447326.png&#34; alt=&#34;image-20241230174447326&#34; style=&#34;zoom: 30%;&#34; /&gt; 
&lt;ul&gt;
&lt;li&gt;首部长度：记录数据报头部长度。&lt;strong&gt;单位是4Byte&lt;/strong&gt;也就是32bit。因为报文头部固定部分长度为&lt;strong&gt;20B&lt;/strong&gt;，所以首部长度最少是5（0101），最大为15（1111）&lt;/li&gt;
&lt;li&gt;区分服务：服务的类型&lt;/li&gt;
&lt;li&gt;总长度：整个IP数据报文长度。&lt;strong&gt;单位是1Byte&lt;/strong&gt;，所以IP报文理论最大上限长度是2^16-1 = 65535 Byte&lt;/li&gt;
&lt;li&gt;生存时间：TTL，没经过一个路由器-1&lt;/li&gt;
&lt;li&gt;协议：&lt;img src=&#34;image-20241230175457883.png&#34; alt=&#34;image-20241230175457883&#34; style=&#34;zoom: 67%;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据报分片&#34;&gt;数据报分片&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;数据链路层有最大长度限制，所以需要把IP数据报文分片。&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20241230192714482.png&#34; alt=&#34;image-20241230192714482&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;p&gt;假如数据长度2200字节，MTU现在设定最大820字节，IP头部20字节，那么需要分成（820，820，620）三个片&lt;/p&gt;
&lt;img src=&#34;image-20241230193107372.png&#34; alt=&#34;image-20241230193107372&#34; style=&#34;zoom: 67%;&#34; /&gt;  
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;标识：确定不同分片对应的的数据报文，为了后续拼接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标志：占三个位：空位 DF MF；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DF=1禁止分片，DF=0允许分片；&lt;/li&gt;
&lt;li&gt;MF=1表示后面还有分片，MF=0代表是最后一个分片&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;片偏移以 &lt;strong&gt;8Byte&lt;/strong&gt; 为单位&lt;img src=&#34;image-20241230215535927.png&#34; alt=&#34;image-20241230215535927&#34; style=&#34;zoom: 67%;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;[!IMPORTANT]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;奇奇怪怪的单位&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首部长度：以4Byte为单位&lt;/p&gt;
&lt;p&gt;总长度：以1Byte为单位&lt;/p&gt;
&lt;p&gt;片偏移：以8Byte为单位&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;IP地址划分&#34;&gt;IP地址划分&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20241230222944661.png&#34; alt=&#34;image-20241230222944661&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20241231143140233.png&#34; alt=&#34;image-20241231143140233&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0.0.0.0&lt;/td&gt;
&lt;td&gt;缺省路由&lt;/td&gt;
&lt;td&gt;可作为源地址，不可以作为目的地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;255.255.255.255&lt;/td&gt;
&lt;td&gt;广播地址&lt;/td&gt;
&lt;td&gt;不可作为源地址，可以作为目的地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网络位全0&lt;/td&gt;
&lt;td&gt;网络内，本机IP地址的主机部份&lt;/td&gt;
&lt;td&gt;可作为源地址，不可以作为目的地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;主机号全0&lt;/td&gt;
&lt;td&gt;代表网络的地址&lt;/td&gt;
&lt;td&gt;不可作为源地址，不可以作为目的地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;主机号全1&lt;/td&gt;
&lt;td&gt;网络内广播&lt;/td&gt;
&lt;td&gt;可作为源地址，不可以作为目的地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;127.x.x.x&lt;/td&gt;
&lt;td&gt;本地软件Loopback测试&lt;/td&gt;
&lt;td&gt;可作为源地址，可以作为目的地址&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;不同网段的&lt;strong&gt;私有IP地址&lt;/strong&gt;：仅能内部使用&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;地址类别&lt;/th&gt;
&lt;th&gt;地址范围&lt;/th&gt;
&lt;th&gt;网段个数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;10.0.0.0 - 10.255.255.255&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;172.16.0.0 - 172.31.255.255&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;192.168.0.0 - 192.168.255.255&lt;/td&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;IP子网掩码&#34;&gt;IP子网掩码&lt;/h3&gt;
&lt;img src=&#34;image-20241231150034788.png&#34; alt=&#34;image-20241231150034788&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;p&gt;&lt;strong&gt;子网掩码与IP地址相与，即可获得网络地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;子网掩码255.255.192.0；IP地址141.14.72.24&lt;/p&gt;
&lt;p&gt;网络地址为：141.14.64.0&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!WARNING]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;易错例题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主机ip为180.80.77.55；掩码255.255.252.0，发送广播分组的目的地址为&lt;/p&gt;
&lt;p&gt;1111 1100&lt;/p&gt;
&lt;p&gt;0100 1101&lt;/p&gt;
&lt;p&gt;0100 1100=76   但是广播地址要给主机号全变成1，所以是：&lt;/p&gt;
&lt;p&gt;0100 11&lt;u&gt;&lt;strong&gt;11&lt;/strong&gt;&lt;/u&gt; . 11111111&lt;/p&gt;
&lt;p&gt;结果：180.80.79.255&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;无分类编址CIDR&#34;&gt;无分类编址CIDR&lt;/h3&gt;
&lt;p&gt;消除了传统A、B、C类地址和划分子网的概念&lt;/p&gt;
&lt;img src=&#34;image-20241231155327072.png&#34; alt=&#34;image-20241231155327072&#34; style=&#34;zoom:67%;&#34; /&gt;  
&lt;p&gt;&lt;strong&gt;全0：本网络；全1：广播&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20241231155457787.png&#34; alt=&#34;image-20241231155457787&#34; style=&#34;zoom: 67%;&#34; /&gt; 
&lt;p&gt;&lt;strong&gt;构成超网&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20241231155943052.png&#34; alt=&#34;image-20241231155943052&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;ul&gt;
&lt;li&gt;.00100000.&lt;/li&gt;
&lt;li&gt;.00101000.&lt;/li&gt;
&lt;li&gt;.00110000.&lt;/li&gt;
&lt;li&gt;.00111000.&lt;/li&gt;
&lt;li&gt;最后构成35.230.32.0/19&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;最长前缀匹配&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查路由表若有多个匹配结果，则&lt;strong&gt;发给有最长网络前缀&lt;/strong&gt;的路由&lt;/p&gt;
&lt;h3 id=&#34;ARP和ICMP协议&#34;&gt;ARP和ICMP协议&lt;/h3&gt;
&lt;img src=&#34;image-20241231172034292.png&#34; alt=&#34;image-20241231172034292&#34; style=&#34;zoom: 50%;&#34; /&gt;  
&lt;h4 id=&#34;ARP&#34;&gt;ARP&lt;/h4&gt;
&lt;p&gt;在网络层，发送方只知道对方的IP地址，所以：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首先检查ARP缓存看有没有已经存好的地址&lt;/strong&gt;，没有就用FF-FF-FF-FF-FF-FF发送广播ARP请求分组，收到请求的主机响应，返回MAC地址，随后发送方得到MAC地址。&lt;/p&gt;
&lt;p&gt;如果是跨交换机，发送方得到的是交换机的MAC地址。交换机会再接着发&lt;/p&gt;
&lt;img src=&#34;image-20241231170051028.png&#34; alt=&#34;image-20241231170051028&#34; style=&#34;zoom:67%;&#34; /&gt;  
&lt;p&gt;&lt;strong&gt;四种典型情况：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主机A发送到本网络主机B：用ARP找到B的硬件地址&lt;/li&gt;
&lt;li&gt;主机A发送给另一网络的主机B：用ARP找到本网络的一个路由器硬件地址&lt;/li&gt;
&lt;li&gt;路由器发给本网络主机A：用ARP找到A的硬件地址&lt;/li&gt;
&lt;li&gt;路由器发送给另一网络的主机B：用ARP找到本网络的另一个路由器硬件地址&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;**RARP：**很神奇喔，自己不知道自己IP地址，要通过自己的MAC地址询问服务器自己的IP是多少&lt;/p&gt;
&lt;h4 id=&#34;DHCP&#34;&gt;DHCP&lt;/h4&gt;
&lt;p&gt;给主机动态分配IP，是应用层协议，用UDP&lt;/p&gt;
&lt;h4 id=&#34;ICMP&#34;&gt;ICMP&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;ICMP报文装填在IP报文数据部分&lt;/strong&gt;，但是是&lt;strong&gt;网络层协议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了报告差错和异常，可以用来ping、traceroute&lt;/p&gt;
&lt;img src=&#34;image-20241231172532499.png&#34; alt=&#34;image-20241231172532499&#34; style=&#34;zoom: 67%;&#34; /&gt;  
&lt;ul&gt;
&lt;li&gt;类型&lt;/li&gt;
&lt;li&gt;代码：拓展&lt;/li&gt;
&lt;li&gt;检验和：检验首部&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;ICMP差错报文&#34;&gt;&lt;strong&gt;ICMP差错报文&lt;/strong&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;终点不可达：路由器或主机&lt;strong&gt;无法交付&lt;/strong&gt;报文&lt;/li&gt;
&lt;li&gt;源点抑制：&lt;strong&gt;拥塞&lt;/strong&gt;而丢弃&lt;/li&gt;
&lt;li&gt;时间超过：当路由器收到生存时间&lt;strong&gt;TTL=0&lt;/strong&gt;的数据报文时，先丢弃该报文，再向远点发送时间超过报文&lt;/li&gt;
&lt;li&gt;参数问题：路由器或目的主机收到的&lt;strong&gt;首部字段有误&lt;/strong&gt;，发送参数问题报文&lt;/li&gt;
&lt;li&gt;改变路由（重定向）：路由器发送该报文到主机，让主机知道下次的数据包应该发送给另外的路由器（可能是更好的路由）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;差错报文的ICMP数据字段&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20241231173246830.png&#34; alt=&#34;image-20241231173246830&#34; style=&#34;zoom: 67%;&#34; /&gt;  
&lt;blockquote&gt;
&lt;p&gt;[!NOTE]&lt;/p&gt;
&lt;p&gt;对&lt;strong&gt;差错报文&lt;/strong&gt;不再发送差错报文&lt;/p&gt;
&lt;p&gt;对第一个数据分片后的&lt;strong&gt;后续分片&lt;/strong&gt;不发送ICMP差错报文&lt;/p&gt;
&lt;p&gt;对具有&lt;strong&gt;组播&lt;/strong&gt;地址的数据报不发送ICMP差错报文&lt;/p&gt;
&lt;p&gt;对&lt;strong&gt;特殊地址&lt;/strong&gt;（127.0.0.0或0.0.0.0）不发送ICMP差错报文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;ICMP询问报文&#34;&gt;ICMP询问报文&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;回送请求和回答报文&lt;/li&gt;
&lt;li&gt;时间戳请求和回答报文&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;IGMP&#34;&gt;IGMP&lt;/h4&gt;
&lt;p&gt;提供带&lt;u&gt;&lt;strong&gt;多播组&lt;/strong&gt;&lt;/u&gt;标识的路由，让整个网络都支持多播&lt;/p&gt;
&lt;p&gt;用于管理主机与多播组的关系&lt;/p&gt;
&lt;h2 id=&#34;路由选择协议&#34;&gt;路由选择协议&lt;/h2&gt;
&lt;p&gt;内部网关西医：RIP、OSPF&lt;/p&gt;
&lt;p&gt;外部网关协议：BGP&lt;/p&gt;
&lt;h3 id=&#34;RIP协议&#34;&gt;RIP协议&lt;/h3&gt;
&lt;p&gt;距离：跳数。从路由器到直接相连的网络距离为1，经过一个路由器+1&lt;/p&gt;
&lt;p&gt;距离最大为16，一条路由最多只能包含15个路由器。RIP只适用于小型网络&lt;/p&gt;
&lt;img src=&#34;image-20241231195543964.png&#34; alt=&#34;image-20241231195543964&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;p&gt;&lt;strong&gt;格式&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;网络&lt;/th&gt;
&lt;th&gt;距离&lt;/th&gt;
&lt;th&gt;下一跳&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;每30s和邻居交换一次路由信息，交换的信息是本路由器的全部信息。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把地址为X的路由器中发来的RIP报文中所有项目，地址改为X，距离为报文中距离+1&lt;/li&gt;
&lt;li&gt;对修改后的RIP报文中每一个项目进行：
&lt;ul&gt;
&lt;li&gt;路由表没有对应Net，填入&lt;/li&gt;
&lt;li&gt;路由表有对应Net，
&lt;ul&gt;
&lt;li&gt;若原有下一跳是X，直接替换&lt;/li&gt;
&lt;li&gt;若原有下一跳不是X，比较距离，保留短的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若180s没收到X发来的更新路由表信息，把X对应表项距离设置为16，意思是不可达&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;IP首部&lt;/th&gt;
&lt;th&gt;UDP首部&lt;/th&gt;
&lt;th&gt;RIP报文&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;RIP报文在UDP的数据报中&lt;/strong&gt;，所以RIP是应用层协议&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个RIP报文最多传送25个路由表项&lt;/strong&gt;，如果表项太多需要发多个RIP报文&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RIP中好消息传的快、坏消息传的慢&lt;/strong&gt;，解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;水平分割：禁止把一条路由信息从收到这条路由信息的接口广播出去&lt;/li&gt;
&lt;li&gt;保持：当一个网络不可达后，一段时间内忽略其他路由发来的该网络信息&lt;/li&gt;
&lt;li&gt;触发更新：一旦网络不可达，直接广播，不等待下一个广周期到&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;OSPF协议&#34;&gt;OSPF协议&lt;/h3&gt;
&lt;p&gt;用了Dijkstra的最短路径SPF算法&lt;/p&gt;
&lt;p&gt;OSPF使用洪泛法，向所有服务器发送&lt;/p&gt;
&lt;p&gt;直接使用IP报文发，没有UDP包装，是网络层协议&lt;/p&gt;
&lt;p&gt;只有链路状态变化，才会发送信息&lt;/p&gt;
&lt;p&gt;OSPF不使用RIP的距离，使用“度量”metric&lt;/p&gt;
&lt;p&gt;存储全网拓扑结构图&lt;/p&gt;
&lt;p&gt;OSPF还会划分区域&lt;/p&gt;
&lt;img src=&#34;image-20241231233656203.png&#34; alt=&#34;image-20241231233656203&#34; style=&#34;zoom:67%;&#34; /&gt;  
&lt;h3 id=&#34;BGP&#34;&gt;BGP&lt;/h3&gt;
&lt;p&gt;外部通讯协议&lt;/p&gt;
&lt;p&gt;用TCP&lt;/p&gt;
&lt;p&gt;PPT里没有&lt;/p&gt;
&lt;h1&gt;传输层&lt;/h1&gt;
&lt;p&gt;传输层功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用进程之间的逻辑通信&lt;/li&gt;
&lt;li&gt;复用和分用（复用：不同进程可用同一个协议；分用：接收方传输层剥去首部课正确交付）&lt;/li&gt;
&lt;li&gt;检错检测&lt;/li&gt;
&lt;li&gt;提供面向连接和无连接的传输协议&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;端口号&#34;&gt;端口号&lt;/h3&gt;
&lt;p&gt;1-65535其中：&lt;/p&gt;
&lt;p&gt;1-1024：熟知端口，用于常用应用程序，如ftp 21，smtp 25等&lt;/p&gt;
&lt;p&gt;1024-49151：注册端口&lt;/p&gt;
&lt;p&gt;49152-65535：客户端进程动态生成&lt;/p&gt;
&lt;p&gt;嵌套字Socket格式 = IP地址：端口号&lt;/p&gt;
&lt;h2 id=&#34;UDP&#34;&gt;UDP&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;无连接&lt;/strong&gt;，&lt;strong&gt;不可靠&lt;/strong&gt;（只会尽最大努力交付），简单，包头小&lt;/p&gt;
&lt;p&gt;首部简单：&lt;/p&gt;
&lt;img src=&#34;1735711096881.png&#34; alt=&#34;1735711096881&#34; style=&#34;zoom: 67%;&#34; /&gt;  
&lt;p&gt;UDP报文长度：头部加上数据&lt;/p&gt;
&lt;p&gt;校验部分添加伪首部校验&lt;/p&gt;
&lt;p&gt;UDP常见应用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS域名服务&lt;/li&gt;
&lt;li&gt;SNMP简单网络协议&lt;/li&gt;
&lt;li&gt;RIP路由信息协议&lt;/li&gt;
&lt;li&gt;P2P点对点通信&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;TCP&#34;&gt;TCP&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;面向连接，可靠&lt;/strong&gt;有序，不丢失不重复&lt;/p&gt;
&lt;p&gt;全双工通信，面向字节流&lt;/p&gt;
&lt;h3 id=&#34;TCP报文头部&#34;&gt;TCP报文头部&lt;/h3&gt;
&lt;img src=&#34;image-20250101144607767.png&#34; alt=&#34;image-20250101144607767&#34; style=&#34;zoom: 67%;&#34; /&gt;  
&lt;ul&gt;
&lt;li&gt;每个&lt;strong&gt;端口&lt;/strong&gt;占16位（1-65535）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;序号&lt;/strong&gt;：表示本报文发送的数据第一个&lt;strong&gt;字节&lt;/strong&gt;的序号，注意是字节的序号&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确认号&lt;/strong&gt;：期望收到的下一个报文的第一个数据&lt;strong&gt;字节&lt;/strong&gt;的序号。若为N，则说明N-1位置的数据都已经收到&lt;/li&gt;
&lt;li&gt;数据偏移：就是首部长度，&lt;strong&gt;单位是4字节&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;保留字段：全为0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;6个控制位&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;URG紧急位&lt;/strong&gt;：置为1时，说明是紧急文件，要尽快发送【发送方紧急】&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ACK确认位&lt;/strong&gt;：=1确认号有效，建立连接后应该一直为1&lt;/li&gt;
&lt;li&gt;PSH推送位：=1时接收方应尽快接受并交付【接收方紧急】（不考）&lt;/li&gt;
&lt;li&gt;RST复位：=1表明连接严重差错，要释放连接（不考）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SYN同步位&lt;/strong&gt;：=1时表明这是一个连接请求/接受报文&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FIN终止位&lt;/strong&gt;：=1时表明发送方数据已经发完，要求释放连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;窗口&lt;/strong&gt;：&lt;strong&gt;发送方的接收窗口&lt;/strong&gt;，即发送放现在允许对方发送的数据量，单位1字节&lt;/li&gt;
&lt;li&gt;校验和：检验首部+数据，要加上12B伪首部（其中伪首部第四个字段为6）&lt;img src=&#34;image-20250101202339846.png&#34; alt=&#34;image-20250101202339846&#34; style=&#34;zoom:67%;&#34; /&gt; &lt;strong&gt;伪首部长这样&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;紧急指针：URG=1时有意义，本报文段紧急数据的字节数&lt;/li&gt;
&lt;li&gt;选项：长度可变，可以有最大报文长度、窗口扩大、时间戳等&lt;/li&gt;
&lt;li&gt;填充：使得首部是4字节（32位）的整数倍&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;TCP连接管理&#34;&gt;TCP连接管理&lt;/h3&gt;
&lt;p&gt;连接建立→数据传送→连接释放&lt;/p&gt;
&lt;h4 id=&#34;TCP连接建立（三次握手协议）&#34;&gt;TCP连接建立（三次握手协议）&lt;/h4&gt;
&lt;img src=&#34;image-20250101151837970.png&#34; alt=&#34;image-20250101151837970&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;ol&gt;
&lt;li&gt;客户端发送连接请求【&lt;strong&gt;同步位&lt;/strong&gt;SYN=1，初始&lt;strong&gt;序号&lt;/strong&gt;seq=x（随机）】，无应用层数据，客户端进入SYN-SENT（同步已发送）状态&lt;/li&gt;
&lt;li&gt;服务器若同意，返回确认报文段【&lt;strong&gt;同步位&lt;/strong&gt;SYN=1，&lt;strong&gt;确认位&lt;/strong&gt;ACK=1，&lt;strong&gt;序号&lt;/strong&gt;seq=y（随机），&lt;strong&gt;确认号&lt;/strong&gt;ack=x+1】，无应用层数据，服务器进入SYN-RCVD（同步收到）状态&lt;/li&gt;
&lt;li&gt;客户端返回确认的确认【&lt;strong&gt;同步位&lt;/strong&gt;SYN=0，&lt;strong&gt;确认位&lt;/strong&gt;ACK=1，&lt;strong&gt;序号&lt;/strong&gt;seq=x+1，&lt;strong&gt;确认号&lt;/strong&gt;ack=y+1】，客户端为TCP分配缓存和变量，&lt;strong&gt;可携带应用层数据&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;TCP连接释放（四次握手）&#34;&gt;TCP连接释放（四次握手）&lt;/h4&gt;
&lt;img src=&#34;image-20250101152842674.png&#34; alt=&#34;image-20250101152842674&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;客户端&lt;/strong&gt;发送连接释放报文【&lt;strong&gt;终止位&lt;/strong&gt;FIN=1，&lt;strong&gt;序号&lt;/strong&gt;seq=u（等于前面的序号+1）】，进入FIN-WAIT-1状态&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器&lt;/strong&gt;返回确认报文段【&lt;strong&gt;确认位&lt;/strong&gt;ACK=1，序号seq=v，&lt;strong&gt;确认号&lt;/strong&gt;ack=u+1】，服务器进入&lt;strong&gt;CLOSE-WAIT（半关闭状态）&lt;/strong&gt;，这个时候&lt;strong&gt;服务器还能向客户端发送数据&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器&lt;/strong&gt;发完数据，发出连接释放报文【&lt;strong&gt;终止位&lt;/strong&gt;FIN=1，&lt;strong&gt;确认位&lt;/strong&gt;ACK=1，&lt;strong&gt;序号&lt;/strong&gt;seq=w，&lt;strong&gt;确认号&lt;/strong&gt;ack=u+1】，进入LAST-ACK（最后确认）状态&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端&lt;/strong&gt;返回确认报文段【&lt;strong&gt;确认位&lt;/strong&gt;ACK=1，&lt;strong&gt;序号&lt;/strong&gt;seq=u+1，&lt;strong&gt;确认号&lt;/strong&gt;ack=w+1】，客户端等待2 * MSL（最长报文段寿命）的时间后，彻底关闭&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;TCP可靠传输&#34;&gt;TCP可靠传输&lt;/h3&gt;
&lt;p&gt;网络层不可靠&lt;/p&gt;
&lt;p&gt;传输层TCP实现可靠传输&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;序号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每个字节都有一个序号&lt;/p&gt;
&lt;p&gt;序号字段是第一个字节的序号&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;确认&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;发送方发完了数据先放进缓存，直到确认了再删&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重传&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**超时重传：**TCP采用一种自适应算法，记录一个报文段发出的时间和确认的时间，时间差为RTT（往返时间），TCP会维护一个加权平均往返时间RTTS，随着样本值变化而变化。超时重传时间略大于RTTs&lt;/li&gt;
&lt;li&gt;**冗余ACK：**每当比期望序号打的失序报文段到达，发送一个冗余ACK，指明期待收到的下一个序号，发送方收到了这个ACK后立刻重传不用等超时&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;TCP流量控制&#34;&gt;TCP流量控制&lt;/h3&gt;
&lt;p&gt;哦又是&lt;u&gt;熟悉&lt;/u&gt;的协议！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止等待协议&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20241229152854873.png&#34; alt=&#34;image-20241229152854873&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mtext&gt;信道利用率&lt;/mtext&gt;&lt;mi&gt;U&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;/msub&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;信道利用率U=\frac{T_D}{T_D+RTT+T_A}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;信&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;道&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;利&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;用&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;率&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.19633em;vertical-align:-0.8360000000000001em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.36033em;&#34;&gt;&lt;span style=&#34;top:-2.3139999999999996em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8360000000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流水线传输&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这不是我们滑动窗口吗&lt;/p&gt;
&lt;img src=&#34;image-20250101171246593.png&#34; alt=&#34;image-20250101171246593&#34; style=&#34;zoom: 50%;&#34; /&gt; 
&lt;p&gt;以&lt;strong&gt;字节为单位&lt;/strong&gt;的滑动窗口&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据接收方给出的窗口值，构造自己的发送窗口&lt;/li&gt;
&lt;li&gt;发送数据&lt;/li&gt;
&lt;li&gt;收到确认前移&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;发送窗口并不总是和接收窗口一样大（因为时间滞后）&lt;/p&gt;
&lt;p&gt;&lt;u&gt;&lt;strong&gt;发送窗口取接受窗口和拥塞窗口的最小值&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发送缓存&lt;/strong&gt;用于暂时存放准备发的发送数据和TCP发出但没确认的数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接收缓存&lt;/strong&gt;用于存没按序到达的数据和被接受但没被应用读取的数据&lt;/p&gt;
&lt;img src=&#34;image-20250101173640333.png&#34; alt=&#34;image-20250101173640333&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;p&gt;报文中窗口参数 rwnd 单位字节&lt;/p&gt;
&lt;p&gt;TCP有一个计时器，如果收到rwnd=0后，会启动计时器，一段时间后发送零窗口探测报文段，对方会再次给出当前窗口值&lt;/p&gt;
&lt;h3 id=&#34;TCP拥塞控制&#34;&gt;TCP拥塞控制&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;[!NOTE]&lt;/p&gt;
&lt;p&gt;重要喔&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;未按时收到确认就判定为拥塞&lt;/p&gt;
&lt;p&gt;拥塞控制控制多个发送方，流量控制控制单个发送方&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发送窗口&lt;/strong&gt;取接收窗口rwnd和拥塞窗口cwnd&lt;strong&gt;较小&lt;/strong&gt;的一个&lt;/p&gt;
&lt;h4 id=&#34;慢开始和拥塞避免&#34;&gt;慢开始和拥塞避免&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;慢开始：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先预设一个ssthresh值&lt;/p&gt;
&lt;p&gt;发送方A先令cwnd=1，发一个，收到B的确认后cwnd乘以2变成2；再收到变成4&lt;/p&gt;
&lt;p&gt;cwnd&lt;strong&gt;指数增长&lt;/strong&gt;，直到cwnd &amp;gt;= ssthresh 即慢开始门限改为使用 阻塞避免算法&lt;/p&gt;
&lt;p&gt;*&lt;u&gt;注意：&lt;/u&gt;*如果乘以2大于ssthresh，那么只能取ssthresh，不能指数增大超过门限&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;阻塞避免算法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每收到1条确认，cwnd只+1，线性增长&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;遇到网络拥塞：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把ssthresh设置为拥塞时cwnd值的&lt;strong&gt;一半&lt;/strong&gt;，然后让cwnd=1重新慢开始&lt;/p&gt;
&lt;img src=&#34;image-20250101200956320.png&#34; alt=&#34;image-20250101200956320&#34; style=&#34;zoom: 67%;&#34; /&gt;  
&lt;h4 id=&#34;快重传和快恢复&#34;&gt;快重传和快恢复&lt;/h4&gt;
&lt;img src=&#34;image-20250101201343117.png&#34; alt=&#34;image-20250101201343117&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;p&gt;为了尽早重传：&lt;/p&gt;
&lt;p&gt;如果连续收到三个重复的冗余ACK确认，立即重传相应的报文段&lt;/p&gt;
&lt;p&gt;ssthresh调整为当前cwnd的一半，这个时候&lt;strong&gt;不会慢开始&lt;/strong&gt;，采用快恢复&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;快恢复：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;直接把cwnd设置为当前cwnd的一半，跳过慢开始阶段，直接开始拥塞避免加法增大&lt;/p&gt;
&lt;h1&gt;应用层&lt;/h1&gt;
&lt;h2 id=&#34;应用模型&#34;&gt;应用模型&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;C/S模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;服务器永久提供服务，永久性访问地址/域名&lt;/p&gt;
&lt;p&gt;服务器处于接受请求状态，收到客户机请求后处理，发送结果&lt;/p&gt;
&lt;p&gt;客户机之间不通信&lt;/p&gt;
&lt;p&gt;可扩展性不佳&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P2P模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;莫得服务器，全是客户机，都可以请求服务，都可以提供服务&lt;/p&gt;
&lt;p&gt;任意两点都可以直接通讯，节点可能改变IP地址&lt;/p&gt;
&lt;p&gt;可扩展性好&lt;/p&gt;
&lt;p&gt;网络健壮性强，失去一个节点也不会网络失效&lt;/p&gt;
&lt;h2 id=&#34;域名解析DNS系统&#34;&gt;域名解析DNS系统&lt;/h2&gt;
&lt;p&gt;使用UDP&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.baidu.com&#34;&gt;www.baidu.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;顶级域名：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;国家顶级域名：cn、us、jp&lt;/p&gt;
&lt;p&gt;通用顶级域名：com、net、org…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二级域名：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上述例子中的baidu&lt;/p&gt;
&lt;img src=&#34;image-20250101211437736.png&#34; alt=&#34;image-20250101211437736&#34; style=&#34;zoom: 67%;&#34; /&gt; 
&lt;p&gt;根域名服务器：知道所有顶级域名服务器的IP地址&lt;/p&gt;
&lt;p&gt;顶级域名服务器：一个顶级域名有很多顶级域名服务器，可以获取顶级域名下属二级域名&lt;/p&gt;
&lt;p&gt;权限域名服务器：负责一个区的域名服务器&lt;/p&gt;
&lt;p&gt;本地域名服务器：发送DNS请求的时候会先查询本地域名服务器&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主机向本地域名服务器查询&lt;/li&gt;
&lt;li&gt;本地域名服务器向根域名服务器查询，得到顶级域名服务器地址&lt;/li&gt;
&lt;li&gt;本地域名服务器向顶级域名服务器查询，得到权限域名服务器地址&lt;/li&gt;
&lt;li&gt;本地域名服务器向权限域名服务器查询，得到最终要访问的IP地址&lt;/li&gt;
&lt;li&gt;本地域名保存IP地址，返回给主机&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;FTP文件传送协议&#34;&gt;FTP文件传送协议&lt;/h2&gt;
&lt;p&gt;适用于不同操作系统中传输&lt;/p&gt;
&lt;p&gt;使用C/S协议模式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用TCP&lt;/strong&gt;实现可靠传输&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ftp服务器启动&lt;/li&gt;
&lt;li&gt;客户端登录ftp服务器，输入用户名密码或者匿名登陆&lt;/li&gt;
&lt;li&gt;服务器启动一个新的从属进程【包含控制进程和数据传输进程】
&lt;ul&gt;
&lt;li&gt;21号端口控制连接：控制发不发、终止等&lt;/li&gt;
&lt;li&gt;20号端口数据连接：传文件的
&lt;ul&gt;
&lt;li&gt;主动模式：连接后客户端随机开一个端口，服务器通过端口20连接客户端【默认主动】&lt;/li&gt;
&lt;li&gt;被动模式：连接后服务器随机开一个端口，客户端连接到服务器端口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开始传输&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;电子邮件&#34;&gt;电子邮件&lt;/h2&gt;
&lt;img src=&#34;image-20250101221119568.png&#34; alt=&#34;image-20250101221119568&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;p&gt;&lt;strong&gt;使用TCP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;STMP推送邮件到服务器&lt;/p&gt;
&lt;p&gt;POP3或IMAP从服务器拉取邮件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STMP步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发送方发到发邮件服务器&lt;/li&gt;
&lt;li&gt;发邮件服务器与接收方建立TCP连接&lt;/li&gt;
&lt;li&gt;发邮件服务器问STMP服务器是否有收件人&lt;/li&gt;
&lt;li&gt;传输邮件&lt;/li&gt;
&lt;li&gt;释放连接&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;SMTP只能发ASCII码，所以要使用MIME来把非ASCII码转化为7位ASCII码&lt;/p&gt;
&lt;p&gt;**POP3或者IMAP协议：**收取邮件&lt;/p&gt;
&lt;h2 id=&#34;HTTP协议和www&#34;&gt;HTTP协议和www.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;URL形式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;协议://主机:端口/路径&lt;/p&gt;
&lt;p&gt;http协议是超文本传输协议，语言HTML&lt;/p&gt;
&lt;p&gt;HTTP采用 &lt;strong&gt;&lt;u&gt;TCP&lt;/u&gt;&lt;/strong&gt; 为传输层协议，但&lt;strong&gt;HTTP协议本身是无连接的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非持久连接：&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20250101225428059.png&#34; alt=&#34;image-20250101225428059&#34; style=&#34;zoom:67%;&#34; /&gt;  
&lt;p&gt;&lt;strong&gt;持久连接：&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20250101225402193.png&#34; alt=&#34;image-20250101225402193&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;p&gt;HTTP请求报文面向文本，所以报文中每一个字段都是ASCII码串&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;浏览器分析URL&lt;/li&gt;
&lt;li&gt;浏览器向DNS请求解析IP地址&lt;/li&gt;
&lt;li&gt;获得IP地址&lt;/li&gt;
&lt;li&gt;浏览器与服务器建立TCP连接&lt;/li&gt;
&lt;li&gt;浏览器发出取文件命令GET /index.htm&lt;/li&gt;
&lt;li&gt;服务器给出响应发文件&lt;/li&gt;
&lt;li&gt;TCP连接释放&lt;/li&gt;
&lt;li&gt;浏览器显示&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;请求报文&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20250101225839920.png&#34; alt=&#34;image-20250101225839920&#34; style=&#34;zoom: 67%;&#34; /&gt; 
&lt;p&gt;&lt;strong&gt;响应报文&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20250101225853337.png&#34; alt=&#34;image-20250101225853337&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;p&gt;1xx表示通知信息&lt;/p&gt;
&lt;p&gt;2xx表示成功（如200、202）&lt;/p&gt;
&lt;p&gt;3xx表示重定向（如301）&lt;/p&gt;
&lt;p&gt;4xx表示客户差错（如404）&lt;/p&gt;
&lt;p&gt;5xx表示服务器差错&lt;/p&gt;
&lt;h1&gt;完结撒花&lt;/h1&gt;
&lt;img src=&#34;我要成为高手.png&#34; alt=&#34;我要成为高手&#34;  /&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.unfinished.top/2024/12/19/Compiler/</guid>
            <title>【2024北航编译器】使用Java实现的C语言子集SysY-MIPS编译器</title>
            <link>https://blog.unfinished.top/2024/12/19/Compiler/</link>
            <category>大学</category>
            <category>总结</category>
            <category>编译</category>
            <pubDate>Thu, 19 Dec 2024 10:21:31 +0000</pubDate>
            <description><![CDATA[ &lt;h1&gt;编译器设计文档&lt;/h1&gt;
&lt;img src=&#34;Compiler.png&#34; alt=&#34;我要成为编译高手&#34; style=&#34;zoom: 25%;&#34; /&gt;  
&lt;h2 id=&#34;编译器总体设计&#34;&gt;编译器总体设计&lt;/h2&gt;
&lt;h3 id=&#34;结构&#34;&gt;结构&lt;/h3&gt;
&lt;p&gt;Block模块：创建语法模块，模块作为语法树节点&lt;/p&gt;
&lt;p&gt;Token模块：创建token&lt;/p&gt;
&lt;p&gt;Symbol模块：为语义分析创建符号和符号表&lt;/p&gt;
&lt;p&gt;Error模块：负责处理错误，打印错误&lt;/p&gt;
&lt;p&gt;Frontend模块：负责词法分析和语法分析，包含&lt;code&gt;Lexer&lt;/code&gt;、&lt;code&gt;Parser&lt;/code&gt;和&lt;code&gt;Visitor&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Middle模块：负责生成中间代码LLVM，存储了LLVM的数据结构&lt;/p&gt;
&lt;p&gt;Backend模块：负责将LLVM结构翻译成mips并最终输出。&lt;/p&gt;
&lt;p&gt;Tool模块：负责文件输入输出等杂项&lt;/p&gt;
&lt;p&gt;Compiler：作为主程序入口，启动后自动调用前后端接口等进行词法分析、语法分析、语义分析、LLVM代码生成。&lt;/p&gt;
&lt;h3 id=&#34;接口设计&#34;&gt;接口设计&lt;/h3&gt;
&lt;h4 id=&#34;前端接口&#34;&gt;前端接口&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;预处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入文件&lt;/li&gt;
&lt;li&gt;读取后将所有换行（如\r\n）统一换成\n&lt;/li&gt;
&lt;li&gt;输出字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Lexer&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入字符串&lt;/li&gt;
&lt;li&gt;读取字符串，经过判断和操作，生成token，判断是否有词法错误&lt;/li&gt;
&lt;li&gt;输出token串、若出错输出错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parser：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入token串&lt;/li&gt;
&lt;li&gt;把token串分析后，经过一系列判断生成语法树，判断是否有语法错误&lt;/li&gt;
&lt;li&gt;输出语法树、若出错输出错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Visitor：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入语法树根节点CompUnitBlock&lt;/li&gt;
&lt;li&gt;从CompUnitBlock开始分析整个语法树，并建立符号表，判断是否有语义错误&lt;/li&gt;
&lt;li&gt;输出符号表、若出错输出错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IrBuilder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入语法树根节点CompUnitBlock&lt;/li&gt;
&lt;li&gt;从CompUnitBlock开始分析整个语法树，将语法树转换为LLVM，并存储在IrModule中。其中为了分析也会建立符号表。将语法翻译为LLVMValue&lt;/li&gt;
&lt;li&gt;输出IrModule，并打印到文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MipsBuilder：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入LLVM根节点IrModule&lt;/li&gt;
&lt;li&gt;将LLVM语言翻译成mips语言，其中利用Reg记录寄存器&lt;/li&gt;
&lt;li&gt;输出String，内容为mips代码，并将mips打印到文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;错误接口&#34;&gt;错误接口&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ErrorHandler&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;输入错误的位置和类型&lt;/li&gt;
&lt;li&gt;输出到错误文件中&lt;/li&gt;
&lt;li&gt;错误处理在后面词法、语法和语义分析中详细说明&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文件组织&#34;&gt;文件组织&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Compiler&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;└── src&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	├── Block&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	├── AddExpBlock.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	├── ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	├── ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	├── VarDeclBlock.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	└── VarDefBlock.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	├── Backend&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	├── MipsBuilder.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	├── Reg.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	└── Translator.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	├── Error&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	├── Err.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	├── ErrType.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	└── ErrorHandler.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	├── Frontend&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	├── Lexer.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	├── Parser.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	└── Visitor.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	├── Middle&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	├── Types&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	├── ArrayType.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	├── FunctionType.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	├── IntegerType.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	├── LabelType.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	├── PointerType.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	├── VoidType.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	└── Type.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	├── Values&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	├── Instructions&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	|	├──	Mem&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	|	|	├──	AllovaInst&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	|	|	├──	GEPInst&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	|	|	├──	LoadInst&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	|	|	├──	MemInst&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	|	|	└──	StoreInst&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	|	|&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	|	├──	Terminator&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	|	|	├──	BrInst&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	|	|	├──	CallInst&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	|	|	├──	RetInst&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	|	|	└──	TerminatorInst&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	|	|&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	|	├──	BinaryInst&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	|	├──	ConvInst&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	|	├──	Instruction&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	|	└── Operator&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	|&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	├── BuildFactory.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	├── BasicBlock.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	├── Const.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	├── ConstArray.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	├── ConstInt.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	├── Function.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	├── GlobalVar.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	├── IdBuilder.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	├── NullValue.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	├── Use.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	├── User.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|	└── Value.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	|&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	├── IrModule&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	└── IrBuilder&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	├── Symbol&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	├── BTpye.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	├── Symbol.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	|	├── SymbolTable.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	└── SymbolTableList.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	├── Token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	├── Token.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	└── TokenType.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	├── Tool&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│	└── FileControler.java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	│&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	└── Compiler.java&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;词法分析设计&#34;&gt;词法分析设计&lt;/h2&gt;
&lt;h3 id=&#34;Token设计&#34;&gt;Token设计&lt;/h3&gt;
&lt;p&gt;Token单元将会记录下面内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类型：&lt;code&gt;TokenType&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;具体内容：String&lt;/li&gt;
&lt;li&gt;所在文件行数：Integer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;TokenType&lt;/code&gt;是一个枚举类，包含了所有类型的Token名称，如IDENFR、INTCON、STRCON等&lt;/p&gt;
&lt;h3 id=&#34;分析程序设计&#34;&gt;分析程序设计&lt;/h3&gt;
&lt;p&gt;使用now记录当前所在字符串位置，&lt;code&gt;lineNum&lt;/code&gt;记录行号。&lt;/p&gt;
&lt;p&gt;每当读取到\n，行数+1&lt;/p&gt;
&lt;p&gt;自动机会判断读取的字符，分别进入&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单词分析：读取一个完整的以字母开头可包含数字的词汇，并判断是否是保留字，输出Token&lt;/li&gt;
&lt;li&gt;数字分析：读取一个整数。&lt;/li&gt;
&lt;li&gt;注释分析：综合判断是注释还是乘除法，如果是注释则中间内容全部不记录，乘除法会输出Token&lt;/li&gt;
&lt;li&gt;符号分析：综合分析各种单双符号，输出Token&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;错误处理&#34;&gt;错误处理&lt;/h3&gt;
&lt;p&gt;如果遇到&lt;code&gt;&amp;amp;&lt;/code&gt;或者&lt;code&gt;|&lt;/code&gt;以单字符形式出现，则调用错误处理器，输出所在行号，错误类型为：&lt;strong&gt;a&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;语法分析设计&#34;&gt;语法分析设计&lt;/h2&gt;
&lt;h3 id=&#34;Block设计&#34;&gt;Block设计&lt;/h3&gt;
&lt;p&gt;Block是语法树的基本组成单元。&lt;/p&gt;
&lt;p&gt;Block根据编译文法所撰写，包含从&lt;code&gt;AddExp&lt;/code&gt;到&lt;code&gt;VarDefBlock&lt;/code&gt; 总共35个语法单元&lt;/p&gt;
&lt;p&gt;每个Block中记录的数据各不相同，&lt;/p&gt;
&lt;p&gt;都拥有构造方法用于记录数据，&lt;/p&gt;
&lt;p&gt;还拥有一个print方法，用于根据记录的数据，打印语法树到文件，并递归调用子模块。&lt;/p&gt;
&lt;h3 id=&#34;分析程序设计-2&#34;&gt;分析程序设计&lt;/h3&gt;
&lt;p&gt;分析程序会接受到词法分析中产生的&lt;code&gt;tokenList&lt;/code&gt;进行语法分析。&lt;/p&gt;
&lt;p&gt;语法分析根据文法总共有从 &lt;code&gt;ComplieUnit&lt;/code&gt; 到 &lt;code&gt;ConstExp&lt;/code&gt; 34个分析单元，&lt;/p&gt;
&lt;p&gt;语法分析将会从&lt;code&gt;CompUnit&lt;/code&gt;开始分析，每个分析单元都会根据自身文法，递归调用子分析单元。&lt;/p&gt;
&lt;p&gt;当出现需要分析的单元为&lt;code&gt;Token&lt;/code&gt;时候，调用&lt;code&gt;getToken&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getToken&lt;/code&gt;会根据文法对应位置的token类型，判断是否有误，有误则输出错误，没有则输出Token。&lt;/p&gt;
&lt;p&gt;分析完毕后，会得到一颗以&lt;code&gt;CompileUnitBlock&lt;/code&gt;为根的语法树，Parser会输出这个语法树给Compiler主程序，打印到对应文件，并给后续进一步操作。&lt;/p&gt;
&lt;h3 id=&#34;错误处理-2&#34;&gt;错误处理&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;public Token getToken(TokenType tokenType)&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;在该方法中，会自动处理错误，如果&lt;code&gt;tokenType&lt;/code&gt;是语法期望的token类型，如果与当前对应token的类型相同则没有问题，正常输出；如果不同，说明缺失了对应符号，根据缺失的符号类型，返回对应错误：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺失&lt;code&gt;;&lt;/code&gt;错误类型为 &lt;strong&gt;i&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;缺失&lt;code&gt;)&lt;/code&gt;错误类型为 &lt;strong&gt;j&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;缺失&lt;code&gt;]&lt;/code&gt;错误类型为 &lt;strong&gt;k&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;语义分析设计&#34;&gt;语义分析设计&lt;/h2&gt;
&lt;h3 id=&#34;符号表结构&#34;&gt;符号表结构&lt;/h3&gt;
&lt;p&gt;为了放置符号，设计了符号表SymbolTable&lt;/p&gt;
&lt;p&gt;其中Symbol作为符号，记录单个符号，可以通过&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;tableId&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//记录符号位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; isFunc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; dimension;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; BType bType;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; isConst;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//为了记录函数中的参数，还需要&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; List&amp;lt;Symbol&amp;gt; funcParams = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;四个值来定义符号类型。&lt;/p&gt;
&lt;p&gt;SymbolTable类作为一层的符号表，用以存储当前层下的所有符号。符号表将会按照顺序存储在LinkedHashMap中，其中键是Token，值是Symbol。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; id; &lt;span class=&#34;comment&#34;&gt;//符号表id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; fatherId;  &lt;span class=&#34;comment&#34;&gt;//符号表父层id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; LinkedHashMap&amp;lt;String,Symbol&amp;gt; directory = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LinkedHashMap&lt;/span&gt;&amp;lt;&amp;gt;(); &lt;span class=&#34;comment&#34;&gt;//存储符号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; isFunc;&lt;span class=&#34;comment&#34;&gt;//是否是因为函数声明而建立的一层符号表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; BType bType;&lt;span class=&#34;comment&#34;&gt;//如果是因为函数声明而建立的一层符号表，记录函数返回类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//虽然函数声明的符号也会被上一层符号表记录，但是这样重复记录在此处可以方便后续分析程序调用。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;语义分析程序&#34;&gt;语义分析程序&lt;/h3&gt;
&lt;p&gt;语义分析程序使用&lt;code&gt;List&amp;lt;SymbolTable&amp;gt;&lt;/code&gt;用于存储符号表，其中程序的每一层都是一张符号表。&lt;/p&gt;
&lt;p&gt;变量tableId用于记录当前位于的符号表。&lt;/p&gt;
&lt;p&gt;当分析程序运行到新的一层时，会调用addSymbolTable，新建一层符号表，并将刚才的符号表Id作为父层记录，随后更新Id为当前List总表数量+1。&lt;/p&gt;
&lt;p&gt;当分析程序退出一层时，调用removeSymbolTable，此方法并不会删除符号表，而是将tableId改为当前符号表的父层Id。&lt;/p&gt;
&lt;p&gt;这样经过分析后，可以按照顺序输出符号表的内容。&lt;/p&gt;
&lt;p&gt;分析会从语义分析中得到的compUnit开始按照树状分析，当运行至需要修改符号表内容时，修改符号表。&lt;/p&gt;
&lt;h3 id=&#34;错误处理-3&#34;&gt;错误处理&lt;/h3&gt;
&lt;p&gt;错误处理是语义分析的关键。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;b-名字重定义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在所有def处进行判断，从当前符号表向父级递归查询是否有重复定义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c-未定义的名字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在非定义语句出现Ident时，需要从当前符号表向父级递归查询是否有定义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;d-函数参数个数不匹配&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ident &#39;(&#39; [FuncRParams] &#39;)&#39;&lt;/code&gt;文法中，查询ident对应函数的变量个数，与&lt;code&gt;FuncRParams&lt;/code&gt;中变量个数对比&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;e-函数参数类型不匹配&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ident &#39;(&#39; [FuncRParams] &#39;)&#39;&lt;/code&gt;文法中，查询ident对应函数的变量类型，与&lt;code&gt;FuncRParams&lt;/code&gt;中变量类型对比&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;f-无返回值的函数存在不匹配的return语句&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Stmt语句的return类型中，从当前符号表向父级递归查询距离自身最近的一层函数位置，判断该函数类型。如果是void且return语句后跟了exp，则报错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;g-有返回值的函数缺少return语句&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Block文法中，判断Block末尾最后一个BlockItem是否是Stmt中的return类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;h-不能改变常量的值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出现形如&lt;code&gt;LVal &#39;=&#39; Exp&lt;/code&gt;的语句时，判断&lt;code&gt;Lval&lt;/code&gt;是否时常量，如果是常量则有误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;l-printf中格式字符与表达式个数不匹配&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据%d、%c来判断格式字符与&lt;code&gt;expBlockList&lt;/code&gt;表达式个数是否相等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;m-在非循环块中使用break和continue语句&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为语义分析程序设置一个全局变量int类型的forLoop，用于记录当前在几层循环之下。当进入for语句，将forLoop+1，当运行完For语句中Stmt的分析后将forLoop-1。在Stmt语句出现Continue或Break后，如果forLoop==0，则说明有误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;语义分析难点&#34;&gt;语义分析难点&lt;/h3&gt;
&lt;p&gt;在语义分析的错误处理中&lt;code&gt;d-函数参数个数不匹配&lt;/code&gt;和&lt;code&gt;e-函数参数类型不匹配&lt;/code&gt;两种类型的错误分析最为复杂。&lt;/p&gt;
&lt;p&gt;当函数运行到&lt;code&gt;Ident &#39;(&#39; [FuncRParams] &#39;)&#39;&lt;/code&gt;文法时，先从符号表里获取ident对应的符号，如果不是函数，则报错，类型为e。&lt;/p&gt;
&lt;p&gt;随后判断&lt;code&gt;symbol.funcParams&lt;/code&gt;与&lt;code&gt;FuncRParams&lt;/code&gt;中变量个数是否都为空或者相同，否则报错，类型为d。&lt;/p&gt;
&lt;p&gt;分析程序通过&lt;code&gt;getFuncParamInExp&lt;/code&gt;方法，寻找&lt;code&gt;FuncRParams.ExpBlock&lt;/code&gt;中的变量，并记录其在符号表中的对应Symbol。&lt;/p&gt;
&lt;p&gt;最后依次对比 函数符号Ident中的变量类型与 &lt;code&gt;FuncRParams&lt;/code&gt;中对应的变量类型是否一致，判断是否有e类型错误。&lt;/p&gt;
&lt;h2 id=&#34;中间代码生成设计&#34;&gt;中间代码生成设计&lt;/h2&gt;
&lt;h3 id=&#34;数据结构&#34;&gt;数据结构&lt;/h3&gt;
&lt;p&gt;LLVM中，一切皆为Value，数据结构中的各种组件都继承自Value。&lt;/p&gt;
&lt;p&gt;其中Const继承自Value，继承了Const的ConstArray和ConstInt负责存储变量的值&lt;/p&gt;
&lt;p&gt;GlobalVar负责存储全局变量，局部变量只会通过AllocaInst表示&lt;/p&gt;
&lt;p&gt;Type负责记录变量的类型，&lt;/p&gt;
&lt;p&gt;Function负责记录函数，每一个Function中含有若干BasicBlock，每一BasicBlock含有若干Instruction。&lt;/p&gt;
&lt;p&gt;BasicBlock是函数中的基本块，记录了自己的父块和自己包含的指令集合&lt;/p&gt;
&lt;p&gt;Instruction记录基本块中的一条指令，Instruction继承自User。User包含了变量operandList，用于存储指令中使用的Value。Instruction则记录自己位于的基本块以及此指令的操作符。&lt;/p&gt;
&lt;h3 id=&#34;Type设计&#34;&gt;Type设计&lt;/h3&gt;
&lt;p&gt;IntergerType包含i1、i8和i32，表明自身是bool型、char型还是32位int型。&lt;/p&gt;
&lt;p&gt;ArrayType作为数组类型，会记录自身的IntergerType，以及数组长度。&lt;/p&gt;
&lt;p&gt;FunctionType是函数类型，记录返回值的类型、每个参数的类型。&lt;/p&gt;
&lt;p&gt;PointerType是指针类型，记录该指针指向的类型targetType。&lt;/p&gt;
&lt;p&gt;LabelType是给BasicBlock使用的，用于标识基本块跳转的标签。&lt;/p&gt;
&lt;p&gt;VoidType是空值，仅标明自身是void类型&lt;/p&gt;
&lt;h3 id=&#34;Value设计&#34;&gt;Value设计&lt;/h3&gt;
&lt;p&gt;Value作为LLVM数据结构的根基，包含了下面变量：&lt;/p&gt;
&lt;p&gt;name：记录value的名字，部分value比如instruction是没有名字的&lt;/p&gt;
&lt;p&gt;type：记录变量的类型&lt;/p&gt;
&lt;p&gt;REG_NUM：记录在当前函数中这条Value的寄存器编号&lt;/p&gt;
&lt;p&gt;id： Value对应的编号，每个Value的编号都不相同。作为Value的标识&lt;/p&gt;
&lt;p&gt;Value含有方法GetNameId，用于获取唯一编号，可以作为标识记录。&lt;/p&gt;
&lt;h4 id=&#34;Const设计&#34;&gt;Const设计&lt;/h4&gt;
&lt;p&gt;Const继承自Value，并作为ConstInt和ConstArray的主类。其中ConstInt负责记录变量中的数值，比如在非数组型的GlobalVar中，会有一个ConstInt记录数值。ConstInt只记录数值，不会记录类型，所以char型的会转化成对应ascii编码。比如’a’会被以97记录。&lt;/p&gt;
&lt;p&gt;ConstArray记录一个数组变量的值。ConstArray中包含了一个记录ConstInt的List，并记录了该Array的类型。在声明变量时，初始值若全为0，ConstArray会调用zeroinitializer，当该Array是i8类型，则会以字符串的形式声明。&lt;/p&gt;
&lt;h4 id=&#34;GlobalVar设计&#34;&gt;GlobalVar设计&lt;/h4&gt;
&lt;p&gt;GlobalVar是全局变量。包含了一个布尔值用于记录自身是否是常量，并含有一个value，记录自身的数值。GlobalVar本身的Type是一个指针类型，指向对应的Integer或者Array。GlobalVar只会在Function外声明。&lt;/p&gt;
&lt;h4 id=&#34;Function设计&#34;&gt;Function设计&lt;/h4&gt;
&lt;p&gt;function将会记录自身的所有basicBlock，自身的所有参数、以及记录自己是否是库函数。function在创建时，会自动将REG_NUMBER清零，重新在函数中记录新的reg。&lt;/p&gt;
&lt;h4 id=&#34;BasicBlock设计&#34;&gt;BasicBlock设计&lt;/h4&gt;
&lt;p&gt;basicBlock作为函数中的基本块，包含一个变量，记录自身的parentFunction，还包含一个LinkedList记录instruction列表。&lt;/p&gt;
&lt;h3 id=&#34;Instruction设计&#34;&gt;Instruction设计&lt;/h3&gt;
&lt;p&gt;instruction时基本块中的一条指令。Instruction继承自User，所以会包含一个列表，用于记录自身使用的所有Value。作为指令，将会记录指令自身的类型Operator，还会记录自己位于的基本块parentBlock。&lt;/p&gt;
&lt;p&gt;指令包含如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alloca，用于在函数内建立局部变量&lt;/li&gt;
&lt;li&gt;GetElementPointer，用于获取数组中某个值&lt;/li&gt;
&lt;li&gt;LoadInst，用于获取全局变量对应的指针&lt;/li&gt;
&lt;li&gt;StoreInst，用于将临时寄存器存入全局变量&lt;/li&gt;
&lt;li&gt;BrInst，用于跳转到对应BasicBlock&lt;/li&gt;
&lt;li&gt;CallInst，用于调用函数，向函数传参。&lt;/li&gt;
&lt;li&gt;RetInst，作为函数的返回语句，返回空值void或一个IntergerType。&lt;/li&gt;
&lt;li&gt;BinaryInst，包含如加减乘除等运算的三元式，也包含icmp三元式用于关系运算。&lt;/li&gt;
&lt;li&gt;ConvInst，包含Zext和Trunc，其中Zext用于数位扩展，将会把i1和i8扩展为i32，Trunc用于数位截断，将会把i32截断为i8&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;工厂模式设计&#34;&gt;工厂模式设计&lt;/h3&gt;
&lt;p&gt;由于此次任务中Value的种类非常多，如果将Value的建立不做封装，将会让代码变得非常冗余，所欲使用一个BuildFactory用于构造不同种类的Value，并进行一些基本的处理&lt;/p&gt;
&lt;h3 id=&#34;中间代码生成程序&#34;&gt;中间代码生成程序&lt;/h3&gt;
&lt;p&gt;在中间代码生成程序中，将会根据语法树进行进行遍历。IrBuilder中含有一个新的SymbolTableList，用于记录Value的符号表，在建立全局变量和局部变量时，将Value作为符号加入符号表中，方便后续使用。&lt;/p&gt;
&lt;p&gt;每当创建一个新的BasicBlock，符号表数组都会新建一个符号表，用于记录当前基本块中定义的符号。需要使用某个符号的时候，将会从当前符号表递归向父级符号表分析直到根节点。由于已经有过先前语义分析的错误处理的保证，所以一定能在符号表中找到相应符号。&lt;/p&gt;
&lt;p&gt;中间代码生成程序中，为了防止函数传参或需要返回的值过多，使用全局变量用于传递部分参数和记录返回值，比如tmpValue、tmpType等。&lt;/p&gt;
&lt;p&gt;对于全局变量的定义，定义时重点关注初始化部分，若有初始化需要将初始化的值计算出来，直接赋值给全局变量。&lt;/p&gt;
&lt;p&gt;而在函数内部的变量定义，只需要使用AllocaInst进行定义，初始化的过程使用普通的运算进行初始化。&lt;/p&gt;
&lt;p&gt;中间代码生成中，循环的设计比较容易出错，我这里采用这种放肆进行设计&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x27;for&amp;#x27; &amp;#x27;(&amp;#x27; [ForStmt] &amp;#x27;;&amp;#x27; [Cond] &amp;#x27;;&amp;#x27; [ForStmt] &amp;#x27;)&amp;#x27; Stmt &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    forStmt1;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    br forBlock&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    condBlock1:                                       &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cond ? br forBlock, br finalBlock;                &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    forBlock:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	Stmt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	br condBlock2;                                    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    condBlock2:                                       &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        forStmt2;                                     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cond ? br forBlock, br finalBlock;                &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    finalBlock;                                       &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意，如果在Stmt中遇到continue语句，要跳转到condBlock2，如果遇到Break则跳转到finalBlock。&lt;/p&gt;
&lt;p&gt;类型转换相对较为容易，只需要在Store、向函数传参、函数返回值的时候判断类型并判断是否进行Trunc和Zext。Zext还有在BinaryInst中当条件判断左右类型不一致时使用，将条件两边都扩展为i32进行计算。&lt;/p&gt;
&lt;p&gt;函数内使用数组和数组定义也比较麻烦，因为需要使用GetElementPointer指令来调用数组，所以需要tmpOffset进行记录现在位于数组的位置，还需要注意到该条指令调用诸如a[n]时格式如下&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;%&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; = getelementptr [&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; x i32], [&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; x i32]* @a, i32 &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, i32 n&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;中间代码的程序会在程序中逐步建立以IrModule作为根节点，Value作为分支的中间代码树，方便后续目标代码的翻译。&lt;/p&gt;
&lt;h2 id=&#34;目标代码生成设计&#34;&gt;目标代码生成设计&lt;/h2&gt;
&lt;h3 id=&#34;Reg设计&#34;&gt;Reg设计&lt;/h3&gt;
&lt;p&gt;Reg作为mips的寄存器，包含一个String值记录是&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mtext&gt;寄存器还是&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;gp寄存器还是&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;寄&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;存&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;器&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;还&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;是&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;sp寄存器。offset用于记录当前位于的sp寄存器偏移量。其中&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mtext&gt;用于调用全局变量，&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;gp用于调用全局变量，&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;用&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;于&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;调&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;用&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;全&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;局&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;变&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;量&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;sp寄存器用于记录局部变量。$sp可以通过不同偏移量记录不同的数据。&lt;/p&gt;
&lt;h3 id=&#34;目标代码翻译程序&#34;&gt;目标代码翻译程序&lt;/h3&gt;
&lt;p&gt;在目标代码翻译开始后，先开始进行Data部分的翻译，Data部分包含全局变量和库函数定义。随后进入.text部分，在text最开头&amp;quot;jal main&amp;quot;指令，最后再进行函数定义。&lt;/p&gt;
&lt;p&gt;在data部分，我将i32和i8全都定义为.word进行记录，这样子比较方便后续调用（虽然会占用很多空间就是了）。如果是非数组变量仅需使用.word加上数值，如果是数组变量，需要计算数组的大小然后定义存储的空间，如果数组未初始化，可以直接使用.space，如果初始化了，则需要使用.word给每一个变量赋初始值。&lt;/p&gt;
&lt;p&gt;定义了全局变量后，下一步需要定义库函数。库函数仅包含GETINT()、GETCHAR()、PUTINT()、PUTCH()、PUTSTR()，其实只需要使用li给$v0赋上系统调用的值后，再进行syscall即可。&lt;/p&gt;
&lt;p&gt;接下来进如BuildFunction函数中。在这个函数中，会先读取参数，随后进行参数存入对应的sp寄存器偏移量位置处。在每次jal进入函数前，程序会将sp减去当前偏移量，这样在函数中就会从偏移量0开始使用sp寄存器，在出函数后，恢复寄存器偏移量。函数里调用产生的临时变量确实会消失不过也不需要那些，仅仅需要从$ra 中得到返回值即可。&lt;/p&gt;
&lt;h3 id=&#34;Translator设计&#34;&gt;Translator设计&lt;/h3&gt;
&lt;p&gt;translator包含了将中间代码翻译为mips的基本函数。&lt;/p&gt;
&lt;p&gt;其中含有一个Map mem用于记录一个变量（变量名可以通过中间代码中Value获取唯一的编号）以及变量对应的Reg。&lt;/p&gt;
&lt;p&gt;在translator中，为每一条中间代码的instruction撰写对应的翻译文法&lt;/p&gt;
&lt;p&gt;translator中包含几个基本函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;addGlobal，用于向mem中添加全局变量的记录，仅记录符号名字。&lt;/li&gt;
&lt;li&gt;addSp和addSpArray，负责像mem中添加符号栈sp的记录，记录对应符号的偏移量。其中是Array型的时候，需要要计算数组的偏移量。&lt;/li&gt;
&lt;li&gt;load，负责处理将变量或sp栈内内容临时存储在t0、t1寄存器中。&lt;/li&gt;
&lt;li&gt;store，负责将t0、t1等寄存器中的值，存入sp栈内或全局变量内。&lt;/li&gt;
&lt;li&gt;translate函数，负责根据当前所翻译的指令，调用不同的翻译方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结感想&#34;&gt;总结感想&lt;/h2&gt;
&lt;p&gt;经过了一学期的编译撰写，也是终于将编译器完成了。&lt;/p&gt;
&lt;p&gt;从最开始的不敢想象该怎么写，到一步步将编译器完成，也是收获颇丰。最开始的词法分析部分算是比较简单，只需要写一个简单的词法分析自动机就可以快速完成。&lt;/p&gt;
&lt;p&gt;从语法分析开始就逐步变得困难了…当时听说要建立四五十个类我还在想为什么要这么麻烦，只到在理论课上学习了如何使用递归下降子程序法建立语法树，才意识到语法树的确需要给每个语法模块都建立一个单独的类。经过理论课的学习，建立语法分析树变得比较简单，仅仅需要理解如何使用递归下降分析即可完成。&lt;/p&gt;
&lt;p&gt;语义分析中，我根据语法树建立了一个简单的符号表，也进行了错误的分析。通过错误分析，我逐步认识到了符号表的建立方式，同时还修复了在词法分析和语法分析中的部分小错误（当时没有发现但是居然能过测试点）&lt;/p&gt;
&lt;p&gt;中间代码生成乃是编译大作业的一大高山，写了我足足三周才写完。中间代码生成光是第一步理解LLVM的结构就耗时一星期才初步了解完全部结构，光是复杂的Value、User、Instruction继承关系让我汗流浃背了。经过一周的初步理解，我才发现真正的难点在于如何将语法树转化成中间代码。从全局变量的定义到函数内部的生成，每一步都不简单。尤其是使用数组时候的GEP还有for循环、if等条件判断中块与块间的跳转，搞得我晕头转向。不过经过不懈努力，也是在结束之前将LLVM成果拿下。LLVM生成出来，终于能在Linux虚拟机上配置的环境中成功运行了&lt;/p&gt;
&lt;p&gt;MIPS相对于LLVM的生成还是较为简单的。LLVM的结构与MIPS已经比较相近。在MIPS中，最大的困难是理解对$sp的使用。在经过一周的奋战后，MIPS也是拉下帷幕。生成出来的MIPS的确能在MARS上正确运行，让我感到十分有成就感。&lt;/p&gt;
&lt;p&gt;通过这次编译器的撰写，对编译原理课大大加深了理解，感觉这是大学最有成就感的一次迭代作业，感觉比上学期的操作系统实验有意思多了（主要是上学期操作系统太难了看不太懂），总的来说，编译原理是一门顶尖好课: )&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.unfinished.top/2024/12/17/%E6%88%91%E8%A6%81%E6%88%90%E4%B8%BA%E7%BC%96%E8%AF%91%E9%AB%98%E6%89%8B/</guid>
            <title>我要成为编译高手</title>
            <link>https://blog.unfinished.top/2024/12/17/%E6%88%91%E8%A6%81%E6%88%90%E4%B8%BA%E7%BC%96%E8%AF%91%E9%AB%98%E6%89%8B/</link>
            <category>大学</category>
            <category>总结</category>
            <category>编译原理</category>
            <pubDate>Tue, 17 Dec 2024 15:17:09 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;%E6%88%91%E8%A6%81%E6%88%90%E4%B8%BA%E9%AB%98%E6%89%8B.jpg&#34; alt=&#34;我要成为高手&#34;&gt;&lt;/p&gt;
&lt;h1&gt;文法&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mtext&gt;符号串乘积&lt;/mtext&gt;&lt;mo stretchy=&#34;false&#34;&gt;{&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;}&lt;/mo&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;{&lt;/mo&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;}&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;{&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mtext&gt;，&lt;/mtext&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mtext&gt;，&lt;/mtext&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mtext&gt;，&lt;/mtext&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;}&lt;/mo&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mtext&gt;幂运算&lt;/mtext&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;msup&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;ε&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mtext&gt;正闭包&lt;/mtext&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;/msup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;∪&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mo&gt;∪&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mtext&gt;闭包&lt;/mtext&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;/msup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;∪&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;∪&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mo&gt;∪&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;符号串乘积\{a,b\} * \{c,d\} = \{ac，ad，bc，bd\}\\
幂运算\\
A^0={ε},A^1 = A ,A^2 = AA\\
正闭包:
A^+=A^1∪A^2...∪A^n\\
闭包:
A^*=A^0∪A^1∪A^2...∪A^n
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;符&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;号&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;串&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;乘&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;积&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;幂&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;运&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;算&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8641079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8641079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.0585479999999998em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;ε&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8641079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.0585479999999998em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8641079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;正&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;闭&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;包&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.821331em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.821331em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mbin mtight&#34;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8641079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8641079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∪&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8641079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8641079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∪&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7143919999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.7143919999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;闭&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;包&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.738696em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.738696em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mbin mtight&#34;&gt;∗&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8641079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8641079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∪&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8641079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8641079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∪&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8641079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8641079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∪&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7143919999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.7143919999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Vn：非终结符号集&lt;/p&gt;
&lt;p&gt;Vt：终结符号集&lt;/p&gt;
&lt;p&gt;P：产生式或规则的集合&lt;/p&gt;
&lt;p&gt;Z：开始符号（识别符号） Z∈Vn&lt;/p&gt;
&lt;h3 id=&#34;基本概念&#34;&gt;基本概念&lt;/h3&gt;
&lt;h4 id=&#34;推导&#34;&gt;推导&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;image-20241210135553750.png&#34; alt=&#34;image-20241210135553750&#34; style=&#34;zoom:67%;&#34; /&gt; 一步或多步&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1733810193966(1).png&#34; alt=&#34;1733810193966(1)&#34; style=&#34;zoom: 67%;&#34; /&gt; 零步一步或多步&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最右推导&lt;/strong&gt;：规范&lt;/p&gt;
&lt;h4 id=&#34;句子句型&#34;&gt;句子句型&lt;/h4&gt;
&lt;p&gt;句型：Z零步一步或多步推导到x&lt;/p&gt;
&lt;p&gt;句子：Z一步或多步推导到x，且x内符号都是终结符&lt;/p&gt;
&lt;p&gt;语言：所有句子的集合 L(G[Z])&lt;/p&gt;
&lt;p&gt;若两个文法语言相同，则文法等价。&lt;/p&gt;
&lt;h4 id=&#34;短语、句柄&#34;&gt;短语、句柄&lt;/h4&gt;
&lt;p&gt;短语是相对于一个&lt;strong&gt;句型&lt;/strong&gt;的&lt;/p&gt;
&lt;p&gt;简单短语要求只有一步推导&lt;/p&gt;
&lt;p&gt;句柄是最左简单短语&lt;/p&gt;
&lt;h4 id=&#34;规约&#34;&gt;规约&lt;/h4&gt;
&lt;p&gt;按照最左简单短语进行规约为规范规约。&lt;/p&gt;
&lt;p&gt;规范：&lt;strong&gt;最左规约&lt;/strong&gt;，&lt;strong&gt;最右推导&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;递归文法&#34;&gt;递归文法&lt;/h3&gt;
&lt;p&gt;U::= Uy，左递归&lt;/p&gt;
&lt;p&gt;U::= xU，右递归&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;左递归不能用自顶向下&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;二义性&#34;&gt;二义性&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;一个文法的某一句子存在两棵不同的语法树，则该文法是二义性的&lt;/li&gt;
&lt;li&gt;若一个文法的某句子存在两个不同的规范推导，则该文法是二义性的&lt;/li&gt;
&lt;li&gt;若一个文法的某规范句型的句柄不唯一，则该文法是二义性的&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;压缩文法&#34;&gt;压缩文法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;U::=U&lt;/strong&gt;的文法是有害的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;规则的左部非终结符不出现在任何句型中&lt;/strong&gt;的文法是无用的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无有害规则或多余规则&lt;/strong&gt;的文法是&lt;strong&gt;压缩过的&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;文法类型&#34;&gt;文法类型&lt;/h3&gt;
&lt;p&gt;0型：左部和右部都可以是符号串；一个短语可以产生另一个短语；可以被&lt;strong&gt;图灵机&lt;/strong&gt;接受&lt;/p&gt;
&lt;p&gt;1型：上下文有关文法，&lt;strong&gt;xUy::= xuy&lt;/strong&gt; ; 可以被&lt;strong&gt;线性界限自动机接受&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2型：上下文无关文法，&lt;strong&gt;U::= u&lt;/strong&gt;，U∈Vn ,  n∈V* ； 可以被&lt;strong&gt;下推自动机&lt;/strong&gt;接受&lt;/p&gt;
&lt;p&gt;3型：正则文法，&lt;strong&gt;U::=t&lt;/strong&gt;，U::=Wt（左线性）或U::=tW（右线性） &lt;strong&gt;其中U、W∈Vn，t∈Vt&lt;/strong&gt;，可以被&lt;strong&gt;有穷自动机&lt;/strong&gt;接受&lt;/p&gt;
&lt;h1&gt;词法分析&lt;/h1&gt;
&lt;h3 id=&#34;状态图&#34;&gt;状态图&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;左线性文法&lt;/strong&gt;状态图：&lt;/p&gt;
&lt;p&gt;设置开始状态S，若Q::=t, &lt;img src=&#34;1733812726285.png&#34; alt=&#34;1733812726285&#34; style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;若Q::=Rt，&lt;img src=&#34;1733812771271.png&#34; alt=&#34;1733812771271&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;img src=&#34;1733813469367.png&#34; alt=&#34;1733813469367&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h3 id=&#34;正则表达式&#34;&gt;正则表达式&lt;/h3&gt;
&lt;p&gt;运算符&lt;/p&gt;
&lt;p&gt;|：或&lt;/p&gt;
&lt;p&gt;*或{ }：重复&lt;/p&gt;
&lt;h3 id=&#34;DFA&#34;&gt;DFA&lt;/h3&gt;
&lt;img src=&#34;1733814606183.png&#34; alt=&#34;1733814606183&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h3 id=&#34;NFA（非确定）&#34;&gt;NFA（非确定）&lt;/h3&gt;
&lt;p&gt;一个状态经过一个终结符可以到多个状态，可以输入空值&lt;/p&gt;
&lt;img src=&#34;1733814412975.png&#34; alt=&#34;1733814412975&#34; style=&#34;zoom: 67%;&#34; /&gt; 
&lt;h3 id=&#34;生成NFA（和状态图不一样）&#34;&gt;生成NFA（和状态图不一样）&lt;/h3&gt;
&lt;p&gt;用右线性文法，因为左线性会死循环&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A→tB&lt;/strong&gt;：&lt;img src=&#34;1733815716718.png&#34; alt=&#34;1733815716718&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A→t：则A经过t到终结状态&lt;/p&gt;
&lt;img src=&#34;1733816009576.png&#34; alt=&#34;1733816009576&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;img src=&#34;1733816058396.png&#34; alt=&#34;1733816058396&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;p&gt;或&lt;/p&gt;
&lt;img src=&#34;1733816105599.png&#34; alt=&#34;1733816105599&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h3 id=&#34;NFA的确定化&#34;&gt;NFA的确定化&lt;/h3&gt;
&lt;p&gt;1.确定集合I的&lt;strong&gt;ε-闭包&lt;/strong&gt;：I以及从I经过ε弧能到的所有状态集合&lt;/p&gt;
&lt;p&gt;2.确定闭包的Ia、Ib、…&lt;/p&gt;
&lt;img src=&#34;1733815278257.png&#34; alt=&#34;1733815278257&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;p&gt;3.得到新的状态图&lt;/p&gt;
&lt;img src=&#34;1733815410213.png&#34; alt=&#34;1733815410213&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h3 id=&#34;最小化&#34;&gt;最小化&lt;/h3&gt;
&lt;p&gt;消除多余状态：肉眼看，删除不会到达的状态&lt;/p&gt;
&lt;p&gt;划分等价状态：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将状态先分为终结状态和非终结状态&lt;/li&gt;
&lt;li&gt;在每个区域中看哪些状态经过符号后到达的状态等价&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;语法分析&lt;/h1&gt;
&lt;h2 id=&#34;自顶向下分析&#34;&gt;自顶向下分析&lt;/h2&gt;
&lt;p&gt;不能有左递归！&lt;/p&gt;
&lt;p&gt;要消除左递归：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用BNF改写：
&lt;ol&gt;
&lt;li&gt;U::= xy|xw → U::=x(y|w)&lt;/li&gt;
&lt;li&gt;T∷= T * F | T / F | F  → T∷= F { * F | / F }&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;左递归改成右递归：
&lt;ol&gt;
&lt;li&gt;P::= Pa|b  →  P ::= bP’     P’ ::=aP’ | ε&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;消除一般左递归：&lt;/p&gt;
&lt;img src=&#34;1733819340540.png&#34; alt=&#34;1733819340540&#34; style=&#34;zoom: 67%;&#34; /&gt; 
&lt;img src=&#34;1733819367290(1).png&#34; alt=&#34;1733819367290(1)&#34; style=&#34;zoom: 67%;&#34; /&gt; 
&lt;p&gt;消除回溯问题，将xV|xU改成 x(V|U)，并尽力保证FIRST(V)和FIRST(U)不相交。&lt;/p&gt;
&lt;p&gt;无法消除回溯的话，可以超前扫描几个符号&lt;/p&gt;
&lt;h3 id=&#34;递归下降子程序&#34;&gt;递归下降子程序&lt;/h3&gt;
&lt;p&gt;简单&lt;/p&gt;
&lt;img src=&#34;1733819654619.png&#34; alt=&#34;1733819654619&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h3 id=&#34;LL-1-分析法&#34;&gt;LL(1)分析法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;自左向右扫描&lt;/strong&gt;符号串&lt;/p&gt;
&lt;h4 id=&#34;First、Follow集&#34;&gt;First、Follow集&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;若Xi∈Vt，则First(Xi)={Xi}&lt;/p&gt;
&lt;p&gt;若Xi∈Vn，Xi::= a…| ε, First(Xi) = {a, ε}&lt;/p&gt;
&lt;p&gt;若Xi∈Vn ，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Xi::= y1y2…yk，将FIRST(y1 ) – {ε} 加入First（Xi）&lt;/li&gt;
&lt;li&gt;若ε ∈ FIRST( y1 ) ，则将FIRST(y2 ) – {ε} 加入&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;li&gt;若全都有ε，First集加入ε&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Follow&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;若S为识别符号，则 # 加入Follow（S）&lt;/p&gt;
&lt;p&gt;若 A ::= αBβ 则把 &lt;strong&gt;FIRST(β)-{ε}&lt;/strong&gt; 加入到 Follow（B）&lt;/p&gt;
&lt;p&gt;若 A ::= αBβ β能推出ε  或 A::= αB ，则把**Follow(A)**加入到Follow(B)&lt;/p&gt;
&lt;h4 id=&#34;构造分析表&#34;&gt;构造分析表&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;S ::= A是某规则，a为终结符或#,  把所有 a∈ FIRST( A ) ，M[S, a] 放入该条规则&lt;/li&gt;
&lt;li&gt;若A=ε或 A能推出ε，则把所有 a∈ FOLLOW( S )的 M[S,a]放 S::=ε&lt;/li&gt;
&lt;li&gt;剩下的全是error&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;image-20241214144657328.png&#34; alt=&#34;image-20241214144657328&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;p&gt;如果没有&lt;strong&gt;多重定义&lt;/strong&gt;入口，则是LL(1)文法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LL(1)判断方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果是LL（1），那么当 S::= A1|A2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First(A1) &lt;strong&gt;∩&lt;/strong&gt; First(A2) = Ф&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若A2 是 &lt;strong&gt;ε&lt;/strong&gt;或可推出 &lt;strong&gt;ε&lt;/strong&gt;，那么 First(A1) &lt;strong&gt;∩&lt;/strong&gt; First(S) = Ф&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;执行过程&#34;&gt;执行过程&lt;/h4&gt;
&lt;p&gt;假设E是识别符号&lt;/p&gt;
&lt;p&gt;符号栈开始状态 #E，读入输入串第一个符号&lt;/p&gt;
&lt;p&gt;根据栈顶符号X和输入符号a&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 X ∈ Vt，X=a=#，停止&lt;/li&gt;
&lt;li&gt;若 X ∈ Vt，X=a不等于#，将X退出栈&lt;/li&gt;
&lt;li&gt;若 X ∈ Vt，X不等于a，出错&lt;/li&gt;
&lt;li&gt;若 X ∈ Vn，查表
&lt;ol&gt;
&lt;li&gt;若M[X,a] 为   X∷= U V W，则X弹出，先后将W、V、U入栈（注意顺序，U在栈顶）&lt;/li&gt;
&lt;li&gt;若M[X,a] 为 &lt;strong&gt;X::=ε&lt;/strong&gt; 则把X弹出栈&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自底向上分析&#34;&gt;自底向上分析&lt;/h2&gt;
&lt;h3 id=&#34;算符优先分析&#34;&gt;算符优先分析&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;算符文法不允许两个非终结符相邻&lt;/strong&gt;！&lt;/p&gt;
&lt;img src=&#34;image-20241214161251107.png&#34; alt=&#34;image-20241214161251107&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h4 id=&#34;FirstVT、LastVT&#34;&gt;FirstVT、LastVT&lt;/h4&gt;
&lt;p&gt;… 可以代表任意或为空&lt;/p&gt;
&lt;p&gt;FirstVT( U ) = {b | U→b… 或 U→Vb… ,  b ∈ Vt,  V ∈ Vn}&lt;/p&gt;
&lt;p&gt;LastVT( U ) = {a | U→…a 或 U→…aV ,  a ∈ Vt,  V ∈ Vn}&lt;/p&gt;
&lt;p&gt;构造FirstVT：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果有U::= b… 或 U::= Vb… 则 b∈FIRSTVT( U )&lt;/li&gt;
&lt;li&gt;如果有U::= V…，则所有 b∈FIRSTVT( V )，都有b∈FIRSTVT( U )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;构造LastVT：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果有U::= …a 或 U::= …aV 则 a∈LASTVT( U )&lt;/li&gt;
&lt;li&gt;如果有U::= …V，则所有 a∈LASTVT( V )，都有a∈LASTVT( U )&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;构造优先关系矩阵&#34;&gt;构造优先关系矩阵&lt;/h4&gt;
&lt;p&gt;打不出来，所以下面&lt;/p&gt;
&lt;p&gt;= 代表&lt;img src=&#34;image-20241214164544651.png&#34; alt=&#34;image-20241214164544651&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt; 代表 &lt;img src=&#34;image-20241214164608414.png&#34; alt=&#34;image-20241214164608414&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;gt; 代表&lt;img src=&#34;image-20241214164640513.png&#34; alt=&#34;image-20241214164640513&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;对于每条规则进行处理，&lt;/p&gt;
&lt;p&gt;假设规则为U::=X1 X2 … Xn&lt;/p&gt;
&lt;p&gt;for（i = 1；i&amp;lt;=n-1 ;  i++）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果Xi 和 Xi+1都是Vt，则 Xi = Xi+1&lt;/li&gt;
&lt;li&gt;如果i&amp;lt;=n-2 且 Xi 和 Xi+2都是Vt，但Xi+1是Vn，则Xi = Xi+2&lt;/li&gt;
&lt;li&gt;如果 Xi 是Vt     Xi+1是Vn ，则 Xi&amp;lt; FIRSTVT(Xi+1)中每个符号&lt;/li&gt;
&lt;li&gt;如果 Xi 是Vn     Xi+1是Vt ，则  LASTVT(Xi)中每个符号 &amp;gt; Xi+1&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;素短语&#34;&gt;素短语&lt;/h4&gt;
&lt;p&gt;素短语是一个 至少包含一个终结符号，且除了它自身不含更小的素短语的 短语&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;句柄是最左短语&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最左素短语不一定是句柄！&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20241214171149086.png&#34; alt=&#34;image-20241214171149086&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h4 id=&#34;执行过程-2&#34;&gt;执行过程&lt;/h4&gt;
&lt;p&gt;算符优先文法对最左素短语规约&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&amp;lt;：移进&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;=：移进&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;gt;：规约&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20241214155739805.png&#34; alt=&#34;image-20241214155739805&#34;&gt;&lt;/p&gt;
&lt;img src=&#34;image-20241214160049496.png&#34; alt=&#34;image-20241214160049496&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;h3 id=&#34;LR分析法&#34;&gt;LR分析法&lt;/h3&gt;
&lt;p&gt;哦我的老天&lt;/p&gt;
&lt;p&gt;LR分析法规约的是句柄，算符优先归约的是最左素短语&lt;/p&gt;
&lt;h4 id=&#34;活前缀&#34;&gt;活前缀&lt;/h4&gt;
&lt;p&gt;规范句型是通过规范规约（最左）得到的句型&lt;/p&gt;
&lt;p&gt;对于 αβt ，β表示句柄 ，若αβ = u1u2…ur，那么符号串u1…ui（1&amp;lt;=i&amp;lt;=r）是活前缀&lt;/p&gt;
&lt;h4 id=&#34;构造LR-0&#34;&gt;构造LR(0)&lt;/h4&gt;
&lt;p&gt;1.让文法开始符号的规则只有一条&lt;/p&gt;
&lt;p&gt;2.构造闭包项目集&lt;/p&gt;
&lt;p&gt;3.构造goto&lt;/p&gt;
&lt;p&gt;action构造：&lt;/p&gt;
&lt;p&gt;A→a. 规约&lt;/p&gt;
&lt;p&gt;E’→a. 接受&lt;/p&gt;
&lt;p&gt;A→a.b （b∈ Vt）移进&lt;/p&gt;
&lt;p&gt;A→a.b （b∈ Vn）待约（无动作）&lt;/p&gt;
&lt;p&gt;会有 移进-规约 冲突&lt;/p&gt;
&lt;h4 id=&#34;SLR（0）&#34;&gt;SLR（0）&lt;/h4&gt;
&lt;p&gt;改为看Follow集&lt;/p&gt;
&lt;p&gt;当A→α.     B→α.    X→α.b&lt;/p&gt;
&lt;p&gt;读入符号当 a = b，移进&lt;/p&gt;
&lt;p&gt;a∈Follow（A），A→α&lt;/p&gt;
&lt;p&gt;a∈Follow（B），B→α&lt;/p&gt;
&lt;h1&gt;符号表管理&lt;/h1&gt;
&lt;p&gt;符号表结构：&lt;/p&gt;
&lt;p&gt;名字、特性（类型、值、种类等）&lt;/p&gt;
&lt;p&gt;组织方式：&lt;/p&gt;
&lt;p&gt;统一符号表（不管什么都填入到一个格式的符号表），结构简单&lt;/p&gt;
&lt;p&gt;不同种类建立不同的，节省空间但是不方便&lt;/p&gt;
&lt;p&gt;折中办法：共有信息总结成统一格式，特殊信息用指针连接到附表&lt;/p&gt;
&lt;h3 id=&#34;非分程序结构和符号表&#34;&gt;非分程序结构和符号表&lt;/h3&gt;
&lt;p&gt;可独立进行编译的程序单元是不包含有子模块的单一模块&lt;/p&gt;
&lt;p&gt;作用域：&lt;/p&gt;
&lt;p&gt;子程序名、函数名、公共区域名 —— 全局&lt;/p&gt;
&lt;p&gt;程序单元内变量 —— 局部&lt;/p&gt;
&lt;p&gt;组织方式：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;全局符号表&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;局部符号表&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;分程序结构语言和符号表&#34;&gt;分程序结构语言和符号表&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;模块内可嵌入子模块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作用域：标识符定义时所处于的模块&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;过程或函数说明中定义的标识符（包括形参）其作用域为本过程体。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;循环语句中定义的标识符，其作用域为该循环语句&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20241210170904106.png&#34; alt=&#34;image-20241210170904106&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h4 id=&#34;分程序符号表结构&#34;&gt;分程序符号表结构&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Outern&lt;/th&gt;
&lt;th&gt;Ecount&lt;/th&gt;
&lt;th&gt;Pointer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;Outern：直接外层编号&lt;/p&gt;
&lt;p&gt;Ecount：符号表项个数&lt;/p&gt;
&lt;p&gt;Pointer：该符号表起始位置&lt;/p&gt;
&lt;img src=&#34;image-20241210171349194.png&#34; alt=&#34;image-20241210171349194&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;出块后删除块符号表&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;红框内删了&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20241210171359418.png&#34; alt=&#34;image-20241210171359418&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h1&gt;运行时存储管理&lt;/h1&gt;
&lt;p&gt;栈地址寄存器，该空间位于&lt;strong&gt;高地址&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;静态存储分配&#34;&gt;静态存储分配&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;每个变量所需空间的大小在编译时已知&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在&lt;strong&gt;编译阶段&lt;/strong&gt;由编译程序实现对&lt;strong&gt;存储空间的管理&lt;/strong&gt;，为源程序中的变量分配存储&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;条件：&lt;strong&gt;在&lt;/strong&gt;编译时&lt;/strong&gt;能够确定源程序中变量在运行时的数据空间大小&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不允许指针或动态分配&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不允许递归调用过程&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开辟一数据区，目标地址填入变量的符号表中&lt;/p&gt;
&lt;p&gt;没鸟用，我觉得不考🤓👆&lt;/p&gt;
&lt;h3 id=&#34;动态存储分配&#34;&gt;动态存储分配&lt;/h3&gt;
&lt;p&gt;这个必考🤓👆&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;局部数据区&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;参数区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;display区&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;局部数据区&lt;/strong&gt;：存放局部变量&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数区&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;形参数据区：&lt;strong&gt;显式参数区&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;prev adb：&lt;strong&gt;存放调用模块记录基地址&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ret addr：&lt;strong&gt;返回地址&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ret value：&lt;strong&gt;函数返回值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;display&lt;/strong&gt;区：存放&lt;strong&gt;各外层模块活动记录的基地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1{    2{  }      3{      4{  }    }    } 中，4应当存放AR1和AR3的基地址&lt;/p&gt;
&lt;h4 id=&#34;例题&#34;&gt;例题&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;重点：看call 了谁再加入活动记录&lt;/strong&gt;&lt;/p&gt;
 &lt;img src=&#34;image-20241210175114576.png&#34; alt=&#34;image-20241210175114576&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;img src=&#34;image-20241210175135976.png&#34; alt=&#34;image-20241210175135976&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;p&gt;易错点：&lt;strong&gt;局部变量在参数上面&lt;/strong&gt;，因为其实是从下往上构建的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20241210175147431.png&#34; alt=&#34;image-20241210175147431&#34; style=&#34;zoom: 40%;&#34; /&gt; &lt;img src=&#34;image-20241210175347035.png&#34; alt=&#34;image-20241210175347035&#34; style=&#34;zoom:40%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;数组需要加一个“数组的模块”&lt;/p&gt;
&lt;img src=&#34;image-20241210175451927.png&#34; alt=&#34;image-20241210175451927&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;img src=&#34;1733825146873.png&#34; alt=&#34;1733825146873&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;img src=&#34;1733825169171.png&#34; alt=&#34;1733825169171&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;p&gt;&lt;strong&gt;运行时地址计算&lt;/strong&gt;：考鸡毛，PPT就一页&lt;/p&gt;
&lt;h1&gt;错误处理？&lt;/h1&gt;
&lt;p&gt;就几页PPT，肯定只考小题&lt;/p&gt;
&lt;p&gt;语法错误：不符合语法、词法的错误&lt;/p&gt;
&lt;p&gt;语义错误：不符合语义规则或超越具体计算机系统限制（数据溢出、常数太大；符号表、静态存储溢出；动态存储溢出）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析以后再报告&lt;/strong&gt;：保存错误，全分析完了再打印&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;边分析边报告&lt;/strong&gt;：顾名思义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一般原则：诊断到错误并记录后，跳过当前语法成分继续分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行时错误：下标变量、下标值越界；计算结果溢出；动态存储分配数据区溢出&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;错误局部化处理&lt;/strong&gt;:   发现错误后，尽可能将把错误的影响限制在一个局部的范围避免错误扩散和影响程序其它部分的分析&lt;/p&gt;
&lt;h1&gt;翻译文法&lt;/h1&gt;
&lt;h3 id=&#34;翻译文法概念-、-活动序列&#34;&gt;翻译文法概念 、 活动序列&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;输入文法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没插入动作符号的文法。&lt;/li&gt;
&lt;li&gt;推导产生&lt;strong&gt;输入序列&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;翻译文法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入了动作符号的文法&lt;/li&gt;
&lt;li&gt;推导产生&lt;strong&gt;活动序列&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;**活动序列：**包含 &lt;em&gt;输入序列&lt;/em&gt;、&lt;em&gt;动作序列&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入序列：由终结符组成&lt;/li&gt;
&lt;li&gt;动作序列：由动作符号组成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;翻译文法是&lt;strong&gt;上下文无关文法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;**符号串翻译文法：**输出@后的字符串的文法&lt;/p&gt;
&lt;p&gt;中缀表达式文法→逆波兰表示&lt;/p&gt;
&lt;p&gt;加入动作&lt;img src=&#34;image-20241212201947561.png&#34; alt=&#34;image-20241212201947561&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;属性翻译文法&#34;&gt;属性翻译文法&lt;/h3&gt;
&lt;img src=&#34;image-20241214212518649.png&#34; alt=&#34;image-20241214212518649&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;p&gt;L-属性翻译：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继承属性
&lt;ol&gt;
&lt;li&gt;产生式左部非终结符号的继承属性，取前面表达式的右部该符号 的继承属性值&lt;/li&gt;
&lt;li&gt;产生式右侧符号的继承属性，使用当前式左侧符号的&lt;strong&gt;继承属性&lt;/strong&gt;或在该符号左边的符号&lt;strong&gt;属性&lt;/strong&gt;计算&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;综合属性
&lt;ol&gt;
&lt;li&gt;产生式右部非终结符号的综合属性值，取其&lt;strong&gt;推导产生式&lt;/strong&gt;左部同名非终结符号的综合属性值&lt;/li&gt;
&lt;li&gt;产生式左侧非终结符号的综合属性值，使用当前产生式左侧&lt;strong&gt;继承属性&lt;/strong&gt;或右侧符号的&lt;strong&gt;属性&lt;/strong&gt;计算&lt;/li&gt;
&lt;li&gt;动作符号的综合属性，使用该符号的继承属性或右侧符号的属性计算&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单赋值L-属性翻译要求：&lt;/p&gt;
&lt;p&gt;产生式右侧符号继承属性&lt;strong&gt;等于左部符号的继承属性值&lt;/strong&gt;，或等于出现在所给符号左部某个符号的&lt;strong&gt;综合属性值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;产生式左部非终结符号的&lt;strong&gt;综合属性&lt;/strong&gt;，等于&lt;strong&gt;自身的继承属性&lt;/strong&gt;，或&lt;strong&gt;右部&lt;/strong&gt;某个符号的&lt;strong&gt;综合属性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;变换：&lt;/p&gt;
&lt;img src=&#34;image-20241213140210680.png&#34; alt=&#34;image-20241213140210680&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;p&gt;不符合规则，因为需要对f求值，修改为&lt;/p&gt;
&lt;img src=&#34;image-20241213140250766.png&#34; alt=&#34;image-20241213140250766&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h1&gt;数组变量的声明处理&lt;/h1&gt;
&lt;p&gt;n维数组元素地址的计算&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mtext&gt;维的下界&lt;/mtext&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mtext&gt;，&lt;/mtext&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mtext&gt;维的上界&lt;/mtext&gt;&lt;mi&gt;U&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mtext&gt;维元素当前数组的下标&lt;/mtext&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mtext&gt;：数组元素大小&lt;/mtext&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msubsup&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;Σ&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msubsup&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mtext&gt;当&lt;/mtext&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mtext&gt;时，&lt;/mtext&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mtext&gt;当&lt;/mtext&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mtext&gt;时，&lt;/mtext&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msubsup&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;Π&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msubsup&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mi&gt;U&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;i维的下界L(i)，i维的上界U(i)\\
i维元素当前数组的 下标V(i) \\
E：数组元素大小\\
ADR=LOC+\Sigma_{i=1}^{n}[V(i)-L(i)]\times P(i) \times E \\
当i=n时，P(i) = 1\\
当1&amp;lt;=i&amp;lt;n时，P(i) = \Pi_{j=i+1}^n [U(j)-L(j)+1] \\
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;维&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;下&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;界&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;维&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;上&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;界&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;维&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;元&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;素&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;当&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;前&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;组&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;下&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;标&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;组&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;元&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;素&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;大&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;小&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;Σ&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.7143919999999999em;&#34;&gt;&lt;span style=&#34;top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mrel mtight&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.247em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;当&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72243em;vertical-align:-0.0391em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;当&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.36687em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69862em;vertical-align:-0.0391em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.133108em;vertical-align:-0.383108em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;Π&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.714392em;&#34;&gt;&lt;span style=&#34;top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mrel mtight&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.1130000000000004em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.383108em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;其他内容&#34;&gt;其他内容&lt;/h3&gt;
&lt;p&gt;常量：识别类型，识别名字，赋值&lt;/p&gt;
&lt;p&gt;简单变量：要alloc&lt;/p&gt;
&lt;p&gt;记录变量：是用来引用几个不同名字所组成的实体&lt;/p&gt;
&lt;p&gt;过程声明：调用前需要确定参数、返回值&lt;/p&gt;
&lt;p&gt;马勒戈壁看不懂&lt;/p&gt;
&lt;h1&gt;中间代码&lt;/h1&gt;
&lt;h3 id=&#34;波兰表示&#34;&gt;波兰表示&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;算术表达式：&lt;/strong&gt; F * 3.1416 * R * ( H + R )&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;波兰表示：&lt;/strong&gt; * F 3.1416 * R * + H R&lt;/p&gt;
&lt;p&gt;**逆波兰表达式：**F 3.1416 * R * H R + *&lt;/p&gt;
&lt;p&gt;赋值语句 &lt;strong&gt;:=&lt;/strong&gt; 符号优先级最低&lt;/p&gt;
&lt;p&gt;if语句：if &amp;lt; expr &amp;gt; then &amp;lt; stmt1 &amp;gt; else &amp;lt; stmt2 &amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt; expr &amp;gt;  &amp;lt; label1 &amp;gt; BZ &amp;lt; stmt1 &amp;gt; &amp;lt; label2 &amp;gt; BR &amp;lt; stmt2 &amp;gt;&lt;/p&gt;
&lt;p&gt;BZ:如果&amp;lt; expr &amp;gt;结果为0，则跳转到label1，&lt;/p&gt;
&lt;p&gt;BR：跳转到label2&lt;/p&gt;
&lt;p&gt;label1再BR头，label2在BR尾&lt;/p&gt;
&lt;h3 id=&#34;N元表示&#34;&gt;N元表示&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;三元式&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;直接三元式&lt;/p&gt;
&lt;img src=&#34;image-20241212190228341.png&#34; alt=&#34;image-20241212190228341&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;p&gt;间接三元式：&lt;/p&gt;
&lt;img src=&#34;image-20241212190358243.png&#34; alt=&#34;image-20241212190358243&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;p&gt;四元式：&lt;/p&gt;
&lt;p&gt;(op, 操作数1, 操作数2, 结果)&lt;/p&gt;
&lt;h3 id=&#34;Pcode？&#34;&gt;Pcode？&lt;/h3&gt;
&lt;img src=&#34;image-20241212190619099.png&#34; alt=&#34;image-20241212190619099&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h3 id=&#34;DAG图&#34;&gt;DAG图&lt;/h3&gt;
&lt;img src=&#34;image-20241212190646297.png&#34; alt=&#34;image-20241212190646297&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h1&gt;代码优化&lt;/h1&gt;
&lt;h3 id=&#34;优化分类&#34;&gt;优化分类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;局部优化：指在&lt;strong&gt;基本块内&lt;/strong&gt;进行的优化&lt;/li&gt;
&lt;li&gt;全局优化：跨越基本块，在&lt;strong&gt;函数/过程内&lt;/strong&gt;进行的优化，进行全局控制流和数据流分析&lt;/li&gt;
&lt;li&gt;循环优化：对&lt;strong&gt;循环语句&lt;/strong&gt;所生成的中间代码序列上所进行的优化&lt;/li&gt;
&lt;li&gt;跨函数优化：整个程序，&lt;strong&gt;跨函数&lt;/strong&gt;别名分析，逃逸分析&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;划分基本快&#34;&gt;划分基本快&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;整个语句第一条语句属于入口语句&lt;/li&gt;
&lt;li&gt;任何 条件/无条件 跳转语句转移到的提一条是入口&lt;/li&gt;
&lt;li&gt;紧跟在跳转语句后 第一条是入口&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;DAG图-2&#34;&gt;DAG图&lt;/h2&gt;
&lt;img src=&#34;image-20241214220958305.png&#34; alt=&#34;image-20241214220958305&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;img src=&#34;image-20241214221015196.png&#34; alt=&#34;image-20241214221015196&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;img src=&#34;image-20241214221033065.png&#34; alt=&#34;image-20241214221033065&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;img src=&#34;image-20241214221051582.png&#34; alt=&#34;image-20241214221051582&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h3 id=&#34;中间代码构造DAG&#34;&gt;中间代码构造DAG&lt;/h3&gt;
&lt;img src=&#34;image-20241214223201319.png&#34; alt=&#34;image-20241214223201319&#34; style=&#34;zoom: 67%;&#34; /&gt; 
&lt;img src=&#34;image-20241214223238300.png&#34; alt=&#34;image-20241214223238300&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;p&gt;**特殊注意：**如果出现 op A或 A op B；其中A、B为常数，需要合并常数&lt;/p&gt;
&lt;p&gt;**省流：**找左右操作数，找不到就新建，找到了就记录→找op，找不到就新建，找到了就记录节点号→找结果对应的变量，找不到就添加到op节点，找到了就把变量改到op节点&lt;/p&gt;
&lt;h3 id=&#34;DAG转中间代码&#34;&gt;DAG转中间代码&lt;/h3&gt;
&lt;img src=&#34;image-20241214223321143.png&#34; alt=&#34;image-20241214223321143&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;p&gt;**省流：**从左向右，把没有父节点且不是叶节点的节点扔进队列，最后逆序输出。&lt;/p&gt;
&lt;h2 id=&#34;数据流分析&#34;&gt;数据流分析&lt;/h2&gt;
&lt;h3 id=&#34;到达定义分析&#34;&gt;到达定义分析&lt;/h3&gt;
&lt;p&gt;分析的是数据流信息 d1、d2、…&lt;/p&gt;
&lt;p&gt;gen[S]：S本身&lt;strong&gt;产生&lt;/strong&gt;的数据流信息&lt;/p&gt;
&lt;p&gt;kill[S]：S&lt;strong&gt;注销&lt;/strong&gt;的数据流信息&lt;/p&gt;
&lt;p&gt;in[S]：&lt;strong&gt;进入&lt;/strong&gt;S时的数据流信息&lt;/p&gt;
&lt;p&gt;in[B] = out[P1] ∪ out[P2] ∪ … （所有B的前驱块）&lt;/p&gt;
&lt;p&gt;out[S]：S末尾&lt;strong&gt;得到&lt;/strong&gt;的数据流信息&lt;/p&gt;
&lt;p&gt;out = gen ∪ ( in - kill )&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先写出gen和kill，能瞪眼看出来&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;从上往下&lt;/strong&gt;，&lt;u&gt;&lt;strong&gt;迭代&lt;/strong&gt;&lt;/u&gt;执行计算每个基本块的in和out&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;例题&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20241214230235300.png&#34; alt=&#34;image-20241214230235300&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;img src=&#34;image-20241214231149157.png&#34; alt=&#34;image-20241214231149157&#34; style=&#34;zoom: 67%;&#34; /&gt; 
&lt;h3 id=&#34;活跃变量分析&#34;&gt;活跃变量分析&lt;/h3&gt;
&lt;p&gt;分析的是&lt;strong&gt;变量&lt;/strong&gt;x、y、i、…&lt;/p&gt;
&lt;p&gt;在use里出现的不可能在def出现，反之亦然&lt;/p&gt;
&lt;p&gt;def[B] :  在B中被&lt;strong&gt;定义&lt;/strong&gt;先于任何&lt;strong&gt;使用&lt;/strong&gt;的变量&lt;/p&gt;
&lt;p&gt;use[B] :  在B中被&lt;strong&gt;使用&lt;/strong&gt;先于任何&lt;strong&gt;定义&lt;/strong&gt;的变量&lt;/p&gt;
&lt;p&gt;in[B] :  use ∪ (out - def)&lt;/p&gt;
&lt;p&gt;out[B] :  in[P1] ∪ in[P2] ∪ … （所有B的后继块）&lt;/p&gt;
&lt;p&gt;**注意：**形如 x = x + 1的语句中，&lt;strong&gt;x先被使用&lt;/strong&gt; 再被定义&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;瞪眼法瞪出来每个块的use和def&lt;/li&gt;
&lt;li&gt;把所有块的in初始化为空&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;从下往上&lt;/strong&gt;，**&lt;u&gt;迭代&lt;/u&gt;**执行：计算每个块的out和in&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;例题&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20241215131533120.png&#34; alt=&#34;image-20241215131533120&#34; style=&#34;zoom: 67%;&#34; /&gt; 
&lt;h2 id=&#34;冲突图-和-定义-使用链&#34;&gt;冲突图 和 定义-使用链&lt;/h2&gt;
&lt;p&gt;两个变量中一个变量在另一个变量定义处是活跃的，那么他们之间有边连接。&lt;/p&gt;
&lt;h3 id=&#34;定义-使用链&#34;&gt;定义-使用链&lt;/h3&gt;
&lt;img src=&#34;image-20241215133105332.png&#34; alt=&#34;image-20241215133105332&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;img src=&#34;image-20241215133322831.png&#34; alt=&#34;image-20241215133322831&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;img src=&#34;image-20241215134615561.png&#34; alt=&#34;image-20241215134615561&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;h2 id=&#34;全局寄存器分配&#34;&gt;全局寄存器分配&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;寄存器分为&lt;strong&gt;全局寄存器&lt;/strong&gt;和&lt;strong&gt;临时寄存器&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;引用计数法&#34;&gt;引用计数法&lt;/h3&gt;
&lt;p&gt;访问次数越多越可能获得全局寄存器，循环内变量获得加权&lt;/p&gt;
&lt;h3 id=&#34;图着色法&#34;&gt;图着色法&lt;/h3&gt;
&lt;p&gt;假设寄存器数目为K，假设K=3&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不断移去所有连接边小于K的点，直到不能移去&lt;/li&gt;
&lt;li&gt;选一个适当的点，记录为“不分配全局寄存器”，然后移走&lt;/li&gt;
&lt;li&gt;重复1、2，直到只剩一个点&lt;/li&gt;
&lt;li&gt;给最后一个点着色，按照节点移除顺序，把边和节点放回，并着色。“不分配全局寄存器”的节点不着色&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;循环优化？&#34;&gt;循环优化？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;归纳变量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如for（i=1；i&amp;lt;=10;i++）a[i] = b[i] + c[i]&lt;/p&gt;
&lt;p&gt;生成代码里&lt;/p&gt;
&lt;p&gt;t1=4*i （为了获取地址）&lt;/p&gt;
&lt;p&gt;t2 = b[t1]&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;i=i+1&lt;/p&gt;
&lt;p&gt;可把4*优化掉，直接i = i+4&lt;/p&gt;
&lt;p&gt;**代码外提：**不需要在循环中的放出去&lt;/p&gt;
&lt;p&gt;**循环展开：**原本for循环把a[10]全变成0，现在不用for，一条一条置0&lt;/p&gt;
&lt;h2 id=&#34;基本块内优化类型&#34;&gt;基本块内优化类型&lt;/h2&gt;
&lt;p&gt;常数合并：2+3直接用5&lt;/p&gt;
&lt;p&gt;运算强度削弱：乘法改成左移、x/5改成x*0.5等&lt;/p&gt;
&lt;p&gt;复写传播优化：如x:=y语句，某些时候可以删去。&lt;/p&gt;
&lt;p&gt;删除死代码&lt;/p&gt;
&lt;p&gt;消除局部公共子表达式&lt;/p&gt;
&lt;p&gt;窥孔优化：&lt;strong&gt;化关注在目标指令的一个较短的序列&lt;/strong&gt;，&lt;strong&gt;删除其中的冗余代码&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;指令集架构&#34;&gt;指令集架构&lt;/h2&gt;
&lt;p&gt;C = A + B&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈式：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Push A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Push B&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Add&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Pop C&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;累加器式：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;LOAD A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ADD B&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;STORE C&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;寄存器-内存式：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;LOAD R1, A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ADD R2, R1, B&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;STORE R2,C&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;寄存器-寄存器式：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;LOAD R1, A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LOAD R2, B&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ADD R3, R1, R2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;STORE R3, C&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.unfinished.top/2024/11/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/</guid>
            <title>数字电路</title>
            <link>https://blog.unfinished.top/2024/11/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/</link>
            <category>大学</category>
            <category>总结</category>
            <category>数字电路</category>
            <pubDate>Thu, 28 Nov 2024 05:17:48 +0000</pubDate>
            <description><![CDATA[ &lt;img src=&#34;03acfa18d5b2cad1f38acbb80498b41.jpg&#34; alt=&#34;03acfa18d5b2cad1f38acbb80498b41&#34; style=&#34;zoom: 33%;&#34; /&gt; 
&lt;h1&gt;半导体基础&lt;/h1&gt;
&lt;p&gt;N型半导体：多子是负电自由电子，本身带有正电&lt;/p&gt;
&lt;p&gt;P型半导体：多子是正电空穴，本身带有负电&lt;/p&gt;
&lt;h3 id=&#34;二极管原理&#34;&gt;二极管原理&lt;/h3&gt;
&lt;p&gt;二极管导通电流方向：P→N&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不通电时：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浓度差导致扩散运动
&lt;ul&gt;
&lt;li&gt;P区空穴向N区扩散&lt;/li&gt;
&lt;li&gt;N区自由电子向P区扩散&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;电场导致漂移运动
&lt;ul&gt;
&lt;li&gt;P区自由电子向N区漂移&lt;/li&gt;
&lt;li&gt;N区空穴向P区漂移&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;扩散导致内电场增大，漂移导致内电场减小，二者平衡&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;正向导通：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电流方向P→N，和内电场方向相反&lt;/li&gt;
&lt;li&gt;破坏内电场，促进扩散运动&lt;/li&gt;
&lt;li&gt;多子扩散电流大，导通&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;反向截止：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电流方向N→P，和内电场方向一致&lt;/li&gt;
&lt;li&gt;强化内电场，扩散运动减小，促进漂移&lt;/li&gt;
&lt;li&gt;少子漂移电流很小，约等于截断&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二极管特性曲线&#34;&gt;二极管特性曲线&lt;/h3&gt;
&lt;img src=&#34;1732611770910.png&#34; alt=&#34;1732611770910&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h1&gt;CMOS&lt;/h1&gt;
&lt;h3 id=&#34;MOS管结构和性质&#34;&gt;MOS管结构和性质&lt;/h3&gt;
&lt;p&gt;箭头由P指向N&lt;/p&gt;
&lt;img src=&#34;1732609958194(1).png&#34; alt=&#34;1732609958194(1)&#34; style=&#34;zoom: 80%;&#34; /&gt; 
&lt;img src=&#34;1732609658783.png&#34; alt=&#34;1732609658783&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h3 id=&#34;反相器&#34;&gt;反相器&lt;/h3&gt;
&lt;img src=&#34;1732609710189.png&#34; alt=&#34;1732609710189&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h3 id=&#34;与非门-或非门&#34;&gt;与非门&amp;amp;或非门&lt;/h3&gt;
&lt;img src=&#34;1732609758887.png&#34; alt=&#34;1732609758887&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;h3 id=&#34;传输门-异或门&#34;&gt;传输门&amp;amp;异或门&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;传输门&lt;/strong&gt;：&lt;/p&gt;
&lt;img src=&#34;1732609813663.png&#34; alt=&#34;1732609813663&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;p&gt;&lt;strong&gt;异或门：&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;1732609861836.png&#34; alt=&#34;1732609861836&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h3 id=&#34;OD门&#34;&gt;OD门&lt;/h3&gt;
&lt;img src=&#34;1732609901856.png&#34; alt=&#34;1732609901856&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h3 id=&#34;三态门&#34;&gt;三态门&lt;/h3&gt;
&lt;img src=&#34;1732609929273.png&#34; alt=&#34;1732609929273&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h1&gt;TTL&lt;/h1&gt;
&lt;h3 id=&#34;三极管结构和性质&#34;&gt;三极管结构和性质&lt;/h3&gt;
&lt;p&gt;原理随便看看差不多得了&lt;/p&gt;
&lt;img src=&#34;1732610162586.png&#34; alt=&#34;1732610162586&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;p&gt;&lt;img src=&#34;image-20241126170414126.png&#34; alt=&#34;image-20241126170414126&#34; style=&#34;zoom:50%;&#34; /&gt; &lt;img src=&#34;image-20241126170425218.png&#34; alt=&#34;image-20241126170425218&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;截止：VBE＜ Uon（0.7V）此时IB=0  则IC=0&lt;/li&gt;
&lt;li&gt;放大：VBE＞ Uon（0.7V）VCE ＞  VBE，IC= βIB（&lt;strong&gt;TTL电路不考虑放大&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;饱和：VBE ＞  Uon（0.7V）   VBE ＞ VCE&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;1732610239083.png&#34; alt=&#34;1732610239083&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;p&gt;C（Collect）：集电区低掺杂，面积大&lt;/p&gt;
&lt;p&gt;E（Emit）：发射区高掺杂，面积小&lt;/p&gt;
&lt;p&gt;B（Base）：基区薄低掺杂&lt;/p&gt;
&lt;h3 id=&#34;反相器-2&#34;&gt;反相器&lt;/h3&gt;
&lt;img src=&#34;1732610385227.png&#34; alt=&#34;1732610385227&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h3 id=&#34;与非门&#34;&gt;与非门&lt;/h3&gt;
&lt;p&gt;只修改了输入级而已&lt;/p&gt;
&lt;img src=&#34;1732610411632.png&#34; alt=&#34;1732610411632&#34; style=&#34;zoom: 67%;&#34; /&gt; 
&lt;h3 id=&#34;或非门&#34;&gt;或非门&lt;/h3&gt;
&lt;p&gt;输入级x2，倒向级并联（只要有一个输入1，就会把上面的电压拉低）&lt;/p&gt;
&lt;img src=&#34;1732610481414.png&#34; alt=&#34;1732610481414&#34; style=&#34;zoom:67%;&#34; /&gt; 
&lt;h3 id=&#34;异或门&#34;&gt;异或门&lt;/h3&gt;
&lt;p&gt;输入集得到 AB、A、B；反相级1得到 (A+B)‘，反相级2得到((A+B)’ + AB)’ = (A’B’+AB)’&lt;/p&gt;
&lt;img src=&#34;1732610668536.png&#34; alt=&#34;1732610668536&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h3 id=&#34;OC门&#34;&gt;OC门&lt;/h3&gt;
&lt;img src=&#34;1732610918350.png&#34; alt=&#34;1732610918350&#34; style=&#34;zoom: 67%;&#34; /&gt; 
&lt;h3 id=&#34;三态输出门&#34;&gt;三态输出门&lt;/h3&gt;
&lt;img src=&#34;1732610949979.png&#34; alt=&#34;1732610949979&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h1&gt;组合逻辑&lt;/h1&gt;
&lt;h3 id=&#34;卡诺图&#34;&gt;卡诺图&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;卡诺图行和列元素 表格里相邻的逻辑上也是相邻的（00和01相邻，00和11不相邻）&lt;/li&gt;
&lt;li&gt;覆盖图中所有的1&lt;/li&gt;
&lt;li&gt;圈成的矩形数最少&lt;/li&gt;
&lt;li&gt;每个圈成的矩形尽可能大&lt;/li&gt;
&lt;li&gt;无关项可以当作1用&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;1732606969351.png&#34; alt=&#34;1732606969351&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h3 id=&#34;编码器&#34;&gt;编码器&lt;/h3&gt;
&lt;p&gt;8线-3线优先编码器&lt;/p&gt;
&lt;img src=&#34;1732607575660.png&#34; alt=&#34;1732607575660&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;p&gt;8线-3线优先编码器&lt;/p&gt;
&lt;p&gt;工作时S‘=1，EX’=0&lt;/p&gt;
&lt;img src=&#34;1732607647842.png&#34; alt=&#34;1732607647842&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h3 id=&#34;译码器&#34;&gt;译码器&lt;/h3&gt;
&lt;h5 id=&#34;3线-8线译码器&#34;&gt;3线-8线译码器&lt;/h5&gt;
&lt;img src=&#34;1732607777988.png&#34; alt=&#34;1732607777988&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;p&gt;工作时S1=1，S2‘=0，S3’=0&lt;/p&gt;
&lt;img src=&#34;1732607819595.png&#34; alt=&#34;1732607819595&#34; style=&#34;zoom: 60%;&#34; /&gt; 
&lt;h5 id=&#34;二-十进制译码器&#34;&gt;二-十进制译码器&lt;/h5&gt;
&lt;p&gt;四位输入（A3 A2 A1 A0），输入Y0-Y9&lt;/p&gt;
&lt;p&gt;如果输入不在0-9范围，则输出的为伪码&lt;/p&gt;
&lt;h3 id=&#34;例题哈哈&#34;&gt;例题哈哈&lt;/h3&gt;
&lt;img src=&#34;1732608345823.png&#34; alt=&#34;1732608345823&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h3 id=&#34;数据选择器&#34;&gt;数据选择器&lt;/h3&gt;
&lt;img src=&#34;1732608450997.png&#34; alt=&#34;1732608450997&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h3 id=&#34;加法器&#34;&gt;加法器&lt;/h3&gt;
&lt;p&gt;俩输入变量相加，CO输出进位，Y0-Y3输出&lt;/p&gt;
&lt;h1&gt;时序逻辑&lt;/h1&gt;
&lt;h3 id=&#34;触发器&#34;&gt;触发器&lt;/h3&gt;
&lt;h4 id=&#34;SR触发器&#34;&gt;SR触发器&lt;/h4&gt;
&lt;p&gt;我觉得不常用&lt;/p&gt;
&lt;p&gt;S=1，R=1，置1&lt;/p&gt;
&lt;p&gt;S=1，R=1，置1&lt;/p&gt;
&lt;p&gt;S=0，R=1，置0&lt;/p&gt;
&lt;p&gt;S=0，R=0，保持&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;/msup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mo mathvariant=&#34;normal&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;′&lt;/mo&gt;&lt;/msup&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;Q^* = S+R&amp;#x27;Q\\
SR=0
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.933136em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.738696em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mbin mtight&#34;&gt;∗&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.996332em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.801892em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;′&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;Q&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;img src=&#34;1732588969478.png&#34; alt=&#34;1732588969478&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h4 id=&#34;JK触发器&#34;&gt;JK触发器&lt;/h4&gt;
&lt;p&gt;两个0：保持&lt;/p&gt;
&lt;p&gt;两个1：翻转&lt;/p&gt;
&lt;p&gt;J1 K0：1&lt;/p&gt;
&lt;p&gt;J0 K1：0&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;/msup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;J&lt;/mi&gt;&lt;msup&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mo mathvariant=&#34;normal&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;′&lt;/mo&gt;&lt;/msup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;K&lt;/mi&gt;&lt;mo mathvariant=&#34;normal&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;′&lt;/mo&gt;&lt;/msup&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;Q^*=JQ&amp;#x27;+K&amp;#x27;Q
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.933136em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.738696em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mbin mtight&#34;&gt;∗&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.996332em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.09618em;&#34;&gt;J&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.801892em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;′&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.996332em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.801892em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;′&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;Q&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;img src=&#34;1732589072817(1).png&#34; alt=&#34;1732589072817(1)&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;h4 id=&#34;T触发器&#34;&gt;T触发器&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;/msup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;msup&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mo mathvariant=&#34;normal&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;′&lt;/mo&gt;&lt;/msup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mo mathvariant=&#34;normal&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;′&lt;/mo&gt;&lt;/msup&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;Q^*=TQ&amp;#x27;+T&amp;#x27;Q
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.933136em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.738696em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mbin mtight&#34;&gt;∗&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.996332em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.801892em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;′&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.996332em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.801892em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;′&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;Q&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;T=0，保持&lt;/p&gt;
&lt;p&gt;T=1，翻转&lt;/p&gt;
&lt;h4 id=&#34;D触发器&#34;&gt;D触发器&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;/msup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;Q^*=D
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.933136em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.738696em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mbin mtight&#34;&gt;∗&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;D是啥下一状态就是啥&lt;/p&gt;
&lt;h3 id=&#34;触发器图标&#34;&gt;触发器图标&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;在CLK=1的全部时间，都会触发&lt;/strong&gt;：什么特殊符号都没有&lt;/p&gt;
&lt;img src=&#34;1732589271960.png&#34; alt=&#34;1732589271960&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;p&gt;&lt;strong&gt;下降沿触发&lt;/strong&gt;：神秘符号&lt;strong&gt;㇕&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;1732589323078.png&#34; alt=&#34;1732589323078&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;p&gt;&lt;strong&gt;上升沿触发&lt;/strong&gt;：奇怪小三角&lt;/p&gt;
&lt;img src=&#34;1732589371659.png&#34; alt=&#34;1732589371659&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h3 id=&#34;触发器例题&#34;&gt;触发器例题&lt;/h3&gt;
&lt;img src=&#34;1732589539054.png&#34; alt=&#34;1732589539054&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h3 id=&#34;奇怪小常识&#34;&gt;奇怪小常识&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;TTL触发器，输入端悬空时等效“1”&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;状态机&#34;&gt;状态机&lt;/h3&gt;
&lt;h4 id=&#34;Moore型&#34;&gt;Moore型&lt;/h4&gt;
&lt;p&gt;没有输入，自己跑着玩&lt;/p&gt;
&lt;img src=&#34;1732590462360.png&#34; alt=&#34;1732590462360&#34; style=&#34;zoom:50%;&#34; /&gt;  
&lt;img src=&#34;1732590610745.png&#34; alt=&#34;1732590610745&#34; style=&#34;zoom: 67%;&#34; /&gt;   
&lt;h4 id=&#34;Mealy型&#34;&gt;Mealy型&lt;/h4&gt;
&lt;p&gt;有输入，随时以改变输入和输出，但是换状态只在触发沿换&lt;/p&gt;
&lt;img src=&#34;1732590508635.png&#34; alt=&#34;1732590508635&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;img src=&#34;1732590632242.png&#34; alt=&#34;1732590632242&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h4 id=&#34;解题方法&#34;&gt;解题方法&lt;/h4&gt;
&lt;p&gt;（针对上面第二题举例）&lt;/p&gt;
&lt;p&gt;1.驱动方程&lt;/p&gt;
&lt;img src=&#34;1732590759694.png&#34; alt=&#34;1732590759694&#34; style=&#34;zoom:33%;&#34; /&gt; 
&lt;p&gt;2.状态方程&lt;/p&gt;
&lt;img src=&#34;1732590791393(1).png&#34; alt=&#34;1732590791393(1)&#34; style=&#34;zoom:33%;&#34; /&gt; 
&lt;p&gt;3.输出方程&lt;/p&gt;
&lt;img src=&#34;1732590804137.png&#34; alt=&#34;1732590804137&#34; style=&#34;zoom:33%;&#34; /&gt; 
&lt;p&gt;4.写出状态转换表&lt;/p&gt;
&lt;img src=&#34;1732590825713.png&#34; alt=&#34;1732590825713&#34; style=&#34;zoom:33%;&#34; /&gt; 
&lt;p&gt;有一说一我觉得把Q1Q2A作为行合理点&lt;/p&gt;
&lt;p&gt;5.画状态图&lt;/p&gt;
&lt;h3 id=&#34;常用时序逻辑原件&#34;&gt;常用时序逻辑原件&lt;/h3&gt;
&lt;h4 id=&#34;移位寄存器&#34;&gt;移位寄存器&lt;/h4&gt;
&lt;p&gt;神秘力量让串行变成并行&lt;/p&gt;
&lt;img src=&#34;1732591714358.png&#34; alt=&#34;1732591714358&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;p&gt;超级大合集&lt;/p&gt;
&lt;img src=&#34;1732591755556.png&#34; alt=&#34;1732591755556&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h4 id=&#34;计数器&#34;&gt;计数器&lt;/h4&gt;
&lt;p&gt;2进制&lt;/p&gt;
&lt;img src=&#34;1732601524132.jpg&#34; alt=&#34;1732601524132&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;p&gt;减法计数器反着转圈圈&lt;/p&gt;
&lt;img src=&#34;image-20241126141221693.png&#34; alt=&#34;image-20241126141221693&#34; style=&#34;zoom:50%;&#34; /&gt; 
&lt;h4 id=&#34;计数器例题&#34;&gt;计数器例题&lt;/h4&gt;
&lt;img src=&#34;1732771048791.png&#34; alt=&#34;1732771048791&#34; style=&#34;zoom: 50%;&#34; /&gt;   ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.unfinished.top/2024/06/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
            <title>操作系统复习</title>
            <link>https://blog.unfinished.top/2024/06/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
            <category>大学</category>
            <category>总结</category>
            <category>操作系统</category>
            <pubDate>Thu, 06 Jun 2024 05:52:20 +0000</pubDate>
            <description><![CDATA[ &lt;h1&gt;1引论&lt;/h1&gt;
&lt;p&gt;中断是异步异常，可能随时发生（IO、始终信号）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;软件和硬件都可以产生中断。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同步异常是相同条件下可重现的一场（内存错误，调试，被零除）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;系统调用也视作同步异常，或trap（陷阱）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1717557059107.png&#34; alt=&#34;1717557059107&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;系统&#34;&gt;系统&lt;/h4&gt;
&lt;p&gt;把用户提交的作业成批送入计算机，由作业调度程序自动选择运行。&lt;/p&gt;
&lt;p&gt;缩短作业交接时间、减少处理机空闲等待&lt;/p&gt;
&lt;p&gt;联机批处理系统在作业输入输出时，CPU忙等&lt;/p&gt;
&lt;p&gt;多道程序系统：允许多个程序同时进入内存，在CPU交替运行&lt;/p&gt;
&lt;p&gt;多道批处理系统：多道+成批；系统吞吐量大，资源利用率高；&lt;strong&gt;平均周转时间长，不能提供交互能力&lt;/strong&gt;。&lt;strong&gt;成批：作业一旦进入系统，用户就不能直接干预其作业的运行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分时系统：CPU处理时间分为时间片，多用户，可交互，用户间相互独立，可对用户输入及时响应&lt;/p&gt;
&lt;p&gt;分布式系统：一体化系统，由网络底层支持，多台机器统一管理形成的单一透明系统&lt;/p&gt;
&lt;p&gt;实时系统：及时响应，安全可靠，整体性强&lt;/p&gt;
&lt;h1&gt;2启动&lt;/h1&gt;
&lt;h3 id=&#34;BootLoader&#34;&gt;BootLoader&lt;/h3&gt;
&lt;p&gt;开机第一个程序&lt;/p&gt;
&lt;p&gt;常用U-Boot&lt;/p&gt;
&lt;p&gt;分为两部分，&lt;/p&gt;
&lt;p&gt;stage1：依赖于cpu体系结构的代码，用汇编语言来实现&lt;/p&gt;
&lt;p&gt;stage2：更多复杂功能，可读性、可移植性好，用C语言实现&lt;/p&gt;
&lt;h2 id=&#34;MIPS，启动！&#34;&gt;MIPS，启动！&lt;/h2&gt;
&lt;p&gt;地址空间4G&lt;/p&gt;
&lt;p&gt;kuseg：2G用户态可用地址，需要被MMU转化&lt;/p&gt;
&lt;p&gt;kseg0：512M，对于无MMU的系统，用于存程序和数据，对于有MMU的系统，用于存操作系统核心，几乎全部kseg0都需要通过cache存取&lt;/p&gt;
&lt;p&gt;kesg1：512M，唯一能在系统启动时工作的地址空间，不需要cache&lt;/p&gt;
&lt;p&gt;kesg2：1G，需要MMU转换，只能在核心态使用&lt;/p&gt;
&lt;h3 id=&#34;启动1&#34;&gt;启动1&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1713233950551.png&#34; alt=&#34;1713233950551&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;启动2&#34;&gt;启动2&lt;/h3&gt;
&lt;p&gt;调用board.c初始化&lt;/p&gt;
&lt;p&gt;内存划分、堆栈初始化，把代码从flash搬到ram上&lt;/p&gt;
&lt;h3 id=&#34;引导Linux系统&#34;&gt;引导Linux系统&lt;/h3&gt;
&lt;p&gt;linux 内核启动的第一个阶段从 /arch/mips/kernel/head.s文件开始的&lt;/p&gt;
&lt;p&gt;内核入口kernel_entry()，先初始化内核堆栈，把内核映像的未初始化数据清零，跳转到**start_kernel()**启动&lt;/p&gt;
&lt;h2 id=&#34;X86，启动！&#34;&gt;X86，启动！&lt;/h2&gt;
&lt;p&gt;比MIPS麻烦很多&lt;/p&gt;
&lt;p&gt;▪ 第一步——加载BIOS：硬件自检，读取启动顺序，&lt;/p&gt;
&lt;p&gt;▪ 第二步——读取MBR：主引导记录，在磁盘0磁头0磁道第一个扇区，包含了已安装的操作系统的启动加载器(BootLoader)和驱动器的逻辑分区信息&lt;/p&gt;
&lt;p&gt;▪ 第三步——Boot Loader：操作系统内核运行之前运行的一段小程序，初始化硬件，建立内存空间映射图&lt;/p&gt;
&lt;p&gt;▪ 第四步——加载内核：根据grab设定的路径读取内存映像并存在内存，初始化硬件设备，为内核程序执行建立环境&lt;/p&gt;
&lt;p&gt;▪ 第五步——用户层init依据inittab文件来设定运行等级：0，关机；1，单用户；2，无网络多用户；3，有网络多用户；4，保留未使用；5，有网络有X-Window支持的多用户；6，重启&lt;/p&gt;
&lt;p&gt;▪ 第六步－－init进程执行rc.sysinit：设定PATH、网络配置、启动swap分区，设定/proc&lt;/p&gt;
&lt;p&gt;▪ 第七步－－启动内核模块&lt;/p&gt;
&lt;p&gt;▪ 第八步－－执行不同运行级别的脚本程序&lt;/p&gt;
&lt;p&gt;▪ 第九步－－执行/etc/rc.d/rc.local：Linux留给用户自己个性化设置和启动的地方&lt;/p&gt;
&lt;p&gt;▪ 第十步－－执行/bin/login程序，进入登录状态&lt;/p&gt;
&lt;h1&gt;3内存&lt;/h1&gt;
&lt;p&gt;Elf头&lt;/p&gt;
&lt;p&gt;e_ident Elf标志&lt;/p&gt;
&lt;p&gt;e_type 文件类型&lt;/p&gt;
&lt;p&gt;e_phoff:程序表头&lt;/p&gt;
&lt;p&gt;e_shoff节表头&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1713334808476.png&#34; alt=&#34;1713334808476&#34;&gt;&lt;/p&gt;
&lt;p&gt;栈：存放、交换临时数据&lt;/p&gt;
&lt;p&gt;堆：存放进程运行中动态分配的内存段&lt;/p&gt;
&lt;p&gt;地址空间：逻辑地址的集合&lt;/p&gt;
&lt;p&gt;存储空间：物理地址的集合&lt;/p&gt;
&lt;h2 id=&#34;内存分配&#34;&gt;内存分配&lt;/h2&gt;
&lt;h3 id=&#34;u-顺序搜索-u&#34;&gt;&lt;u&gt;顺序搜索&lt;/u&gt;&lt;/h3&gt;
&lt;h4 id=&#34;FitrstFit&#34;&gt;FitrstFit&lt;/h4&gt;
&lt;p&gt;空白区域按地址递增顺序连接，查找时选择第一块满足需求的块&lt;/p&gt;
&lt;h4 id=&#34;NextFit&#34;&gt;NextFit&lt;/h4&gt;
&lt;p&gt;空白区域构成循环链，每次查找从上次查找结束的块开始，找到足够大的停&lt;/p&gt;
&lt;h4 id=&#34;BestFit&#34;&gt;BestFit&lt;/h4&gt;
&lt;p&gt;选择大小满足要求且最接近于需求的存储&lt;/p&gt;
&lt;h4 id=&#34;WorstFit&#34;&gt;WorstFit&lt;/h4&gt;
&lt;p&gt;寻找最大空白区&lt;/p&gt;
&lt;h3 id=&#34;索引搜索&#34;&gt;索引搜索&lt;/h3&gt;
&lt;h4 id=&#34;快速适应算法（分类搜索法）&#34;&gt;快速适应算法（分类搜索法）&lt;/h4&gt;
&lt;p&gt;把空闲区按照容量大小分类，经常用到长度的空闲区设立单独的空闲区链表&lt;/p&gt;
&lt;h3 id=&#34;&#34;&gt;&lt;/h3&gt;
&lt;h3 id=&#34;内部碎片&#34;&gt;内部碎片&lt;/h3&gt;
&lt;p&gt;分配给作业存储空间的没利用部分。入固定分区中的碎片。无法被整理，作业完成后释放&lt;/p&gt;
&lt;p&gt;出现原因：&lt;strong&gt;单一连续区存储管理、固定分区存储管理&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;外部碎片&#34;&gt;外部碎片&lt;/h3&gt;
&lt;p&gt;无法利用的小的空闲分区。需要用紧凑技术整理&lt;/p&gt;
&lt;h4 id=&#34;紧凑技术&#34;&gt;紧凑技术&lt;/h4&gt;
&lt;p&gt;需要使用动态重定位&lt;/p&gt;
&lt;h3 id=&#34;覆盖&#34;&gt;覆盖&lt;/h3&gt;
&lt;p&gt;把程序划分一系列功能相对独立的程序，执行时不要求装入一块内存&lt;/p&gt;
&lt;p&gt;部分程序跑完再被下一部分覆盖&lt;/p&gt;
&lt;h3 id=&#34;交换&#34;&gt;交换&lt;/h3&gt;
&lt;p&gt;把暂时不用的程序和数据从主存放到辅存，再把要用到移到主存&lt;/p&gt;
&lt;h2 id=&#34;页式内存管理&#34;&gt;页式内存管理&lt;/h2&gt;
&lt;p&gt;页：把作业的地址空间分成大小相同的片&lt;/p&gt;
&lt;p&gt;页框Frame：与页面相同大小的片，是主存的存储空间&lt;/p&gt;
&lt;p&gt;逻辑地址32位&lt;/p&gt;
&lt;p&gt;物理地址22位&lt;/p&gt;
&lt;p&gt;一块4KB（12位块地址）&lt;/p&gt;
&lt;h3 id=&#34;纯分页系统&#34;&gt;纯分页系统&lt;/h3&gt;
&lt;p&gt;必须把所有页一次撞到主存页框，如果页框不足，等待。&lt;/p&gt;
&lt;h3 id=&#34;TLB&#34;&gt;TLB&lt;/h3&gt;
&lt;p&gt;CPU 产生逻辑地址的页号，首先在快表中寻找若命中就找出其对应的物理块；若未命中，再到页表中找其对应的物理块，并将之复制到快表。若快表中内容满，则按某种算法淘汰某些页&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每个TLB条目中还保存地址空间标识码ASID&lt;/strong&gt;用于辨识进程&lt;/p&gt;
&lt;p&gt;有效内存访问时间 = &lt;em&gt;&lt;em&gt;（TLB查询时间+单次内存访问时间）&lt;/em&gt; TLB命中率 + （TLB查询时间 + 2 * 单次内存访问时间）&lt;/em&gt; （1 - TLB命中率）**&lt;/p&gt;
&lt;h4 id=&#34;哈希页表&#34;&gt;哈希页表&lt;/h4&gt;
&lt;p&gt;虚拟页码作为哈希值，用虚拟页号与哈希链表每个元素第一个域比较，如果匹配则与相应帧号形成层物理地址&lt;/p&gt;
&lt;h2 id=&#34;段式内存管理&#34;&gt;段式内存管理&lt;/h2&gt;
&lt;p&gt;一个作业的地址空间分段，每一段都连续，首地址为0&lt;/p&gt;
&lt;p&gt;段表寄存器内容：段表始值、段表长度&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;根据指令的性质来确定应该使用哪一个段寄存器（Segment Selector），例如转移指令中的地址在代码段，而取数据指令中的地址在数据段；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据段存器的内容，找到相应的“地址段描述结构“（Segment Descriptor），段描述结构都放在一个表（Descriptor Table）中（GDT或LDT等），而表的起始地址保存在GDTR、LDTR等寄存器中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从地址段描述结构中找到基地址（Base Address）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将指令发出的地址作为位移，与段描述结构中规定的段长度相比，看看是否越界；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据指令的性质和段描述符中的访问权限来确定是否越权；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将指令中发出的地址作为位移，与基地址相加而得出线性地址（Linear Address）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;虚拟存储&#34;&gt;虚拟存储&lt;/h2&gt;
&lt;p&gt;为每个进程提供了一个大的、一致的、连续可用的和私有的地址空间&lt;/p&gt;
&lt;p&gt;用户可执行文件、共享库的类型是file backed，磁盘上有记录&lt;/p&gt;
&lt;p&gt;堆栈的类型是anonymous，磁盘上没记录&lt;/p&gt;
&lt;h4 id=&#34;FIFO&#34;&gt;FIFO&lt;/h4&gt;
&lt;p&gt;先进的先被替换&lt;/p&gt;
&lt;h4 id=&#34;Second-Chance&#34;&gt;Second Chance&lt;/h4&gt;
&lt;p&gt;被访问过会被移到FIFO的队列头&lt;/p&gt;
&lt;h4 id=&#34;Clock&#34;&gt;Clock&lt;/h4&gt;
&lt;p&gt;缺页时先检查指针指向的元素，若被访问过，删除访问标志，指针指向下一个；若未被访问过，换掉当前元素，设置访问标志，指针指向下一个&lt;/p&gt;
&lt;p&gt;若不缺页，访问的页面访问位置1，指针不动&lt;/p&gt;
&lt;h4 id=&#34;LRU&#34;&gt;LRU&lt;/h4&gt;
&lt;p&gt;每当进程访问某页面时，便将该页面的页面号从栈中移出，将它压入栈顶。栈底始终是最近最少使用页面的页面号&lt;/p&gt;
&lt;p&gt;若换出页面是file backed类型：&lt;/p&gt;
&lt;p&gt;1.且未被修改，则直接丢弃，因为磁盘上保存有相同的副本&lt;/p&gt;
&lt;p&gt;2.被修改，直接写回原有位置&lt;/p&gt;
&lt;p&gt;若换出页面是anonymous类型：&lt;/p&gt;
&lt;p&gt;1.第一次换出/被修改写入Swap区，&lt;/p&gt;
&lt;p&gt;2.若不是第一次且没被修改，丢弃&lt;/p&gt;
&lt;h1&gt;进程&lt;/h1&gt;
&lt;p&gt;进程时分配资源的基本单位&lt;/p&gt;
&lt;p&gt;由进程控制块（PCB）、程序、数据构成&lt;/p&gt;
&lt;p&gt;进程控制块包括：进程标识符、程序和数据地址、当前状态、现场保护区、同步与同步机制（信号量），优先级，资源清单，链接字&lt;/p&gt;
&lt;h4 id=&#34;进程特征&#34;&gt;进程特征&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;并发：体现在进程的执行是间断性的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;共享：体现在进程/线程之间的制约性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不确定性：进程执行的结果与其执行的相对速度有关，是不确定的&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;并发-并行&#34;&gt;并发/并行&lt;/h4&gt;
&lt;p&gt;并发是一起执行&lt;/p&gt;
&lt;p&gt;并行要求再不同处理器上一起执行&lt;/p&gt;
&lt;h4 id=&#34;作业&#34;&gt;作业&lt;/h4&gt;
&lt;p&gt;是用户需要完成某项任务，要求计算机做的工作的集合&lt;/p&gt;
&lt;p&gt;一个作业可以多个进程&lt;/p&gt;
&lt;p&gt;由程序、数据、操作说明构成&lt;/p&gt;
&lt;h4 id=&#34;原语&#34;&gt;原语&lt;/h4&gt;
&lt;p&gt;由若干条指令所组成的指令序列，来实现某个特定的操作功能&lt;/p&gt;
&lt;h3 id=&#34;状态&#34;&gt;状态&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1713432511952.png&#34; alt=&#34;1713432511952&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;进程上下文切换&#34;&gt;进程上下文切换&lt;/h4&gt;
&lt;p&gt;通常由调度器执行，保存进程执行断点，切换内存映射&lt;/p&gt;
&lt;h4 id=&#34;陷入-退出内核&#34;&gt;陷入/退出内核&lt;/h4&gt;
&lt;p&gt;CPU改变状态，由中断、异常、Trap引起，需要保存执行现场&lt;/p&gt;
&lt;h2 id=&#34;线程&#34;&gt;线程&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;进程包含了两个概念：资源拥有者和可执行单元&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;现代操作系统将资源拥有者称为进程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可执行单元称为线程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程是进程中的一个实体&lt;/strong&gt;，是一个CPU调度和分派的单位，只有少量资源，与其他进程共享资源&lt;/p&gt;
&lt;p&gt;一个进程可以拥有多个线程，而一个线程同时只能被一个进程所拥有&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进程是资源分配的基本单位，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程是处理机调度的基本单位，所有的线程共享其所属进程的所有资源与代码&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;用户级线程&#34;&gt;用户级线程&lt;/h4&gt;
&lt;p&gt;线程在用户空间，内核不可感知，线程切换与内核无关，线程调度由应用决定，可运行在任何操作系统&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1716533696086.png&#34; alt=&#34;1716533696086&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;内核级线程&#34;&gt;内核级线程&lt;/h4&gt;
&lt;p&gt;内核可感知，可以在多个树立起上调度一个进程的多个线程，阻塞发生在线程级别，效率较低&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1716534608778.png&#34; alt=&#34;1716534608778&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;混合线程&#34;&gt;混合线程&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;1716534628762.png&#34; alt=&#34;1716534628762&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;管道&#34;&gt;管道&lt;/h2&gt;
&lt;p&gt;对于管道两端的进程，管道就是一个文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只存在在内存&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;无名管道&#34;&gt;无名管道&lt;/h3&gt;
&lt;p&gt;半双工，数据单向流动，&lt;strong&gt;只能用于父子进程或者兄弟进程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;单独构成一种独立文件系统，只存在在内存中&lt;/p&gt;
&lt;h3 id=&#34;有名管道&#34;&gt;有名管道&lt;/h3&gt;
&lt;p&gt;有名字，没亲缘关系的进程也能用&lt;/p&gt;
&lt;h3 id=&#34;FIFO-2&#34;&gt;FIFO&lt;/h3&gt;
&lt;p&gt;不同于管道之处在于它提供一个路径名与之关联以FIFO的文件形式存在于文件系统中，调用路径就能用&lt;/p&gt;
&lt;p&gt;先进先出&lt;/p&gt;
&lt;h3 id=&#34;消息传递&#34;&gt;消息传递&lt;/h3&gt;
&lt;p&gt;seed(destination,&amp;amp;msg) receive(source,&amp;amp;msg)&lt;/p&gt;
&lt;h1&gt;调度&lt;/h1&gt;
&lt;p&gt;进程切换：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保存处理器上下文&lt;/li&gt;
&lt;li&gt;用新状态和其他相关信息更新正在运行进程的PCB&lt;/li&gt;
&lt;li&gt;把进程移到合适的队列-就绪、阻塞&lt;/li&gt;
&lt;li&gt;选择另一个要执行的进程&lt;/li&gt;
&lt;li&gt;更新选中进程的PCB&lt;/li&gt;
&lt;li&gt;从选中进程重装入CPU上下文&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;高级调度：从用户工作流的角度，对作业的调度，时间上通常是分钟&lt;/p&gt;
&lt;p&gt;中级调度：内外存交换，从存储器资源的角度，将当前需要的部分换到内存&lt;/p&gt;
&lt;p&gt;低级调度：从CPU资源的角度，执行的单位，时间上通常是毫秒&lt;/p&gt;
&lt;h3 id=&#34;关键术语&#34;&gt;关键术语&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;周转时间&lt;/strong&gt;：作业从提交到完成所经历的时间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;响应时间&lt;/strong&gt;：用户输入请求到系统首次响应的时间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;吞吐量&lt;/strong&gt;：单位时间内所完成的作业数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;批处理进程&lt;/strong&gt;：无需与用户交互，无需很快的响应&lt;/p&gt;
&lt;p&gt;**交互式进程：**与用户交互频繁，响应时间短&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实时进程&lt;/strong&gt;：有实施要求，不能被低优先级进程阻塞，响应时间短且稳定&lt;/p&gt;
&lt;h3 id=&#34;吞吐量、平均等待时间和平均周转时间&#34;&gt;吞吐量、平均等待时间和平均周转时间&lt;/h3&gt;
&lt;p&gt;吞吐量 =  作业数 / 总执行时间，（单位时间CPU完成作业数）&lt;/p&gt;
&lt;p&gt;周转时间 = 完成时刻 - 提交时刻&lt;/p&gt;
&lt;p&gt;带权周转时间 = 周转时间 / 服务时间（执行时间）&lt;/p&gt;
&lt;p&gt;平均周转时间= 总周转时间 / 作业数量&lt;/p&gt;
&lt;p&gt;平均带权周转时间 = 总带权周转时间 / 作业数量&lt;/p&gt;
&lt;h2 id=&#34;批处理系统的调度算法&#34;&gt;批处理系统的调度算法&lt;/h2&gt;
&lt;h3 id=&#34;先来先服务FCFS&#34;&gt;先来先服务FCFS&lt;/h3&gt;
&lt;p&gt;顾名思义，利于长作业，不利于短作业；利于CPU繁忙的作业，不利于I/O繁忙的作业&lt;/p&gt;
&lt;h3 id=&#34;短作业优先SJF&#34;&gt;短作业优先SJF&lt;/h3&gt;
&lt;p&gt;先把短的优先处理，后来的短作业不抢占正在执行的。&lt;strong&gt;提高系统的吞吐量，但对长作业非常不利&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;最短剩余时间优先FRTF&#34;&gt;最短剩余时间优先FRTF&lt;/h3&gt;
&lt;p&gt;抢占式，一个新旧徐的进程如果比当前进程完成时间更短，直接抢占。&lt;strong&gt;可能使长任务长时间得不到运行&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;最高响应比优先HRRF&#34;&gt;最高响应比优先HRRF&lt;/h3&gt;
&lt;p&gt;每次选择作业投入运行时，先计算后备作业队列每个作业的响应比RP，选择最大的执行。&lt;/p&gt;
&lt;p&gt;RP = ( 已等待时间+要求运行时间 ) / 要求运行时间&lt;/p&gt;
&lt;h2 id=&#34;交互式系统的调度算法&#34;&gt;交互式系统的调度算法&lt;/h2&gt;
&lt;h3 id=&#34;时间片轮转RR&#34;&gt;时间片轮转RR&lt;/h3&gt;
&lt;p&gt;所有的就绪进程按照FCFS原则，排成1个队列；从受进程开始执行1个时间片，1个时间片结束时钟中断，将其送到就绪队列末尾&lt;/p&gt;
&lt;p&gt;T(响应时间) = N(进程数目) * q(时间片)&lt;/p&gt;
&lt;h3 id=&#34;多级队列MQ&#34;&gt;多级队列MQ&lt;/h3&gt;
&lt;p&gt;根据作业或进程的性质或类型的不同，将就绪队列再分为若干个子队列。不同队列优先级、时间片长度、调度策略等都可不同&lt;/p&gt;
&lt;h3 id=&#34;多级反馈队列MFQ&#34;&gt;多级反馈队列MFQ&lt;/h3&gt;
&lt;p&gt;设置多个就绪队列，分别赋予不同的优先级（逐级降低）&lt;/p&gt;
&lt;p&gt;新进程进入内存后，先投入队列1的末尾，按FCFS算法调度&lt;/p&gt;
&lt;p&gt;若按队列1一个时间片未能执行完，则降低投入到队列2的末尾&lt;/p&gt;
&lt;p&gt;仅当较高优先级的队列为空，才调度较低优先级的队列中的进程执行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果进程执行时有新进程进入较高优先级的队列，则抢先执行新进程，并把被抢先的进程投入原队列的末尾&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;优先级置顶&#34;&gt;优先级置顶&lt;/h3&gt;
&lt;p&gt;进入临界区的进程给予最高优先级&lt;/p&gt;
&lt;h3 id=&#34;优先级继承&#34;&gt;优先级继承&lt;/h3&gt;
&lt;p&gt;高优先级A进入临界区发现资源被低优先级的C占用，可以将A阻塞，并把A的优先级先继承给C，直到C退出临界区&lt;/p&gt;
&lt;h2 id=&#34;实时系统的调度算法&#34;&gt;实时系统的调度算法&lt;/h2&gt;
&lt;h3 id=&#34;静态表调度&#34;&gt;静态表调度&lt;/h3&gt;
&lt;p&gt;通过对所有周期性任务分析，事先确定的固定调度方案。不灵活。&lt;/p&gt;
&lt;h3 id=&#34;单调速率调度&#34;&gt;单调速率调度&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;单处理器下的最优静态调度算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;任务的周期越小，其优先级越高。优先级最高的任务最先被调度，优先级一样随机选择&lt;/p&gt;
&lt;h3 id=&#34;最早截止时间优先算法&#34;&gt;最早截止时间优先算法&lt;/h3&gt;
&lt;p&gt;任务的绝对截止时间越早，其优先级越高。&lt;/p&gt;
&lt;h2 id=&#34;多处理机调度&#34;&gt;多处理机调度&lt;/h2&gt;
&lt;p&gt;非对称式多处理系统：主－从处理机系统，由主处理机管理一个公共就绪队列&lt;/p&gt;
&lt;h3 id=&#34;对称式多处理系统&#34;&gt;对称式多处理系统&lt;/h3&gt;
&lt;p&gt;多处理器系统中，各个处理器的地位相同。&lt;/p&gt;
&lt;p&gt;静态分配：&lt;strong&gt;每个CPU设立一个就绪队列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;动态分配：公共就绪队列&lt;/p&gt;
&lt;p&gt;自调度：&lt;strong&gt;各个CPU采用公共就绪队列，每个处理及选择最适合的进程执行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;成组调度：&lt;strong&gt;将一个进程中的一组线程，每次分派时同时到一组处理机上执行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;专用处理机调度：&lt;strong&gt;为进程中的每个线程都固定分配一个CPU，直到该线程执行完成&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;死锁&lt;/h1&gt;
&lt;h3 id=&#34;发生的四个条件&#34;&gt;发生的四个条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;**互斥条件：**指进程对所分配到的资源进行排它性使用，即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放。&lt;/li&gt;
&lt;li&gt;**请求和保持条件：**指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放。&lt;/li&gt;
&lt;li&gt;**不剥夺条件：**指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。&lt;/li&gt;
&lt;li&gt;**环路等待条件：**指在发生死锁时，必然存在一个进程——资源的环形链，即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;活锁&#34;&gt;活锁&lt;/h3&gt;
&lt;p&gt;执行者没被阻塞，但忧郁某些条件没满足，一直重复尝试。有可能自行解开&lt;/p&gt;
&lt;h3 id=&#34;饥饿&#34;&gt;饥饿&lt;/h3&gt;
&lt;p&gt;某些资源分配策略不公平导致部分进程长时间等待。&lt;/p&gt;
&lt;h2 id=&#34;处理死锁&#34;&gt;处理死锁&lt;/h2&gt;
&lt;h3 id=&#34;死锁预防（静态）&#34;&gt;死锁预防（静态）&lt;/h3&gt;
&lt;p&gt;打破互斥条件（无法实现）、打破占有申请条件（不太好）&lt;/p&gt;
&lt;p&gt;打破不可剥夺条件（降低性能），&lt;/p&gt;
&lt;p&gt;打破循环等待条件：事先编好号，进程占用了大号资源禁止申请小号资源，但可以申请更大号&lt;/p&gt;
&lt;h3 id=&#34;死锁避免（动态）&#34;&gt;死锁避免（动态）&lt;/h3&gt;
&lt;p&gt;判断操作是否会死锁，如果会则加以避免&lt;/p&gt;
&lt;h4 id=&#34;银行家算法&#34;&gt;银行家算法&lt;/h4&gt;
&lt;p&gt;n为进程数量，m为资源类型数量&lt;/p&gt;
&lt;p&gt;可用资源矩阵Available ：m维&lt;/p&gt;
&lt;p&gt;最大需求矩阵Max ：n x m维 最大需求&lt;/p&gt;
&lt;p&gt;分配矩阵Allocation ： n x m 已分配的资源数量&lt;/p&gt;
&lt;p&gt;需求矩阵Need ： n x m 进程尚需的资源数&lt;/p&gt;
&lt;p&gt;设Request式进程P[j] 的请求向量&lt;/p&gt;
&lt;p&gt;1.若Request[i] &amp;gt;= Need[i] ，出错&lt;/p&gt;
&lt;p&gt;2.若Request[i] &amp;gt;= Available[i] ，出错&lt;/p&gt;
&lt;p&gt;3.分配，Available -= Request; Allocation += Request; Need -= Request;&lt;/p&gt;
&lt;p&gt;4.执行安全性算法，检查是否安全，如果不安全则不分配，安全就分配&lt;/p&gt;
&lt;h4 id=&#34;安全性算法&#34;&gt;安全性算法&lt;/h4&gt;
&lt;p&gt;1.设置向量Work = Available；设置向量Finish[i] = false，当有足够资源可以分配被该进程，Finish[i] = true;&lt;/p&gt;
&lt;p&gt;2.从进程集合中找到Finish[i] = false,Need[i]&amp;lt;=Work[i],如果找到,执行3;找不到,执行4&lt;/p&gt;
&lt;p&gt;3.释放进程资源：Work+=Allocation；Finish[i] = true；重复2.&lt;/p&gt;
&lt;p&gt;4.如果所有Finish[i] = true,安全；否则不安全&lt;/p&gt;
&lt;h2 id=&#34;死锁检测&#34;&gt;死锁检测&lt;/h2&gt;
&lt;h4 id=&#34;资源分配图&#34;&gt;资源分配图&lt;/h4&gt;
&lt;p&gt;化简：把请求边改为分配边，删除已经能运行的节点的所有边&lt;/p&gt;
&lt;p&gt;死锁定理：如果t时刻资源分配图不可完全化简，则会死锁&lt;/p&gt;
&lt;h4 id=&#34;解除死锁&#34;&gt;解除死锁&lt;/h4&gt;
&lt;p&gt;1.撤销进程：逐个撤销进程，知道有足够资源解锁死锁&lt;/p&gt;
&lt;p&gt;2.剥夺资源：挂起某些进程，剥夺其资源&lt;/p&gt;
&lt;h1&gt;IO管理&lt;/h1&gt;
&lt;p&gt;IO端口每个寄存器有唯一地址&lt;/p&gt;
&lt;p&gt;内存映射编址：控制器内存/寄存器作为物理内存空间的一部分&lt;/p&gt;
&lt;p&gt;IO独立编址：编址在内存地址外&lt;/p&gt;
&lt;h2 id=&#34;IO控制技术&#34;&gt;IO控制技术&lt;/h2&gt;
&lt;h3 id=&#34;程序控制IO&#34;&gt;程序控制IO&lt;/h3&gt;
&lt;p&gt;轮询、查询方式IO；&lt;strong&gt;CPU代表进程向I/O模块发出指令&lt;/strong&gt;，&lt;strong&gt;然后进入轮询状态&lt;/strong&gt;。&lt;strong&gt;直到操作完成之后进程才能够继续执行&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;中断驱动&#34;&gt;中断驱动&lt;/h3&gt;
&lt;p&gt;IO操作结束后，由设备控制器&lt;strong&gt;主动通知CPU结束&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;DMA（直接存储器访问）&#34;&gt;DMA（直接存储器访问）&lt;/h3&gt;
&lt;p&gt;由专门的控制器来完成数据从内存到设备或是从设备到内存的直接传输工作&lt;/p&gt;
&lt;p&gt;由程序设置DMA控制器中的若干寄存器值然后发起I/O操作;DMA控制器完成内存与外设的成批数据交换;在操作完成时由DMA控制器向CPU发出中断&lt;/p&gt;
&lt;p&gt;CR(命令/状态寄存器)：用于接受从CPU发送来的IO指令&lt;/p&gt;
&lt;p&gt;MAR（内存地址寄存器）：在输入时，它存放的数据从设备传送到内存的其实目标地址&lt;/p&gt;
&lt;p&gt;DR（数据寄存器）：用于暂存从设备到内存&lt;/p&gt;
&lt;p&gt;DC（数据计数器）：存放本次CPU要读或写的字节数&lt;/p&gt;
&lt;h3 id=&#34;通道&#34;&gt;通道&lt;/h3&gt;
&lt;p&gt;通道是一个特殊功能的处理器，有自己的指令和程序专门负责数据传输&lt;/p&gt;
&lt;p&gt;CPU将传输控制的功能下放给通道后，只负责数据处理。&lt;/p&gt;
&lt;p&gt;DMA要由CPU控制数据的传送方向、存放数据的内存起始地址和数据块长度&lt;/p&gt;
&lt;p&gt;但是通道自己就能处理&lt;/p&gt;
&lt;h3 id=&#34;设备分类&#34;&gt;设备分类&lt;/h3&gt;
&lt;p&gt;按照数据组织：&lt;/p&gt;
&lt;p&gt;块设备：数据块为单位，传输速率高，可寻址；&lt;/p&gt;
&lt;p&gt;字符设备：字符为单位传输速率低，不可寻址&lt;/p&gt;
&lt;p&gt;按照速度：低速（键鼠）、中速（打印机）、高速（磁盘）&lt;/p&gt;
&lt;h3 id=&#34;IO管理目标和任务&#34;&gt;IO管理目标和任务&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;按照用户请求，控制设备操作，完成I/O设备与内存间的数据交换，最终完成用户的I/O请求&lt;/li&gt;
&lt;li&gt;建立方便、统一的独立于设备的接口&lt;/li&gt;
&lt;li&gt;充分利用各种技术提高CPU与设备、设备与设备之间的并行工作能力，充分利用资源&lt;/li&gt;
&lt;li&gt;保护&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;LUT&#34;&gt;LUT&lt;/h4&gt;
&lt;p&gt;逻辑设备表：逻辑设备名、物理设备名、设备驱动程序入口地址&lt;/p&gt;
&lt;h4 id=&#34;设备驱动程序&#34;&gt;设备驱动程序&lt;/h4&gt;
&lt;p&gt;内核的一部分，为内核和文件提供接口&lt;/p&gt;
&lt;h2 id=&#34;设备分配&#34;&gt;设备分配&lt;/h2&gt;
&lt;p&gt;DCT（设备控制表），每个设备一张，记录类型、标识符、状态、只想控制器的指针、重复执行次数、设备请求队列头指针&lt;/p&gt;
&lt;p&gt;控制器控制表（COCT）描述IO控制器配置和状态，通道控制表（CHCT）&lt;/p&gt;
&lt;p&gt;系统设备表（SDT），反应资源状态&lt;/p&gt;
&lt;h3 id=&#34;SPOOLing技术&#34;&gt;SPOOLing技术&lt;/h3&gt;
&lt;p&gt;假脱机技术，专门利用一道程序完成IO操作。虚拟IO。&lt;/p&gt;
&lt;p&gt;SPOOLing程序预先从外设读取数据并加以缓冲，在以后需要的时候输入到应用程序；接受应用程序的输出数据并加以缓冲，在以后适当的时候输出到外设&lt;/p&gt;
&lt;p&gt;程序虚拟IO操作与实际IO操作分离，可共享原本独享设备&lt;/p&gt;
&lt;h2 id=&#34;缓冲&#34;&gt;缓冲&lt;/h2&gt;
&lt;p&gt;输出：T ；传送：M ；处理：C&lt;/p&gt;
&lt;h4 id=&#34;单缓冲&#34;&gt;单缓冲&lt;/h4&gt;
&lt;p&gt;T和C可以并行&lt;/p&gt;
&lt;p&gt;处理一块数据的时间约为Max（C，T）+M&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1717313218710.png&#34; alt=&#34;1717313218710&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;双缓冲&#34;&gt;双缓冲&lt;/h4&gt;
&lt;p&gt;T和M、C可以并行&lt;/p&gt;
&lt;p&gt;有俩缓冲，处理一块数据的时间约为Max（C+M，T）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1717313230574.png&#34; alt=&#34;1717313230574&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;环形缓冲&#34;&gt;环形缓冲&lt;/h4&gt;
&lt;p&gt;多个&lt;strong&gt;缓冲区&lt;/strong&gt;，缓冲区分为空缓冲区R，装满的缓冲区G，正在使用的工作缓冲区C&lt;/p&gt;
&lt;p&gt;多个&lt;strong&gt;指针&lt;/strong&gt;，计算进程下一个可用缓冲区Nextg，输入进程下次可用缓冲区Nexti，计算进程正在使用缓冲区Current&lt;/p&gt;
&lt;h4 id=&#34;缓冲池&#34;&gt;缓冲池&lt;/h4&gt;
&lt;p&gt;包含空缓冲区，装满输入缓冲区，装满输出缓冲区&lt;/p&gt;
&lt;p&gt;相同类型缓冲区连成&lt;strong&gt;链表&lt;/strong&gt;，emq、inq、outq&lt;/p&gt;
&lt;h2 id=&#34;IO性能&#34;&gt;IO性能&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;使CPU利用率尽可能不被I/O降低&lt;/strong&gt;；&lt;strong&gt;使CPU尽可能摆脱I/O&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1717314873536.png&#34; alt=&#34;1717314873536&#34;&gt;&lt;/p&gt;
&lt;h1&gt;磁盘管理&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;磁盘是块设备&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;扇区，磁道，柱面&lt;/p&gt;
&lt;p&gt;磁盘扇区一部分存储硬盘固件，剩下的是工作区（硬盘标定容量的扇区）和保留区（剩下的）&lt;/p&gt;
&lt;h4 id=&#34;MBR&#34;&gt;MBR&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;硬盘的0柱面、0磁头、1扇区称为主引导扇区（MBR）&lt;/strong&gt;，512字节&lt;/p&gt;
&lt;p&gt;前446字节为启动代码及数据&lt;/p&gt;
&lt;p&gt;之后则是分区表（DPT）：&lt;strong&gt;分区表由四个分区项组成，每个分区项数据为16字节录了启动时需要的分区参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;后面紧接着两个字节AA和55被称为幻数。BOIS读取MBR的时候总是检查最后是不是有这两个幻数,如果没有就被认为是一个没有被分区的硬盘&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个硬盘主分区至少有1个，最多4个，扩展分区可以没有，最多1个&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主分区只能有一个是激活的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1716208805674.png&#34; alt=&#34;1716208805674&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;时间计算&#34;&gt;时间计算&lt;/h4&gt;
&lt;p&gt;寻道时间Ts = mn + s；m是常熟，n是移动了n条磁道，s是启动时间&lt;/p&gt;
&lt;p&gt;旋转延迟 Tr = 1 / 2r；r是转速&lt;/p&gt;
&lt;p&gt;传输时间 Tt = b/rN ；b是读写的字节数，r是转速，N是磁道上字节数&lt;/p&gt;
&lt;p&gt;访问时间 Ta = Ts + Tr + Tt&lt;/p&gt;
&lt;h2 id=&#34;调度算法&#34;&gt;调度算法&lt;/h2&gt;
&lt;p&gt;FCFS：先来先服务：公平、简单，&lt;strong&gt;寻道距离大&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SSTF：最短寻道时间优先；优先选择距离当前磁头最近的：&lt;strong&gt;可能饥饿&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SCAN：扫描算法；按一个方向到头，然后调转继续（入50→0→67→199）&lt;strong&gt;不利于远离磁头一端的访问&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CSCAN：循环扫描，按一个方向到头，立刻跳到0继续同方向扫&lt;/p&gt;
&lt;p&gt;CLOOK：类似CSCAN，但是到最外侧的请求后就立刻返回，而不是到最外侧柱面&lt;/p&gt;
&lt;h2 id=&#34;磁盘空间管理&#34;&gt;磁盘空间管理&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;位图&lt;/strong&gt;：每个物理块对应一位，返回对应物理块号。0为分配的，1为空闲&lt;/p&gt;
&lt;p&gt;空闲表：所有空闲块记录在一个表。记录起始块号、空闲块数量&lt;/p&gt;
&lt;p&gt;成组链接法：空闲块链表&lt;/p&gt;
&lt;h2 id=&#34;RAID&#34;&gt;RAID&lt;/h2&gt;
&lt;p&gt;NOR Flash比NAND Flash快，单连续大数据传输二者差别不大，但是NOR贵&lt;/p&gt;
&lt;p&gt;RAID：廉价冗余磁盘阵列&lt;/p&gt;
&lt;h4 id=&#34;RAID0&#34;&gt;RAID0&lt;/h4&gt;
&lt;p&gt;条带化存储，N个磁盘组成的RAID0理论上读写速度是N倍&lt;/p&gt;
&lt;h4 id=&#34;RAID1&#34;&gt;RAID1&lt;/h4&gt;
&lt;p&gt;镜像存储。&lt;strong&gt;通过磁盘数据镜像实现数据冗余&lt;/strong&gt;。在原始数据繁忙时，可以从镜像中拷贝，可以提高性能。成本最高。安全性高。可以通过镜像恢复丢失的数据&lt;/p&gt;
&lt;h4 id=&#34;RAID2&#34;&gt;RAID2&lt;/h4&gt;
&lt;p&gt;海明码校验条带存储&lt;/p&gt;
&lt;p&gt;将数据条块化地分布在不同硬盘，条块单位为位或字节，使用海明码提供错误检查和恢复&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并行存取，各个驱动器同步工作&lt;/strong&gt;，&lt;strong&gt;数据传输率高&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需要多个磁盘来存放海明校验码信息多磁盘易出错环境中的有效选择，&lt;strong&gt;并未被广泛应用&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;RAID3&#34;&gt;RAID3&lt;/h4&gt;
&lt;p&gt;奇偶校验条带存储，共享校验盘，数据条带存储单位为**&lt;u&gt;字节&lt;/u&gt;**&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类似RAAID2，但是使用奇偶校验。对于大量的连续数据可提供很好的传输率。但对于随机数据来说，奇偶盘会成为写操作的瓶颈&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;读写要访问组中所有盘&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先将分布在各个数据盘上的一组数据加起来，将和存放在冗余盘上。只要将冗余盘上的和减去所有正确盘上的数据，得到的差就是出错的盘上的数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点：恢复时间较长&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;RAID4&#34;&gt;RAID4&lt;/h4&gt;
&lt;p&gt;奇偶校验条带存储，共享校验盘，数据条带存储单位为**&lt;u&gt;块&lt;/u&gt;**&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;冗余代价与RAID3相同&lt;/strong&gt;，&lt;strong&gt;访问数据的方法与RAID3不同&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;RAID5&#34;&gt;RAID5&lt;/h4&gt;
&lt;p&gt;奇偶校验条带存储，校验数据分布式存储，数据条带存储单位为**&lt;u&gt;块&lt;/u&gt;**&lt;/p&gt;
&lt;p&gt;所有盘上交叉存取数据和奇偶校验信息。&lt;strong&gt;读/写指针可同时对阵列设备进行操作，提供了更高的数据流量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;写损失：每次写都要产生四次读写操作：读取旧的数据和奇偶信息；写新的数据和奇偶信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当两块盘坏掉的时候，整个RAID的数据失效&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;RAID6&#34;&gt;RAID6&lt;/h4&gt;
&lt;p&gt;奇偶校验条带存储，&lt;strong&gt;两个分布式存储的校验数据&lt;/strong&gt;，数据条带存储单位为**&lt;u&gt;块&lt;/u&gt;**&lt;/p&gt;
&lt;p&gt;数据可靠性高，但是要更多冗余空间，更大的写损失&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1717320020254.png&#34; alt=&#34;1717320020254&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;条带化：一个字节块可能存放在多个数据盘上&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点：并行存取，性能好，磁盘负载均衡&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：可靠性、不同IO请求需要排队&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;镜像：数据完全拷贝一份&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点：可靠性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：存储开销&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;校验：数据通过某种运算（异或）得出，用以检验该组数字的正确性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点：可靠性，快速恢复&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：开销&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;提高IO速度&#34;&gt;提高IO速度&lt;/h3&gt;
&lt;p&gt;提前读取、延迟写&lt;/p&gt;
&lt;p&gt;虚拟盘（RAM）&lt;/p&gt;
&lt;h3 id=&#34;磁盘管理实例&#34;&gt;磁盘管理实例&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;WINDOWS 2000 把基于MS—DOS分区方式的盘称为基本盘&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动态盘支持创建新的多分区卷&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本盘的多分区卷的配置信息保存在注册表中。动态盘的多分区卷的配置信息保存在磁盘中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;系统卷是WINDOWS2000存放引导文件的地方，包括引导程序（NTLDR）和NTDETECT&lt;/p&gt;
&lt;p&gt;引 导 卷 是 WINDOWS2000 存 放 系 统 文 件 ， 如NTOSKRNL.EXE核心内核文件的地方&lt;/p&gt;
&lt;h1&gt;文件系统&lt;/h1&gt;
&lt;p&gt;操作系统中与文件管理有关的那部分软件和被管理的文件以及实施管理所需要的数据结构的总体&lt;/p&gt;
&lt;p&gt;为了对系统管理者和用户提供透明存取&lt;/p&gt;
&lt;p&gt;文件系统接口：命令行接口、程序接口&lt;/p&gt;
&lt;p&gt;对象操作管理的软件集合：对存储空间、目录的管理、逻辑地址物理地址转换、读写管理、共享保护功能&lt;/p&gt;
&lt;p&gt;管理对象：文件、目录、磁盘存储空间&lt;/p&gt;
&lt;p&gt;流式文件：构成文件基本单位为字符&lt;/p&gt;
&lt;p&gt;记录式文件：由若干记录组成，按照记录读写、查找&lt;/p&gt;
&lt;p&gt;目录内容：文件名、别名、文件类型、地址星系、访问控制信息、使用信息&lt;/p&gt;
&lt;h2 id=&#34;文件系统实现&#34;&gt;文件系统实现&lt;/h2&gt;
&lt;h3 id=&#34;文件&#34;&gt;文件&lt;/h3&gt;
&lt;h4 id=&#34;文件控制块FCB内容&#34;&gt;文件控制块FCB内容&lt;/h4&gt;
&lt;p&gt;基本信息：文件名、物理位置、文件逻辑结构、文件物理结构&lt;/p&gt;
&lt;p&gt;访问控制信息：文件所有者（创建文件的用户）、访问权限&lt;/p&gt;
&lt;p&gt;使用信息：创建时间，上一次修改时间、当前使用信息&lt;/p&gt;
&lt;h4 id=&#34;连续结构&#34;&gt;连续结构&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;1717407058851.png&#34; alt=&#34;1717407058851&#34;&gt;&lt;/p&gt;
&lt;p&gt;优点：结构简单，不需要额外空间开销，支持顺序和随机存取，连续存取速度快&lt;/p&gt;
&lt;p&gt;缺点：文件长度一经笃定不易改变，不利于文件动态增加修改&lt;/p&gt;
&lt;h4 id=&#34;串联结构&#34;&gt;串联结构&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;1717407270584.png&#34; alt=&#34;1717407270584&#34;&gt;&lt;/p&gt;
&lt;p&gt;优点：空间利用率高，文件动态扩充容易，顺序存取效率高&lt;/p&gt;
&lt;p&gt;缺点：随机存取效率低。有可靠性问题，指针耗费空间&lt;/p&gt;
&lt;h4 id=&#34;索引结构&#34;&gt;索引结构&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;1717407550816.png&#34; alt=&#34;1717407550816&#34;&gt;&lt;/p&gt;
&lt;p&gt;优点：能顺序存取、随机存取、动态增长&lt;/p&gt;
&lt;p&gt;缺点：额外空间开销&lt;/p&gt;
&lt;h3 id=&#34;目录&#34;&gt;目录&lt;/h3&gt;
&lt;p&gt;根据用户给出路径名，迅速定位到文件控制块&lt;/p&gt;
&lt;p&gt;目录项= 文件名+（FCB或FCB的地址）&lt;/p&gt;
&lt;p&gt;长文件名：固定目录项，长度可变的文件名放在目录文件末尾&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1717420489566.png&#34; alt=&#34;1717420489566&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;硬链接软连接&#34;&gt;硬链接软连接&lt;/h3&gt;
&lt;p&gt;硬链接：俩都指向同一个Inode&lt;/p&gt;
&lt;p&gt;软连接：重定向到对应Inode&lt;/p&gt;
&lt;h3 id=&#34;文件保护&#34;&gt;文件保护&lt;/h3&gt;
&lt;p&gt;建立副本：简单、开销大&lt;/p&gt;
&lt;p&gt;定时转储&lt;/p&gt;
&lt;p&gt;磁盘块一致性检查：检查记录在文件和空闲块中出现的次数，计数器&lt;/p&gt;
&lt;p&gt;文件一致性：检查记录在i节点和文件目录中引用的次数&lt;/p&gt;
&lt;h3 id=&#34;提高性能&#34;&gt;提高性能&lt;/h3&gt;
&lt;p&gt;目录项（FCB）分解、当前目录、磁盘碎片整理、块高速缓存、磁盘调度、提前读取、合理分配磁盘空间、信息的优化分布、RAID技术等&lt;/p&gt;
&lt;h3 id=&#34;基于日志的文件系统&#34;&gt;基于日志的文件系统&lt;/h3&gt;
&lt;p&gt;数据结构：inode、inode map、段（包含数据块、元数据、日志）、段摘要（每一个数据块的信息）、段使用情况表（段数据块中有效数据量）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1717422006392.png&#34; alt=&#34;1717422006392&#34;&gt;&lt;/p&gt;
&lt;p&gt;写操作会在内存段segment缓冲区加入新数据快，segment写满后把数据写到磁盘&lt;/p&gt;
&lt;p&gt;失效恢复：回滚恢复到最后一个检查点&lt;/p&gt;
&lt;p&gt;清理：整理碎片&lt;/p&gt;
&lt;h2 id=&#34;文件系统实例&#34;&gt;文件系统实例&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;FAT系统&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;簇：若干个扇区组成，从0编号&lt;/p&gt;
&lt;p&gt;文件系统数据记录在引导扇区中。文件分配表（FAT）用于描述簇的分配和下一簇号&lt;/p&gt;
&lt;p&gt;FAT表项2字节，目录项32字节&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UFS系统&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多级文件目录，有常规文件、目录文件、特殊文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EXT2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;磁盘划分成相同大小的块，组成若干块组，每个块组有一个inode&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;VFS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虚拟文件系统：设备、索引节点编号、模式、用户标识符、块大小、时间&lt;/p&gt;
&lt;p&gt;1.寻找对应的文件系统信息。VFS 通过 file_systems在 file_system_type 组成的链表中根据指定的文件系统名称搜索文件系统类型信息&lt;/p&gt;
&lt;p&gt;2.如果在上述链表中找到匹配的文件系统，则说明内核具有对该文件系统的内建支持。否则，说明该文件系统可能由可装载模块支持，VFS 会请求内核装入相应的文件系统模块，此时，该文件系统在 VFS 中注册并初始化。&lt;/p&gt;
&lt;p&gt;3.看不懂&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.unfinished.top/2024/01/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/</guid>
            <title>计算机组成</title>
            <link>https://blog.unfinished.top/2024/01/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/</link>
            <category>大学</category>
            <category>总结</category>
            <category>计组</category>
            <pubDate>Mon, 08 Jan 2024 10:16:31 +0000</pubDate>
            <description><![CDATA[ &lt;h1&gt;-1 蛤？&lt;/h1&gt;
&lt;p&gt;1个字节（byte）= 8位（bit）&lt;/p&gt;
&lt;p&gt;32位系统中，1 字 = 4 字节；64位，1 字 = 8 字节&lt;/p&gt;
&lt;p&gt;在 MIPS 指令集中可以用来实现跳转到 4GB 空间内任意地址的指令是 &lt;strong&gt;jr&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;j：可跳转226+2=228个地址单元，即228+3bits = 256 MB&lt;/p&gt;
&lt;p&gt;beq：256 KB&lt;/p&gt;
&lt;h1&gt;0 绪论&lt;/h1&gt;
&lt;h3 id=&#34;冯诺依曼架构&#34;&gt;冯诺依曼架构&lt;/h3&gt;
&lt;p&gt;计算机应由运算器、控制器、存储器、输入设备和输出设备五个基本部件组成。&lt;/p&gt;
&lt;p&gt;存储器不仅能存放数据，而且也能存放指令，形式上两者没有区别，但计算机应能区分数据还是指令；控制器应能自动取出指令来执行；运算器应能进行加/减/乘/除四种基本算术运算，并且也能进行一些逻辑运算和附加运算；操作人员可以通过输入设备、输出设备和主机进行通信。&lt;/p&gt;
&lt;h3 id=&#34;抽象&#34;&gt;抽象&lt;/h3&gt;
&lt;p&gt;文件是对 I/0 设备的抽象&lt;/p&gt;
&lt;p&gt;虚拟内存是对程序存储器的抽象&lt;/p&gt;
&lt;p&gt;进程是对一个正在运行的程序的抽象：是在给定数据集上的一次程序执行&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1703731953839.png&#34; alt=&#34;1703731953839&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;并发并行&#34;&gt;并发并行&lt;/h3&gt;
&lt;p&gt;并发:  逻辑上的并行，物理上交替执行（使系统能够同时处理多个任务）&lt;/p&gt;
&lt;p&gt;并行:  物理上的并行（使系统真正地运行更快）&lt;/p&gt;
&lt;h1&gt;1 数制与运算&lt;/h1&gt;
&lt;h2 id=&#34;进制&#34;&gt;进制&lt;/h2&gt;
&lt;h3 id=&#34;进制转换&#34;&gt;进制转换&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1703732717527.png&#34; alt=&#34;1703732717527&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1703732759516.png&#34; alt=&#34;1703732759516&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;补码&#34;&gt;补码&lt;/h3&gt;
&lt;p&gt;补码取反加一 0011 → 1101  (3 → -3)     取反加一和减一取反效果一样&lt;/p&gt;
&lt;p&gt;反码只取反，原码只改符号位&lt;/p&gt;
&lt;h3 id=&#34;补码运算&#34;&gt;补码运算&lt;/h3&gt;
&lt;p&gt;[X+Y]补= [X]补+ [Y]补，[X-Y]补=[X]补+[-Y]补&lt;/p&gt;
&lt;p&gt;3+4 = 7  0011+0100 = 0111&lt;/p&gt;
&lt;p&gt;3-4 = -1  0011+1100 = 1111&lt;/p&gt;
&lt;h3 id=&#34;浮点数表示&#34;&gt;浮点数表示&lt;/h3&gt;
&lt;p&gt;阶码：01000    尾数：0.10110010001&lt;/p&gt;
&lt;p&gt;178.125 =  10110010.001 = 0.10110010001 * （2^01000）&lt;/p&gt;
&lt;h3 id=&#34;浮点数规格化&#34;&gt;浮点数规格化&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1704519002020.png&#34; alt=&#34;1704519002020&#34;&gt;&lt;/p&gt;
&lt;p&gt;数符 S： 1位，0表示正数，1表示负数&lt;/p&gt;
&lt;p&gt;阶码 E：用移码表示，n 位阶码偏移量为 2n-1-1&lt;/p&gt;
&lt;p&gt;如8位阶码偏移量为 7FH（即127）， 11位阶码偏移量3FFH（即1023）&lt;/p&gt;
&lt;p&gt;尾数 M： 尾数必须规格化成小数点左侧一定为1，并且小数点前面这个1作为隐含位被省略。这样单精度浮点数尾数实际上为24位&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;计算： 1.m * 2^(E-127)  如果是双精度，是E-1023&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;E一定要先减&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106140221740.png&#34; alt=&#34;image-20240106140221740&#34; style=&#34;zoom: 50%;&#34; /&gt;&lt;img src=&#34;image-20240106140645838.png&#34; alt=&#34;image-20240106140645838&#34; style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2的-126 ~ 127次方&lt;/p&gt;
&lt;h3 id=&#34;大端小端&#34;&gt;大端小端&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;大端存储模式&lt;/strong&gt;：数据的低位保存在内存中的高地址中，数据的高位保存在内存中的低地址中；&lt;br&gt;
&lt;strong&gt;小端存储模式&lt;/strong&gt;：数据的低位保存在内存中的低地址中，数据的高位保存在内存中的高地址中；&lt;/p&gt;
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200525162747150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4NjU5Mg==,size_16,color_FFFFFF,t_70&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;h3 id=&#34;各种编码表示10进制&#34;&gt;各种编码表示10进制&lt;/h3&gt;
&lt;p&gt;8421：正常，0＝0000 1＝0001 2＝0010 3＝0011 4＝0100 … 9＝1001&lt;/p&gt;
&lt;p&gt;5421：… 3＝0011 4＝0100 5＝1000 … 9＝1100 ; 而0101是禁止码&lt;/p&gt;
&lt;p&gt;2421：… 4＝0100  5＝1011  6＝1100  7＝1101  8＝1110  9＝1111&lt;/p&gt;
&lt;p&gt;余3：每个字符编码比相应的8421码多3，0＝0011 1＝0100 2＝0101 3＝0110 … 9＝1100&lt;/p&gt;
&lt;p&gt;不是重点，但是挺逆天的&lt;/p&gt;
&lt;h2 id=&#34;逻辑代数&#34;&gt;逻辑代数&lt;/h2&gt;
&lt;p&gt;按位或：“|”&lt;/p&gt;
&lt;p&gt;按位与：“&amp;amp;”&lt;/p&gt;
&lt;p&gt;按位取反：“~”（单目运算）&lt;/p&gt;
&lt;p&gt;按位异或：“^”&lt;/p&gt;
&lt;p&gt;左移：高位移出，低位补0。可能溢出！&lt;/p&gt;
&lt;p&gt;右移：低位移出，高位补符，可能发生有效数据丢失。&lt;/p&gt;
&lt;p&gt;与：F = A·B ，F=AB   或者    F = A∧B&lt;/p&gt;
&lt;p&gt;或：F = A + B    或者  F = A ∨ B&lt;/p&gt;
&lt;p&gt;异或F=A 圆中间一个十字B&lt;/p&gt;
&lt;p&gt;同或F = A⊙ B&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1704522811761.png&#34; alt=&#34;1704522811761&#34; style=&#34;zoom: 50%;&#34; /&gt;&lt;img src=&#34;1704524870583.png&#34; alt=&#34;1704524870583&#34;&gt;&lt;/p&gt;
&lt;p&gt;对偶定理：将原函数F中的全部 “•” 换成 “+”，“+” 换成 “•”，“0”换成 “1”，“1” 换成 “0”，所得的新函数就是原函数的对偶式，记作F’或F*&lt;/p&gt;
&lt;p&gt;由n个变量组成的 “与” 项中，每个变量以原变量或反变量的形式出现且仅出现一次，则这个与项称为最小项&lt;/p&gt;
&lt;p&gt;n个变量有2^n个最小项&lt;/p&gt;
&lt;p&gt;全部由最小项构成的与或式，也称标准与或式&lt;/p&gt;
&lt;img src=&#34;1704523166223.png&#34; alt=&#34;1704523166223&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;img src=&#34;1704523282308.png&#34; alt=&#34;1704523282308&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;img src=&#34;1704523306716.png&#34; alt=&#34;1704523306716&#34; style=&#34;zoom:45%;&#34; /&gt;
&lt;h3 id=&#34;简化公式&#34;&gt;简化公式&lt;/h3&gt;
&lt;img src=&#34;1704523501199.png&#34; alt=&#34;1704523501199&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;&lt;img src=&#34;1704523947036.png&#34; alt=&#34;1704523947036&#34; style=&#34;zoom:50%;&#34; /&gt;吸收率1&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1704523908797.png&#34; alt=&#34;1704523908797&#34; style=&#34;zoom:50%;&#34; /&gt;吸收率2&lt;/p&gt;
&lt;h1&gt;2 数字逻辑&lt;/h1&gt;
&lt;h2 id=&#34;组合逻辑&#34;&gt;组合逻辑&lt;/h2&gt;
&lt;p&gt;从结构看，组合逻辑电路由门电路构成，不含   反馈电路       ，也不含   存储电路      ，信号从输入开始单向传输到输出。对于组合逻辑电路，任何时刻电路的输出仅由当时的  输入信号       决定&lt;/p&gt;
&lt;h3 id=&#34;半加器&#34;&gt;半加器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106150537827.png&#34; alt=&#34;image-20240106150537827&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;img src=&#34;image-20240106150548415.png&#34; alt=&#34;image-20240106150548415&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;全加器&#34;&gt;全加器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106150930863.png&#34; alt=&#34;image-20240106150930863&#34; style=&#34;zoom: 50%;&#34; /&gt;&lt;img src=&#34;image-20240106151004002.png&#34; alt=&#34;image-20240106151004002&#34; style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;img src=&#34;image-20240106150945894.png&#34; alt=&#34;image-20240106150945894&#34; style=&#34;zoom: 80%;&#34; /&gt;
&lt;h4 id=&#34;溢出&#34;&gt;溢出&lt;/h4&gt;
&lt;p&gt;“00”表示正，“11”表示负，如果运算结果符号位出现“01”（正溢）或“10” （负溢）都表示出现溢出&lt;/p&gt;
&lt;p&gt;6 = 0110   7 = 0111   6+7 = 01101，正溢出&lt;/p&gt;
&lt;p&gt;-6=1010     -7=1001  -6-7 = 10011，负溢出&lt;/p&gt;
&lt;p&gt;-3 = 1101    -3-3 = 11010  负数不溢出&lt;/p&gt;
&lt;h3 id=&#34;数值比较器&#34;&gt;数值比较器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106155205001.png&#34; alt=&#34;image-20240106155205001&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;img src=&#34;image-20240106155231376.png&#34; alt=&#34;image-20240106155231376&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;ALU&#34;&gt;ALU&lt;/h3&gt;
&lt;p&gt;操作数，选择数&lt;/p&gt;
&lt;h3 id=&#34;编码器&#34;&gt;编码器&lt;/h3&gt;
&lt;p&gt;某一个输入端的信号变换成相应的一组二进制代码输出的过程叫做   编码&lt;/p&gt;
&lt;img src=&#34;image-20240106160236976.png&#34; alt=&#34;image-20240106160236976&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;&lt;img src=&#34;1704528511028.png&#34; alt=&#34;1704528511028&#34; style=&#34;zoom: 50%;&#34; /&gt;74147优先编码器（谁优先输出谁）&lt;/p&gt;
&lt;h3 id=&#34;译码器&#34;&gt;译码器&lt;/h3&gt;
&lt;p&gt;将二进制代码所表示的信息翻译成对应高低电平信号输出的过程称为译码&lt;/p&gt;
&lt;p&gt;3线-8线译码器（74138）&lt;/p&gt;
&lt;p&gt;3个输入：A2，A1，A0；000~111共8种输入组合。&lt;/p&gt;
&lt;p&gt;8个输出：Y7~Y0，&lt;strong&gt;低电平&lt;/strong&gt;输出有效；任何时刻最多只有一个输出有效。当输入为000时，Y0输出有效；当输入为001时，Y1输出有效。&lt;/p&gt;
&lt;p&gt;3个使能控制：S0，S1，S2 为使能输入，仅当它们分别为1、0、0时，译码器才正常译码；否则禁止工作。&lt;/p&gt;
&lt;h3 id=&#34;多路选择器&#34;&gt;多路选择器&lt;/h3&gt;
&lt;img src=&#34;image-20240106162146201.png&#34; alt=&#34;image-20240106162146201&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;若D7-D0  = 10100101&lt;/p&gt;
&lt;p&gt;Y = m7+m5+m2+m0&lt;/p&gt;
&lt;h3 id=&#34;竞争冒险&#34;&gt;竞争冒险&lt;/h3&gt;
&lt;h4 id=&#34;竞争&#34;&gt;竞争&lt;/h4&gt;
&lt;p&gt;某个输入变量通过两条或两条以上的途径传到输出端，由于每条途径延迟时间不同，到达输出门的时间就有先有后&lt;/p&gt;
&lt;h4 id=&#34;冒险&#34;&gt;冒险&lt;/h4&gt;
&lt;p&gt;门电路因输入端的竞争而导致输出端产生不正常的尖峰干扰脉冲信号（毛刺）的现象&lt;/p&gt;
&lt;p&gt;A+ !A 存在0冒险          A ·!A存在1冒险&lt;/p&gt;
&lt;h4 id=&#34;卡诺图法判断&#34;&gt;卡诺图法判断&lt;/h4&gt;
&lt;p&gt;在逻辑函数的卡诺图中，函数的每个与项对应卡诺图上的一个卡诺圈，若两个卡诺圈相切，相切处将存在冒险。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1704530434352.png&#34; alt=&#34;1704530434352&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;img src=&#34;1704530834543.png&#34; alt=&#34;1704530834543&#34; style=&#34;zoom: 67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;增加冗余项。&lt;/p&gt;
&lt;p&gt;L=AC+ ̅AB，当B=C=1时， L=A+ ̅A，存在冒险。增加冗余项 L=AC+  ̅AB+BC，逻辑函数功能不变，冒险消除。&lt;/p&gt;
&lt;h2 id=&#34;时序逻辑&#34;&gt;时序逻辑&lt;/h2&gt;
&lt;h3 id=&#34;锁存器和触发器&#34;&gt;锁存器和触发器&lt;/h3&gt;
&lt;p&gt;锁存器是电位（电平）触发的，只有在时钟CP有效电平（高电平CP=1或者低电平CP＝0）期间，触发器的状态才有可能发生变化。&lt;/p&gt;
&lt;p&gt;触发器的状态变化只发生在时钟CP的有效沿（上升沿或者下降沿）期间，CP＝1、CP=0时触发器的状态不会发生变化&lt;/p&gt;
&lt;p&gt;D锁存：CP=0保持；CP=1置为D的值&lt;/p&gt;
&lt;h4 id=&#34;D触发器&#34;&gt;D触发器&lt;/h4&gt;
&lt;p&gt;D触发由2个D锁存组成；CP从0到1触发&lt;/p&gt;
&lt;p&gt;加使能EN：EN=1正常，EN=0一直保持&lt;/p&gt;
&lt;h4 id=&#34;JK触发器&#34;&gt;JK触发器&lt;/h4&gt;
&lt;p&gt;J0K0，输出不变； J0K1，输出为0； J1K0，输出为1；J1K1，输出反转&lt;/p&gt;
&lt;h3 id=&#34;状态机&#34;&gt;状态机&lt;/h3&gt;
&lt;h4 id=&#34;Moore&#34;&gt;Moore&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;1704532315803.png&#34; alt=&#34;1704532315803&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;img src=&#34;1704535620164.png&#34; alt=&#34;1704535620164&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;输出信号仅与当前状态有关&lt;/p&gt;
&lt;h4 id=&#34;Mealy&#34;&gt;Mealy&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106171247758.png&#34; alt=&#34;image-20240106171247758&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;img src=&#34;1704535645537.png&#34; alt=&#34;1704535645537&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;输出信号与当前状态及输入信号有关&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1704535954265.png&#34; alt=&#34;1704535954265&#34; style=&#34;zoom:33%;&#34; /&gt;&lt;strong&gt;状态转移表长这样&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;移位寄存器&#34;&gt;移位寄存器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1704537187152.png&#34; alt=&#34;1704537187152&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;img src=&#34;image-20240106183331197.png&#34; alt=&#34;image-20240106183331197&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;脉冲一次移位一次&lt;/p&gt;
&lt;h3 id=&#34;计数器&#34;&gt;计数器&lt;/h3&gt;
&lt;h4 id=&#34;同步&#34;&gt;同步&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106184440187.png&#34; alt=&#34;image-20240106184440187&#34; style=&#34;zoom:50%;&#34; /&gt;同步计数器&lt;/p&gt;
&lt;img src=&#34;image-20240106184621964.png&#34; alt=&#34;image-20240106184621964&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h4 id=&#34;异步&#34;&gt;异步&lt;/h4&gt;
&lt;img src=&#34;image-20240106184719666.png&#34; alt=&#34;image-20240106184719666&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;img src=&#34;image-20240106184645318.png&#34; alt=&#34;image-20240106184645318&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h3 id=&#34;时钟同步？&#34;&gt;时钟同步？&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1704538203568.png&#34; alt=&#34;1704538203568&#34;&gt;&lt;/p&gt;
&lt;p&gt;Tccq：触发器时钟到Q的最小延迟&lt;/p&gt;
&lt;img src=&#34;1704539135847.png&#34; alt=&#34;1704539135847&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;p&gt;Tcd：组合逻辑的延迟&lt;/p&gt;
&lt;h1&gt;3 汇编&lt;/h1&gt;
&lt;h2 id=&#34;寻址&#34;&gt;寻址&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;立即寻址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;操作数直接在指令代码中给出。addi $s1, $s2, 100&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;寄存器直接寻址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;操作数在寄存器中，指令地址字段给出寄存器的地址  add &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;s1,&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8388800000000001em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;s2,$s3&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;寄存器间接寻址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;操作数在存储器中，指令地址字段中给出的寄存器的内容是操作数在存储器中的地址 lw  &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;s1, 0(&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;s2)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基址寻址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;操作数在存储器中，指令地址字段给出一基址寄存器和一形式地址，基址寄存器的内容与形式地址之和是操作数的内存地址 lw  &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mn&gt;100&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;s1,***100***(&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8388800000000001em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.46528em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;s2)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;变址寻址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;操作数在存储器中，指令地址字段给出一变址寄存器和一形式地址，变址寄存器的内容与形式地址之和是操作数的内存地址 lb &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;t1, string(&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;t0)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相对寻址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基址寻址的特例，由程序计数器PC作为基址寄存器，指令中给出的形式地址作为位移量，二者之和是操作数的内存地址。beq  $s1, $s2,  100&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;堆栈寻址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;压栈SP -= 4；出栈SP += 4；&lt;/p&gt;
&lt;h2 id=&#34;指令&#34;&gt;指令&lt;/h2&gt;
&lt;h3 id=&#34;指令类型-R-I-J&#34;&gt;指令类型 R/I/J&lt;/h3&gt;
&lt;p&gt;R：两个寄存器运算，结果存到第三个&lt;/p&gt;
&lt;p&gt;I：有1个符号立即数&lt;/p&gt;
&lt;p&gt;J：跳转，26位跳转地址&lt;/p&gt;
&lt;img src=&#34;image-20240106192507043.png&#34; alt=&#34;image-20240106192507043&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;h3 id=&#34;指令格式&#34;&gt;指令格式&lt;/h3&gt;
&lt;h4 id=&#34;R-Type&#34;&gt;R-Type&lt;/h4&gt;
&lt;p&gt;OP永为000000&lt;/p&gt;
&lt;p&gt;add：&lt;/p&gt;
&lt;img src=&#34;image-20240106192749894.png&#34; alt=&#34;image-20240106192749894&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;p&gt;&lt;strong&gt;逻辑左移sll&lt;/strong&gt; &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;t1,&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8388800000000001em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;t2,10也是R型，10存在Shamt里；sllv $t1, $t2, $t3&lt;/p&gt;
&lt;p&gt;jr $t1  # PC = $t1&lt;/p&gt;
&lt;img src=&#34;image-20240106193339782.png&#34; alt=&#34;image-20240106193339782&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h4 id=&#34;I-Type&#34;&gt;I-Type&lt;/h4&gt;
&lt;p&gt;rt ← rs + immediate&lt;/p&gt;
&lt;img src=&#34;image-20240106195235935.png&#34; alt=&#34;image-20240106195235935&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;rt ← memory[base + offest]&lt;/p&gt;
&lt;img src=&#34;image-20240106195301150.png&#34; alt=&#34;image-20240106195301150&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;img src=&#34;image-20240106195442117.png&#34; alt=&#34;image-20240106195442117&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;if (rs = rt) then PC ← PC + sign_extend&lt;/p&gt;
&lt;img src=&#34;image-20240106195502445.png&#34; alt=&#34;image-20240106195502445&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h4 id=&#34;J-Type&#34;&gt;J-Type&lt;/h4&gt;
&lt;p&gt;j直接跳转&lt;/p&gt;
&lt;img src=&#34;image-20240106195551348.png&#34; alt=&#34;image-20240106195551348&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;jal 指令的意思是跳转到对应标签的位置，并将当前执行的指令位置存储在 $ra 寄存器中。&lt;/p&gt;
&lt;h3 id=&#34;各种指令&#34;&gt;各种指令&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;赋值 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;li $t1, 100  ori $t1, 100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;传值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;move $t1, $t2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;add $t1, $t2, $t3 加&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mul $t1, $t2, $t3 乘&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;除法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;div $t1, $t2 # 计算 5 / 2，其中商存放在 lo 寄存器，而余数存放在 hi 寄存器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mfhi $t3 # 将 hi 寄存器中的值取出放到 t3 寄存器（余数，值为 1）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mflo $t4 # 将 lo 寄存器中的值取出放到 t4 寄存器（商，值为 2）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;跳转&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ble $t1, 5, label&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;j label&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;跳转到函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;jal 指令的意思是跳转到对应标签的位置，并将当前执行的指令位置存储在 $ra 寄存器中。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;jr $ra 函数结束后返回！很重要&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;数组&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;array: .space 400&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;la $t1, array&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;lw $t2, 0($t1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sw $t2, array($t3)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;字符串不用lw和sw&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;lb $a0, 0($t0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sb $a0, 0($t0)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&#34;image-20240106201044299.png&#34; alt=&#34;image-20240106201044299&#34; style=&#34;zoom: 45%;&#34; /&gt;
&lt;h1&gt;4 MIPS处理器&lt;/h1&gt;
&lt;h2 id=&#34;MIPS模型机&#34;&gt;MIPS模型机&lt;/h2&gt;
&lt;p&gt;寄存器，32位虚拟地址&lt;/p&gt;
&lt;p&gt;组合部件ALU（逻辑运算）、MUX（多路选择器）Signext（符号扩展）&lt;/p&gt;
&lt;p&gt;寄存器堆：两个32位数据输出端口，一个32位数据输入端口，三个5位寄存器地址输入端口&lt;/p&gt;
&lt;p&gt;边沿触发的时钟同步方法&lt;/p&gt;
&lt;h2 id=&#34;单周期处理器&#34;&gt;单周期处理器&lt;/h2&gt;
&lt;p&gt;哈佛体系结构：使用指令存储区（IM）和数据存储区（DM）分别保存指令和数据&lt;/p&gt;
&lt;p&gt;取指令&lt;/p&gt;
&lt;p&gt;32位Instruction = IM[PC]，PC+4，&lt;/p&gt;
&lt;img src=&#34;image-20240106210307704.png&#34; alt=&#34;image-20240106210307704&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;R型如add&lt;/p&gt;
&lt;img src=&#34;image-20240106211146176.png&#34; alt=&#34;image-20240106211146176&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;lw&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106211330560.png&#34; alt=&#34;image-20240106211330560&#34;&gt;&lt;/p&gt;
&lt;p&gt;sw&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106211413808.png&#34; alt=&#34;image-20240106211413808&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1704546944945.png&#34; alt=&#34;1704546944945&#34;&gt;&lt;/p&gt;
&lt;p&gt;寄存器堆写入端地址选择MUX，选择控制信号 RegDst&lt;/p&gt;
&lt;p&gt;ALU输入端B数据源选择MUX，选择控制信号 ALUSrc&lt;/p&gt;
&lt;p&gt;寄存器堆写入端数据源选择MUX，选择控制信号 MemtoReg&lt;/p&gt;
&lt;p&gt;beq&lt;/p&gt;
&lt;img src=&#34;image-20240106212423830.png&#34; alt=&#34;image-20240106212423830&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;img src=&#34;1704547957248.png&#34; alt=&#34;1704547957248&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;p&gt;PC输入端数据源选择MUX，选择控制信号 PCSrc&lt;/p&gt;
&lt;h3 id=&#34;控制信号&#34;&gt;控制信号&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1704548014476.png&#34; alt=&#34;1704548014476&#34;&gt;&lt;/p&gt;
&lt;p&gt;Op：控制7个控制信号&lt;/p&gt;
&lt;p&gt;Func：仅用于R型，控制ALUop&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RegDst&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;R型指令：RegDst=1，选择Rd&lt;/p&gt;
&lt;p&gt;Lw指令： RegDst=0，选择Rt&lt;/p&gt;
&lt;p&gt;其他指令：不关心&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ALUScr&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;R型指令：ALUSrc=0，选择寄存器堆的 Read data2 输出&lt;/p&gt;
&lt;p&gt;Lw Sw指令： ALUSrc=1，选择Signext的输出&lt;/p&gt;
&lt;p&gt;Beq指令（减法运算）： ALUSrc=0，选择 Read data2 输出&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MemtoReg&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;R型指令：MemtoReg=0，选择 ALU 输出&lt;/p&gt;
&lt;p&gt;Lw指令： MemtoReg=1，选择数据存储器DM输出&lt;/p&gt;
&lt;p&gt;其他指令： 不关心&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Branch&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Beq指令：Branch=1，此时若Zero=1，PC输入选择加法器Nadd输出（分支指令目的地址），否则选择加法器Add输出（PC+4）&lt;/p&gt;
&lt;p&gt;其他指令：Branch=0，PC输入选择加法器Add输出（PC+4）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106215650460.png&#34; alt=&#34;image-20240106215650460&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;ALU控制信号&#34;&gt;ALU控制信号&lt;/h4&gt;
&lt;p&gt;ALUOP：10,00,01,分3种情况，10再看FUNC字段，00做一个加法，01做一个减法&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1704549610485.png&#34; alt=&#34;1704549610485&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;单周期过程&#34;&gt;单周期过程&lt;/h3&gt;
&lt;p&gt;R 取值-读寄存器-ALU运算-写寄存器&lt;/p&gt;
&lt;p&gt;lw 取值-读寄存器-ALU运算-读数据-写寄存器&lt;/p&gt;
&lt;h2 id=&#34;多周期流水线&#34;&gt;多周期流水线&lt;/h2&gt;
&lt;h3 id=&#34;五个阶段&#34;&gt;五个阶段&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;取指-IF: 取指, PC自增&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;译码和读寄存器-ID:译码, 读寄存器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行-EX: 执行(ALU)  Lw/Sw指令:  计算内存指针  其他指令:  执行其他算术和逻辑运算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访存-Mem:   Lw:  从内存读数据到CPU寄存器  Sw:  把寄存器的值写到内存中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回写-WB: 把数据写回到寄存器中&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当时钟上升沿到来时，组合逻辑计算结果写入后级寄存器&lt;/p&gt;
&lt;h3 id=&#34;线路&#34;&gt;线路&lt;/h3&gt;
&lt;img src=&#34;image-20240106230648625.png&#34; alt=&#34;image-20240106230648625&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;增加新MUX&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1704551192433.png&#34; alt=&#34;1704551192433&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;指令相关&#34;&gt;指令相关&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;针对寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;读后写，写后读，写后写&lt;/p&gt;
&lt;h3 id=&#34;指令冲突&#34;&gt;指令冲突&lt;/h3&gt;
&lt;p&gt;只有写后读会有指令冲突&lt;/p&gt;
&lt;h2 id=&#34;流水线冒险&#34;&gt;流水线冒险&lt;/h2&gt;
&lt;p&gt;结构冒险：资源竞争，要使用的部件正在忙&lt;/p&gt;
&lt;p&gt;数据冒险：指令执行所需的数据暂时不可用而造成的指令执行的停顿&lt;/p&gt;
&lt;p&gt;控制冒险：也称为分支冒险，必须根据前一条指令的执行结果才能确定下一条真正要执行的指令地址&lt;/p&gt;
&lt;h2 id=&#34;&#34;&gt;&lt;/h2&gt;
&lt;h3 id=&#34;结构冒险&#34;&gt;结构冒险&lt;/h3&gt;
&lt;p&gt;内存：流水线的数据通路需要将指令和数据分别存储&lt;/p&gt;
&lt;p&gt;寄存器：将寄存器组的使用权限分为两部分，一个时钟周期内前半个时钟周期进行写操作，后半个时钟周期进行读操作&lt;/p&gt;
&lt;p&gt;在同一个时钟周期，可以同时进行读寄存器和写寄存器的操作&lt;/p&gt;
&lt;h3 id=&#34;数据冒险&#34;&gt;数据冒险&lt;/h3&gt;
&lt;h4 id=&#34;旁发&#34;&gt;旁发&lt;/h4&gt;
&lt;img src=&#34;1704553400856.png&#34; alt=&#34;1704553400856&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106223518442.png&#34; alt=&#34;image-20240106223518442&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;阻塞&#34;&gt;阻塞&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;image-20240106230913999.png&#34; alt=&#34;image-20240106230913999&#34; style=&#34;zoom:50%;&#34; /&gt;阻塞+旁发&lt;/p&gt;
&lt;p&gt;阻塞等同插入nop指令&lt;/p&gt;
&lt;p&gt;条件：IF/ID的前序是lw指令，并且lw的rt寄存器与IF/ID的rs或rt相同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冻结IF/ID：sub继续被保存（用寄存器的使能）&lt;/li&gt;
&lt;li&gt;清除ID/EX：指令全为0，等价于插入NOP（用寄存器的CLR清除）&lt;/li&gt;
&lt;li&gt;冻结PC：防止PC继续计数，PC保持不变&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sub $t2,$t1,$t3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;add $t3,$t1,$t2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;从EX/MEM转发到ID/EX后面&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果有转发电路，&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;lw $t2, 4($t0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;add $t3, $t1, $t2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要插入几个NOP指令？&lt;strong&gt;&lt;u&gt;1个&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;有转发的完整流水线&#34;&gt;有转发的完整流水线&lt;/h4&gt;
&lt;img src=&#34;image-20240106235643532.png&#34; alt=&#34;image-20240106235643532&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h3 id=&#34;控制冒险&#34;&gt;控制冒险&lt;/h3&gt;
&lt;p&gt;阻塞或者赌博不跳转&lt;/p&gt;
&lt;p&gt;还可以在ID前放置比较器&lt;/p&gt;
&lt;h3 id=&#34;计算机性能&#34;&gt;计算机性能&lt;/h3&gt;
&lt;p&gt;响应时间：从提交作业到完成作业所花费的时间&lt;/p&gt;
&lt;p&gt;吞吐量：一定时间间隔内完成的作业数&lt;/p&gt;
&lt;h1&gt;5 主存&lt;/h1&gt;
&lt;h2 id=&#34;工作原理&#34;&gt;工作原理&lt;/h2&gt;
&lt;h3 id=&#34;RAM&#34;&gt;RAM&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;随机存取存储器&lt;/strong&gt;（RAM）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1704595506938.png&#34; alt=&#34;1704595506938&#34;&gt;（T是MOS管)&lt;/p&gt;
&lt;p&gt;读出：D 线先预充电到 Vpre=2.5V，然后字选线高电平，T导通&lt;/p&gt;
&lt;p&gt;若电路保存 信息1，Vcs=3.5V，电流方向从单元电路内部向外&lt;/p&gt;
&lt;p&gt;若电路保存信息 0，Vcs=0.0V，电流方向从外向单元电路内部&lt;/p&gt;
&lt;p&gt;写入操作：D 线加高电平（1，3.5V）或低电平（0，0V），字选择线置高电平，T导通；&lt;/p&gt;
&lt;p&gt;写1时，D线高电平，对Cs充电；&lt;/p&gt;
&lt;p&gt;写0时，D线低电平，Cs放电；&lt;/p&gt;
&lt;h3 id=&#34;ROM&#34;&gt;ROM&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;只读存储器&lt;/strong&gt;（ROM）&lt;/p&gt;
&lt;p&gt;PROM&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20240107105109481.png&#34; alt=&#34;image-20240107105109481&#34; style=&#34;zoom:25%;&#34; /&gt;出场时为1，当写入0烧毁熔丝，不可恢复&lt;/p&gt;
&lt;p&gt;紫外线擦除可编程的EPROM、电擦除可编程的EEPROM单元电路可以恢复&lt;/p&gt;
&lt;h2 id=&#34;内部结构&#34;&gt;内部结构&lt;/h2&gt;
&lt;p&gt;芯片容量：2^n * m&lt;/p&gt;
&lt;p&gt;地址线：n位&lt;/p&gt;
&lt;p&gt;数据线：m位&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;&lt;em&gt;这里就是n个字单元，每个字单元m位，很重要&lt;/em&gt;&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1704596437871.png&#34; alt=&#34;1704596437871&#34; style=&#34;zoom:50%;&#34; /&gt;1024×2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二维地址结构&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;4096 × 4，4096×4 = 2^14&lt;/p&gt;
&lt;p&gt;存储：2^7 * （2^5*2^2）；一行4个单元一组为一个字，一行32个字&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1704596831316.png&#34; alt=&#34;1704596831316&#34; style=&#34;zoom: 67%;&#34; /&gt;妙哇&lt;/p&gt;
&lt;h2 id=&#34;存储器扩展&#34;&gt;存储器扩展&lt;/h2&gt;
&lt;h3 id=&#34;位扩展&#34;&gt;位扩展&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1K * 4 扩展为 1K * 8&lt;/strong&gt;：&lt;/p&gt;
&lt;img src=&#34;image-20240107111224018.png&#34; alt=&#34;image-20240107111224018&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;h3 id=&#34;字扩展&#34;&gt;字扩展&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1K * 8 扩展为 4K * 8&lt;/strong&gt;：&lt;/p&gt;
&lt;img src=&#34;image-20240107111347911.png&#34; alt=&#34;image-20240107111347911&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h3 id=&#34;混合扩展&#34;&gt;混合扩展&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20240107111642531.png&#34; alt=&#34;image-20240107111642531&#34; style=&#34;zoom:50%;&#34; /&gt;4Kx4扩展16Kx8&lt;/p&gt;
&lt;h3 id=&#34;ROM、RAM扩展&#34;&gt;ROM、RAM扩展&lt;/h3&gt;
&lt;img src=&#34;1704598394078.png&#34; alt=&#34;1704598394078&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;p&gt;&lt;strong&gt;符号表示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20240107113056551.png&#34; alt=&#34;image-20240107113056551&#34; style=&#34;zoom:33%;&#34; /&gt;符号表示&lt;/p&gt;
&lt;p&gt;读单元地址：Address；读控制信号：MemRead；读出数据：Readdata&lt;/p&gt;
&lt;p&gt;写单元地址：Address；写控制信号：MemWrite；写入数据：Writedata&lt;/p&gt;
&lt;h3 id=&#34;DRAM刷新方式&#34;&gt;DRAM刷新方式&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1704598538571.png&#34; alt=&#34;1704598538571&#34; style=&#34;zoom:50%;&#34; /&gt;D线上加感应放大器&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20240107113613672.png&#34; alt=&#34;image-20240107113613672&#34; style=&#34;zoom: 33%;&#34; /&gt;读1时D线电压&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20240107113638223.png&#34; alt=&#34;image-20240107113638223&#34; style=&#34;zoom:33%;&#34; /&gt;读0时D线电压&lt;/p&gt;
&lt;p&gt;传感放大器会刷新Cs，让Cs保持原来状态而不是被破坏&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分散刷新&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20240107114121678.png&#34; alt=&#34;image-20240107114121678&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;p&gt;一个存储周期分为两段: 前一段用于正常读写，后一段用于刷新操作&lt;/p&gt;
&lt;p&gt;分散刷新间隔 = 刷新行数×存储周期 = 刷新周期&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;集中刷新&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20240107114139422.png&#34; alt=&#34;image-20240107114139422&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;集中刷新间隔 = 刷新周期&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;异步刷新（最常用）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个刷新周期内将存储芯片内的所有行刷新一遍，且只刷新一遍&lt;/p&gt;
&lt;p&gt;以128行为例，在2ms时间内必须轮流对每一行刷新一次，即每隔2ms/128=15.5μs刷新一行。这时假定读/写与刷新操作时间都为0.5μs，则可用前15μs进行正常读/写操作，最后0.5μs完成刷新操作&lt;/p&gt;
&lt;img src=&#34;image-20240107114026887.png&#34; alt=&#34;image-20240107114026887&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;p&gt;异步刷新间隔 = 刷新周期&lt;/p&gt;
&lt;h1&gt;6 高速缓存&lt;/h1&gt;
&lt;p&gt;数据块（block）：Cache与主存的基本划分单位，也是主存与Cache一次交换数据的最小单位，由多个字节（字）组成，取决与主存一次读写操作所能完成的数据字节数。也表明主存于Cache之间局部总线的宽度。&lt;/p&gt;
&lt;p&gt;标记（tag）：Cache每一数据块有一个标记字段，用来保存该数据块对应的主存数据块的地址信息。&lt;/p&gt;
&lt;p&gt;有效位（valid bit）：Cache中每一Block有一个有效位，用于指示相应数据块中是否包含有效数据。&lt;/p&gt;
&lt;p&gt;行（line )：Cache中 一个block及其 tag、valid bit构成1行。&lt;/p&gt;
&lt;p&gt;组（set）：若干块(Block)构成一个组，地址比较一般能在组内各块间同时进行。&lt;/p&gt;
&lt;p&gt;路（way）：Cache相关联的等级，每一路具有独立的地址比较机构，各路地址比较能同时进行（一般与组结合），路数即指一组内的块数。&lt;/p&gt;
&lt;p&gt;命中率（hit rate）：目标数据在Cache中的存储访问的比例。&lt;/p&gt;
&lt;p&gt;缺失率（miss rate）：目标数据不在Cache中的存储访问的比例。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;分S组，每组E行(Block, 数据块)，每数据块包含B个字节&lt;/p&gt;
&lt;p&gt;Cache的容量：N *（ B * 8+tag位+1(valid)）bits&lt;/p&gt;
&lt;h2 id=&#34;映射&#34;&gt;映射&lt;/h2&gt;
&lt;h3 id=&#34;全相联&#34;&gt;全相联&lt;/h3&gt;
&lt;p&gt;主存中的某一Block可以映射到Cache中的任意一Blcok&lt;/p&gt;
&lt;img src=&#34;image-20240107125035390.png&#34; alt=&#34;image-20240107125035390&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;主存地址格式：&lt;/p&gt;
&lt;img src=&#34;image-20240107125050698.png&#34; alt=&#34;image-20240107125050698&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;CPU找Cache中地址时，与所有Tag进行比较&lt;/p&gt;
&lt;p&gt;灵活，成本高&lt;/p&gt;
&lt;h3 id=&#34;直接映射&#34;&gt;直接映射&lt;/h3&gt;
&lt;p&gt;主存中的某一块 J 映射到Cache中的固定块 K， K ＝ J Mod C， 其中C是Cache包含的块数&lt;/p&gt;
&lt;p&gt;相当于&lt;strong&gt;一路组相连&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20240107125655315.png&#34; alt=&#34;image-20240107125655315&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;主存地址格式&lt;/p&gt;
&lt;img src=&#34;image-20240107125720669.png&#34; alt=&#34;image-20240107125720669&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;区内索引数量 = Cache行数&lt;/p&gt;
&lt;p&gt;Cache如果有16行 = Index有4位&lt;/p&gt;
&lt;p&gt;区数量为主存行数/一个区内数量&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例：主存容量1M字节，Cache容量4k字节，Block大小256 Bytes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cache: 2^12 ÷ 2^8 = 2^4 Blocks，Index应该为4位&lt;/p&gt;
&lt;p&gt;主存: 2^12 Blocks，每个区2^4Blocks , 分成2^8个区&lt;/p&gt;
&lt;p&gt;主存地址：20位，其中高 8 位区地址，中间4位为区内块地址，低8位为块内地址。&lt;/p&gt;
&lt;h3 id=&#34;组相联&#34;&gt;组相联&lt;/h3&gt;
&lt;p&gt;主存和Cache 都分成 K 组，其中Cache每组包含 L 块数据（Nc= K * L），主存每组包含M块数据；主存的块 J 以下列原则映射到 Cache 的组 I 中的任何一块（Nm= K * M） 。             I =  J  mod K  （0 ≤ I ≤ K）&lt;/p&gt;
&lt;img src=&#34;image-20240107133841909.png&#34; alt=&#34;image-20240107133841909&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;主存地址格式&lt;/p&gt;
&lt;img src=&#34;image-20240107133833645.png&#34; alt=&#34;image-20240107133833645&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;Cache：valid，Tag，Data&lt;/p&gt;
&lt;p&gt;在组相连中，如果只有一组，则变成了全相联了。&lt;/p&gt;
&lt;p&gt;如果组相联中每组只有一个数据块，则组相联就变成直接相联了。&lt;/p&gt;
&lt;h2 id=&#34;替换策略&#34;&gt;替换策略&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;缺失处理方式&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;image-20240107140809736.png&#34; alt=&#34;image-20240107140809736&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h3 id=&#34;替换方式&#34;&gt;替换方式&lt;/h3&gt;
&lt;p&gt;FIFO：最先装入数据的块被替换&lt;/p&gt;
&lt;p&gt;LRU：最近最少使用法&lt;/p&gt;
&lt;p&gt;访问命中时，所有块的计数值与命中块的计数值进行比较：如果某块计数值小于命中块的计数值， 则该块的计数值加 1；如果该块的计数值大于命中块的计数值，则数值不变。最后将命中块的计数器清为0。&lt;/p&gt;
&lt;p&gt;访问未命中，需要替换时，则选择计数值最大的块被替换（若最大值并列，随机选择一个）。被替换块的计数器清0，而其它的计数器则加1&lt;/p&gt;
&lt;h2 id=&#34;性能分析&#34;&gt;性能分析&lt;/h2&gt;
&lt;p&gt;一般情况增加路数提高命中率，降低时间；&lt;/p&gt;
&lt;p&gt;随着块大小增加，缺失率先降低后增加；&lt;/p&gt;
&lt;p&gt;Cache所需总存储容量=（tag位+有效位+（可能的脏位）+1个数据块容量）* 块数&lt;/p&gt;
&lt;p&gt;命中率 * Cache访问时间+（1-命中率）* （装入Cache+Cache访问时间）&lt;/p&gt;
&lt;p&gt;写回（Write Back）：写操作只更新Cache中的数据，直到Block替换时才将整个Block写回主存，一般使用“脏位”（dirty bit）来表示Block在替换回主存之前是否被修改过；&lt;/p&gt;
&lt;h2 id=&#34;要点？&#34;&gt;要点？&lt;/h2&gt;
&lt;p&gt;内存地址格式：  组内块地址(多少b) + 组地址(多少b) + 块内偏移地址(多少b)1&lt;/p&gt;
&lt;h1&gt;7 虚拟存储&lt;/h1&gt;
&lt;p&gt;把主存当做辅助存储器的高速缓存技术，称为虚拟存储技术，程序中可以使用较大的存储空间称为虚拟存储器&lt;/p&gt;
&lt;p&gt;固定长（简单）分区，浪费空间&lt;/p&gt;
&lt;p&gt;可变长分区，开始好，后面会产生空块&lt;/p&gt;
&lt;h2 id=&#34;页式虚拟存储器&#34;&gt;页式虚拟存储器&lt;/h2&gt;
&lt;p&gt;内存分成定长小块（页），进程也分成定长小块。&lt;/p&gt;
&lt;p&gt;虚存页称为虚页，主存页称为实页&lt;/p&gt;
&lt;p&gt;一个进程用很多小块，可以不连续&lt;/p&gt;
&lt;p&gt;操作系统为进程生成页表&lt;/p&gt;
&lt;p&gt;通过页表实现逻辑地址向物理地址的转换。&lt;/p&gt;
&lt;p&gt;页表基址寄存器：保存页表在内存中的首地址&lt;/p&gt;
&lt;h3 id=&#34;虚实地址的转换&#34;&gt;虚实地址的转换&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;根据虚地址，访问主存中的页表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据实地址，访问主存中的物理页&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;image-20240107151029798.png&#34; alt=&#34;image-20240107151029798&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;img src=&#34;image-20240107151913428.png&#34; alt=&#34;image-20240107151913428&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h2 id=&#34;多级页表&#34;&gt;多级页表&lt;/h2&gt;
&lt;p&gt;二级页表页面大小为4KB的2GB虚拟存储器，每个页表项占4个字节：2^19 * 2^2=2MB&lt;/p&gt;
&lt;p&gt;一级页表2^9项（每项占4个字节），二级页表2^10项（每项占4个字节），整个一级页表常驻内存，常用的两个活跃二级页表装载到内存：  512 * 4+2 * 1K * 4 = 10KB （假定2个活跃页表换入内存时，实际占用的内存）&lt;/p&gt;
&lt;img src=&#34;image-20240107151055751.png&#34; alt=&#34;image-20240107151055751&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h2 id=&#34;例题&#34;&gt;例题&lt;/h2&gt;
&lt;img src=&#34;1704611716703.png&#34; alt=&#34;1704611716703&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;h2 id=&#34;快表TLB&#34;&gt;快表TLB&lt;/h2&gt;
&lt;p&gt;使用Cache存储部分活跃的页表项，称为TLB（快表），它包含了最近使用的那些页表项。&lt;/p&gt;
&lt;p&gt;TLB内容：标记（虚页号）、数据块（实页号）、有效位、修改位。&lt;/p&gt;
&lt;p&gt;TLB一般采用全相联或者组相联&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20240107151819430.png&#34; alt=&#34;image-20240107151819430&#34;&gt;&lt;/p&gt;
&lt;img src=&#34;image-20240107152739212.png&#34; alt=&#34;image-20240107152739212&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;&lt;img src=&#34;image-20240107153422198.png&#34; alt=&#34;image-20240107153422198&#34; style=&#34;zoom:50%;&#34; /&gt;TLB命中与否 与Cache是否命中 &lt;strong&gt;无关&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;1704613616027.png&#34; alt=&#34;1704613616027&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h1&gt;8 链接&lt;/h1&gt;
&lt;h2 id=&#34;目标文件的三种格式&#34;&gt;目标文件的三种格式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可重定位目标文件（relocatable object file:  .o ）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;包含二进制代码和数据&lt;/p&gt;
&lt;p&gt;其形式可以在编译时与其他可重定位目标文件合并起来，创建一个可执行目标文件&lt;/p&gt;
&lt;p&gt;每一个 .c 源文件产生一个对应的 .o 文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可执行目标文件（executable object file）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以没有扩展名（Linux）或者 a.out ;    .exe(Windows)&lt;/p&gt;
&lt;p&gt;包含二进制代码和数据&lt;/p&gt;
&lt;p&gt;其形式可以被直接复制到内存并执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;共享目标文件（shared object file）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一种特殊类型的可重定位目标文件&lt;/p&gt;
&lt;p&gt;可以在加载或者运行时被动态地加载进内存并链接&lt;/p&gt;
&lt;p&gt;windows：.lib (静态链接库)  .dll （动态链接库）；Linux：.a(静态链接) .so(动态链接)&lt;/p&gt;
&lt;h2 id=&#34;Elf格式&#34;&gt;Elf格式&lt;/h2&gt;
&lt;p&gt;.text: 已编译程序的机器代码（Code）&lt;/p&gt;
&lt;p&gt;.rodata: 只读数据&lt;/p&gt;
&lt;p&gt;.data: 已初始化的全局和静态 C 变量&lt;/p&gt;
&lt;p&gt;.bss:  Block Started by Symbol&lt;/p&gt;
&lt;p&gt;.symtab:   符号表&lt;/p&gt;
&lt;p&gt;.rel.text:  .text 节的重定位信息&lt;/p&gt;
&lt;p&gt;.rel.data（.rel.data.rel）:   .data节的重定位信息&lt;/p&gt;
&lt;h2 id=&#34;链接器符号&#34;&gt;链接器符号&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全局符号&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由模块 m 定义并能被其他模块引用的符号：非静态的 C 函数和全局变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;外部符号&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由其他模块定义并被模块 m 引用的全局符号：在其他模块中定义的非静态 C 函数和全局变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;局部符号&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只被模块 m 定义和引用的符号：带 static 属性的 C 函数和全局变量&lt;/p&gt;
&lt;p&gt;**局部链接器符号和局部变量不同 **连接器不知道局部变量&lt;/p&gt;
&lt;p&gt;局部非静态C变量：保存在栈上或寄存器中&lt;/p&gt;
&lt;p&gt;局部静态C变量：保存在 .data 或 .bss&lt;/p&gt;
&lt;h2 id=&#34;符号解析&#34;&gt;符号解析&lt;/h2&gt;
&lt;h3 id=&#34;局部符号&#34;&gt;局部符号&lt;/h3&gt;
&lt;p&gt;在相同模块中定义和引用&lt;/p&gt;
&lt;p&gt;编译器只允许每个模块中每个局部符号有一个定义&lt;/p&gt;
&lt;p&gt;其解析简单明了&lt;/p&gt;
&lt;h3 id=&#34;全局符号&#34;&gt;全局符号&lt;/h3&gt;
&lt;p&gt;符号在当前模块中无定义：编译器会假设该符号是在其他某个模块中定义的，生成一个链接器符号表条目，并把它交给链接器处理&lt;/p&gt;
&lt;p&gt;如果链接器在它的任何输入模块中都找不到这个被引用符号的定义：输出一条错误信息并终止&lt;/p&gt;
&lt;p&gt;还有一种情况：多个目标文件可能会定义相同名字的全局符号&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全局符号分为强符号和弱符号&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;强符号：函数和已初始化的全局变量&lt;/p&gt;
&lt;p&gt;弱符号：未初始化的全局变量和外部符号&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不允许有多个同名的强符号：每个强符号只能定义一次，否则链接错误&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果有一个强符号和多个弱符号同名，那么选择强符号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果有多个弱符号同名，那么从这些弱符号中任意选择一个&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;静态库&#34;&gt;静态库&lt;/h2&gt;
&lt;p&gt;ar rcs name.a name1.o name2.o ：创建静态库&lt;/p&gt;
&lt;p&gt;gcc -static -o test test.o ./name.a ：链接静态库&lt;/p&gt;
&lt;img src=&#34;1704617901075.png&#34; alt=&#34;1704617901075&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;img src=&#34;1704617936261.png&#34; alt=&#34;1704617936261&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h2 id=&#34;链接去年好像没考😅&#34;&gt;链接去年好像没考😅&lt;/h2&gt;
&lt;h1&gt;9 总线和IO&lt;/h1&gt;
&lt;h2 id=&#34;总线仲裁&#34;&gt;总线仲裁&lt;/h2&gt;
&lt;h3 id=&#34;链式查询方式&#34;&gt;链式查询方式&lt;/h3&gt;
&lt;p&gt;总线控制器（仲裁器）收到总线申请BR，BG（总线同意信号）逐个往下传；&lt;/p&gt;
&lt;p&gt;到某接口有总线申请（BR：总线申请信号），BG停止往下传；&lt;/p&gt;
&lt;p&gt;该接口获得总线使用权，并建立总线忙信号BS。&lt;/p&gt;
&lt;h3 id=&#34;计数器定时查询方式&#34;&gt;计数器定时查询方式&lt;/h3&gt;
&lt;p&gt;总线控制器（仲裁器）收到总线申请BR，仲裁器上的计数器开始计数；&lt;/p&gt;
&lt;p&gt;当某个有总线申请的设备地址与计数器一致，便获得总线使用权，并建立总线忙信号BS&lt;/p&gt;
&lt;h3 id=&#34;独立请求方式&#34;&gt;独立请求方式&lt;/h3&gt;
&lt;p&gt;每个设备有独立的请求信号和总线同意信号；&lt;/p&gt;
&lt;p&gt;总线控制器根据设备的优先级决定将总线的使用权交给哪个设备。&lt;/p&gt;
&lt;h2 id=&#34;IO&#34;&gt;IO&lt;/h2&gt;
&lt;p&gt;I/O地址（I/O接口地址, I/O端口地址）：实际上是I/O接口电路中寄存器的地址（外设寄存器）&lt;/p&gt;
&lt;p&gt;？？&lt;/p&gt;
&lt;h2 id=&#34;程序查询IO&#34;&gt;程序查询IO&lt;/h2&gt;
&lt;p&gt;编程式I/O&lt;/p&gt;
&lt;p&gt;控制命令：激活外设完成动作。如指示磁带机快进或快退，控制命令与设备类型相关；&lt;/p&gt;
&lt;p&gt;测试命令：测试与I/O接口及其外部设备的各种状态条件；&lt;/p&gt;
&lt;p&gt;读命令：使I/O接口从外设获得一个数据项，存入内部缓冲区；&lt;/p&gt;
&lt;p&gt;写命令：使I/O接口从数据总线获得一个数据项，然后传送到外设。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I/O操作由CPU直接完成（通过执行I/O指令完成）&lt;/li&gt;
&lt;li&gt;外设速度慢，CPU速度快，在外设准备过程中，CPU处在不断的查询之中，CPU的效率浪费严重&lt;/li&gt;
&lt;li&gt;外设与CPU完全串行工作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;中断IO&#34;&gt;中断IO&lt;/h2&gt;
&lt;p&gt;顾名思义&lt;/p&gt;
&lt;h2 id=&#34;DMA&#34;&gt;DMA&lt;/h2&gt;
&lt;p&gt;DMA控制器接到DMA应答信号后，通过控制逻辑向系统总线发送存储器地址信号、存储器读写控制信号、I/O接口读写控制信号等，完成一次数据传送。&lt;/p&gt;
&lt;p&gt;若是单字传输，一般仅需要一个总线周期，所以这种方式称为周期窃取（cycle-stealing，或者叫周期挪用）方式。若是成组传输，需要多个总线周期来完成。所有数据传送结束后，通过中断方式告知CPU进行善后处理。&lt;/p&gt;
&lt;p&gt;CPU仅在开始DMA操作之前和完成DMA操作之后参与I/O处理，在DMA过程中，CPU可以运行原来的程序&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止CPU访问内存（成组传送方式）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一次DMA请求得到响应后，DMA控制器完全占用总线，进行块数据（多字）传送，直到所有数据传送完毕才释放总线，这段时间完全停止CPU访问内存。&lt;/p&gt;
&lt;p&gt;适应高速外设与存储器交换数据的情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;周期窃取方式（单字传送方式，DMA和CPU交替使用总线）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每次DMA请求得到响应后，DMA控制器窃取一个总线周期完成一次数据传送，然后释放总线，CPU接着使用一个总线周期，然后DMA再窃取一个周期，这样持续循环下去，直到数据传输结束。&lt;/p&gt;
&lt;p&gt;一般情况下，CPU 不访问存储器时释放总线&lt;/p&gt;
&lt;p&gt;一般适应存储器速度远高于I/O设备速度的情况。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.unfinished.top/2024/01/05/JavaReview/</guid>
            <title>Java期末考试复习提纲</title>
            <link>https://blog.unfinished.top/2024/01/05/JavaReview/</link>
            <category>大学</category>
            <category>总结</category>
            <category>Java</category>
            <pubDate>Fri, 05 Jan 2024 06:53:13 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;em&gt;仅供参考,如有错误请联系作者指正&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法头: 包括方法的修饰符、返回值类型、方法名、形式参数(最后两项是方法签名)&lt;/li&gt;
&lt;li&gt;方法体: 在Java语言中方法体一个方法中用大括号{}括起来的部分&lt;/li&gt;
&lt;li&gt;重载(Overload): 一个类中，定义的多个参数名相同但是参数列表不同的方法（签名不同）&lt;/li&gt;
&lt;li&gt;重写(Override): 子父类中，子类定义的和其从父类继承而来的方法中方法签名完全相同的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实例方法 = 普通方法&lt;/p&gt;
&lt;p&gt;类方法 = 静态方法&lt;/p&gt;
&lt;p&gt;上转型对象可以访问子类继承或隐藏的成员变量&lt;/p&gt;
&lt;h3 id=&#34;匿名对象&#34;&gt;匿名对象&lt;/h3&gt;
&lt;p&gt;new Student();//这个也是一个对象，但是没有名字，称为匿名对象&lt;/p&gt;
&lt;h3 id=&#34;局部和成员变量&#34;&gt;局部和成员变量&lt;/h3&gt;
&lt;p&gt;成员变量存储在堆内存的对象中&lt;/p&gt;
&lt;p&gt;局部变量存储在栈内存的方法中&lt;/p&gt;
&lt;p&gt;成员变量随着对象的出现而出现在堆中，随着对象的消失而从堆中消失&lt;/p&gt;
&lt;p&gt;局部变量随着方法的运行而出现在栈中，随着方法的弹栈而消失&lt;/p&gt;
&lt;p&gt;成员变量因为在堆内存中，所有成员变量具有默认的初始化值&lt;/p&gt;
&lt;p&gt;局部变量没有默认的初始化值，必须手动的给其赋值才可以使用。&lt;/p&gt;
&lt;h3 id=&#34;先后顺序&#34;&gt;先后顺序&lt;/h3&gt;
&lt;p&gt;第一次：静态代码块-非静态代码块-默认构造方法-普通方法&lt;/p&gt;
&lt;p&gt;之后：非静态代码块-默认构造方法-普通方法&lt;/p&gt;
&lt;h3 id=&#34;protected&#34;&gt;protected&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1703938349037.png&#34; alt=&#34;1703938349037&#34;&gt;&lt;/p&gt;
&lt;p&gt;不同包下，在子类中通过父类引用不可以访问其 protected 方法&lt;/p&gt;
&lt;p&gt;不同包下，在子类中通过该子类引用可以访问其 protected 方法还可以通过 super 关键字调用父类中的该方法。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//print是Parent中的protected方法，并且不在同一个包中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Child&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Parent&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Child&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;c1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Child&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        c1.print(); &lt;span class=&#34;comment&#34;&gt;//可以&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;.print(); &lt;span class=&#34;comment&#34;&gt;//可以&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Parent&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;c2&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Child&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Parent&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;c3&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Child&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        c2.print(); &lt;span class=&#34;comment&#34;&gt;//达咩&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        c3.print(); &lt;span class=&#34;comment&#34;&gt;//达咩&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Child2&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;c4&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Child2&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        c4.print();&lt;span class=&#34;comment&#34;&gt;//no&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Child2&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Parent&lt;/span&gt;&amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不同包下，在子类中不能通过另一个子类引用访问共同基类的 protected 方法&lt;/p&gt;
&lt;p&gt;对于protected修饰的静态成员，无论是否同一个包，在子类中均可直接访问&lt;/p&gt;
&lt;p&gt;在不同包的非子类中则不可访问&lt;/p&gt;
&lt;h2 id=&#34;继承&#34;&gt;继承&lt;/h2&gt;
&lt;h3 id=&#34;构造方法&#34;&gt;构造方法&lt;/h3&gt;
&lt;p&gt;创建子类对象时，子类总是按层次结构从上到下的顺序调用所有超类的构造函数。如果继承和组合联用，要先构造基类的构造函数，然后调用组合对象的构造函数（组合按照声明的顺序调用）&lt;/p&gt;
&lt;p&gt;如果父类没有不带参数的构造方法，则在子类的构造方法中必须明确的告诉调用父类的某个带参数的构造方法，通过super关键字，这条语句还必须出现在构造方法的第一句&lt;/p&gt;
&lt;h3 id=&#34;变量隐藏&#34;&gt;变量隐藏&lt;/h3&gt;
&lt;p&gt;变量隐藏：在子类对父类的继承中，如果子类的成员变量和父类的成员变量同名，此时称为子类隐藏（override）了父类的成员变量。&lt;/p&gt;
&lt;p&gt;子类若要引用父类的同名变量：super.变量名&lt;/p&gt;
&lt;p&gt;final可以被隐藏，static也能被隐藏，都能被隐藏。&lt;/p&gt;
&lt;h3 id=&#34;方法覆盖隐藏&#34;&gt;方法覆盖隐藏&lt;/h3&gt;
&lt;p&gt;覆盖就是子类的方法跟父类的方法具有完全一样的签名和参数&lt;/p&gt;
&lt;p&gt;&lt;u&gt;&lt;strong&gt;私有方法、静态方法不能被覆盖，如果在子类出现了同签名的方法，就是方法隐藏&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;u&gt;&lt;strong&gt;用final声明的成员方法是最终方法，最终方法不能被子类覆盖&lt;/strong&gt;&lt;/u&gt;（试图在子类写同名会直接报错）&lt;/p&gt;
&lt;h3 id=&#34;继承的好处都有啥？&#34;&gt;继承的好处都有啥？&lt;/h3&gt;
&lt;p&gt;提高代码维护性，可重用性，可扩展性&lt;/p&gt;
&lt;p&gt;继承是类实现可重用性和可扩充性的关键持征&lt;/p&gt;
&lt;p&gt;减少模块间的接口和界面&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是继承破坏了封装性，导致耦合性变高&lt;/strong&gt;，但是问题不大&lt;/p&gt;
&lt;h2 id=&#34;多态&#34;&gt;多态&lt;/h2&gt;
&lt;h3 id=&#34;静多态&#34;&gt;静多态&lt;/h3&gt;
&lt;p&gt;即在编译时决定调用哪个方法，也称为编译时多态&lt;/p&gt;
&lt;p&gt;一般是指方法重载，方法隐藏&lt;/p&gt;
&lt;h4 id=&#34;方法重载&#34;&gt;方法重载&lt;/h4&gt;
&lt;p&gt;方法名相同，参数个数、参数类型及参数顺序至少有一个不同&lt;/p&gt;
&lt;p&gt;构造方法和静态成员方法都是可以重载，静态成员方法重载后的方法也可以是非静态成员方法。&lt;/p&gt;
&lt;h4 id=&#34;方法隐藏&#34;&gt;方法隐藏&lt;/h4&gt;
&lt;p&gt;傻逼父类静态方法，不会被子类静态方法覆盖，只会被隐藏&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Parent&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;System.out.print(&lt;span class=&#34;string&#34;&gt;&amp;quot;Parent&amp;quot;&lt;/span&gt;)&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Child&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Parent&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;System.out.print(&lt;span class=&#34;string&#34;&gt;&amp;quot;Child&amp;quot;&lt;/span&gt;)&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Test&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;type&#34;&gt;Parent&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;child1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Child&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Child&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;child2&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Child&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        child1.print(); &lt;span class=&#34;comment&#34;&gt;//Parent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        child2.print(); &lt;span class=&#34;comment&#34;&gt;//Child&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;span class=&#34;comment&#34;&gt;//傻逼方法隐藏&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;动多态&#34;&gt;动多态&lt;/h3&gt;
&lt;p&gt;运行时才能确定调用哪个方法，也称为运行时多态，也称为动态联编，也称为动绑定&lt;/p&gt;
&lt;p&gt;“覆盖方法、抽象方法和接口” 和动态联编关系紧密&lt;/p&gt;
&lt;h4 id=&#34;方法覆盖&#34;&gt;方法覆盖&lt;/h4&gt;
&lt;p&gt;继承，方法覆盖，父类的引用指向派生类的实例且通过父类的引用调用被覆盖的方法&lt;/p&gt;
&lt;p&gt;final方法没法被覆盖&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;但是他妈的final变量又可以被子类的隐藏，傻逼 Java有病是不是&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;私有方法、静态方法不能被覆盖，如果在子类出现了同签名的方法，那是方法隐藏；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;继承是子类使用父类的方法，而多态则是父类使用子类的方法&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;抽象类&#34;&gt;抽象类&lt;/h2&gt;
&lt;p&gt;不能实例化，但可以创建它的引用&lt;/p&gt;
&lt;p&gt;抽象方法不能被private、final或static修饰&lt;/p&gt;
&lt;p&gt;当类实现了一个接口/继承抽象类，但并没有实现该接口/抽象类的所有方法时，该类必须声明为抽象类，否则出错&lt;/p&gt;
&lt;p&gt;抽象类里可以有变量&lt;/p&gt;
&lt;p&gt;可以有构造方法&lt;/p&gt;
&lt;p&gt;可以有非抽象方法&lt;/p&gt;
&lt;p&gt;抽象方法必须在抽象类里&lt;/p&gt;
&lt;h2 id=&#34;接口&#34;&gt;接口&lt;/h2&gt;
&lt;p&gt;public interface 名字{…}&lt;/p&gt;
&lt;p&gt;interface extents interface&lt;/p&gt;
&lt;p&gt;class implements interface&lt;/p&gt;
&lt;h4 id=&#34;定义&#34;&gt;定义&lt;/h4&gt;
&lt;p&gt;接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义，而没有方法的实现。接口是抽象方法和常量值的定义的集合&lt;/p&gt;
&lt;p&gt;接口是用来实现类间（不相关类）多重继承功能的结构&lt;/p&gt;
&lt;h4 id=&#34;接口要点&#34;&gt;接口要点&lt;/h4&gt;
&lt;p&gt;所有的变量都默认是&lt;strong&gt;public static final&lt;/strong&gt;，并且没法改&lt;/p&gt;
&lt;p&gt;接口中所有的方法都默认是&lt;strong&gt;public abstract&lt;/strong&gt;的&lt;/p&gt;
&lt;p&gt;没有构造方法&lt;/p&gt;
&lt;p&gt;一个类可以实现多个接口&lt;/p&gt;
&lt;p&gt;接口中的方法体可以由 java 语言书写，也可以由其他语言书写，用其他语言书写时，接口方法需要用 native关键字修饰（牛逼）&lt;/p&gt;
&lt;p&gt;类在实现抽象方法时必须显式的使用 &lt;strong&gt;public&lt;/strong&gt; 修饰符&lt;/p&gt;
&lt;h4 id=&#34;接口回调&#34;&gt;接口回调&lt;/h4&gt;
&lt;p&gt;把实现某一接口的类创建的对象引用赋给该接口声明的接口变量&lt;/p&gt;
&lt;p&gt;该接口变量就可以调用被类实现的接口中的方法。&lt;/p&gt;
&lt;h4 id=&#34;接口的进化&#34;&gt;接口的进化&lt;/h4&gt;
&lt;p&gt;其实就是一个接口继承了多接口…&lt;/p&gt;
&lt;h2 id=&#34;抽象类和接口的区别&#34;&gt;抽象类和接口的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;接口中的成员变量和方法只能是public类型的，而抽象类中的成员变量和方法可以处于各种访问级别。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口中的成员变量只能是public、static和final类型的，而在抽象类中可以定义各种类型的实例变量和静态变量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口中没有构造方法，抽象类中有构造方法。接口中所有方法都是抽象方法，抽象类中可以有非抽象方法，可以没有抽象方法。抽象类比接口包含了更多的实现细节。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;转型&#34;&gt;转型&lt;/h2&gt;
&lt;h4 id=&#34;向上转型&#34;&gt;向上转型&lt;/h4&gt;
&lt;p&gt;将子类转换成父类，在继承关系上面是向上移动的，所以一般称之为向上转型或者向上映射。&lt;/p&gt;
&lt;p&gt;只能调用父类中定义的属性和方法。&lt;/p&gt;
&lt;p&gt;用的变量是父类的，方法是父类被子类覆盖的&lt;/p&gt;
&lt;p&gt;没法用子类独有的变量/方法&lt;/p&gt;
&lt;p&gt;安全&lt;/p&gt;
&lt;h4 id=&#34;向下转型&#34;&gt;向下转型&lt;/h4&gt;
&lt;p&gt;一个已经向上转型的子类对象可以使用强制类型转换的格式，将父类引用转为子类引用，这个过程是向下转型&lt;/p&gt;
&lt;p&gt;能用子类独有的变量/方法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;若直接创建父类对象，无法向下转型！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不安全&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不可转会有运行时异常ClassCastException，&lt;u&gt;不是编译时异常！&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;instanceof&#34;&gt;instanceof&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;obj instanceof ClassName/InterfaceName&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;判断是否是某类/接口的实例&lt;/p&gt;
&lt;h2 id=&#34;设计原则&#34;&gt;设计原则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;开闭原则：一个软件实体应当对扩展开放，对修改关闭——降低维护风险&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单一职责原则: 一个类只负责一个功能领域中的相应职责——提高可读性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;里氏代换原则: 所有引用基类（父类）的地方必须能透明地使用其子类的对象——防止继承泛滥&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;合成复用原则：尽量使用组合或者聚合关系实现代码复用，少使用继承。——降低耦合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;依赖倒转原则: 抽象不应该依赖于细节, 细节应当依赖于抽象。 换言之, 要针对接口编程, 而不是针对实现编程——利于升级拓展&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口隔离原则: 使用多个专门的接口, 而不使用单一的总接口, 即客户端不应该依赖那些它不需要的接口——高聚合低耦合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;迪米特法则: 一个软件实体应当尽可能少地与其他实体发生相互作用——减少代码臃肿&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设计模式&#34;&gt;设计模式&lt;/h2&gt;
&lt;h3 id=&#34;单例&#34;&gt;单例&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;饿汉 线程安全效率高，可能浪费空间&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Singleton&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//静态的,保留自身的引用,类加载时就初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Singleton&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Singleton&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//必须是私有的构造函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//公共的静态的方法。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; Singleton &lt;span class=&#34;title function_&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; test;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;懒汉 线程不安全，不浪费空间&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Singleton&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//静态的。保留自身的引用。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Singleton&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//必须是私有的构造函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//公共的静态的方法。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; Singleton &lt;span class=&#34;title function_&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(test == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            test = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Singleton&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; test;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;Object类&#34;&gt;Object类&lt;/h2&gt;
&lt;p&gt;public final Class&amp;lt;?&amp;gt; getClass（）{ }&lt;/p&gt;
&lt;p&gt;public int hashCode() { }对地址或者String进行Hash&lt;/p&gt;
&lt;p&gt;自己的类：equal和==基本一样&lt;/p&gt;
&lt;p&gt;一些系统的类：String、File、Integer、Double，&lt;/p&gt;
&lt;p&gt;Equal判断值是否一样，==判断是否是一个实例&lt;/p&gt;
&lt;h2 id=&#34;Final方法-类&#34;&gt;Final方法/类&lt;/h2&gt;
&lt;p&gt;最终方法既不能被覆盖，也不能被重载&lt;/p&gt;
&lt;p&gt;final类中的方法都是隐式的final方法，private默认final&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract和final不能同时使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单数据类型常量其值一旦确定，就不能被改变&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;复合数据类型常量指的是引用不能被改变，而其具体的值是可以改变的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;final变量要么就直接赋值，要么就得在代码块或者构造函数中赋值&lt;/p&gt;
&lt;h2 id=&#34;内部类&#34;&gt;内部类&lt;/h2&gt;
&lt;p&gt;在创建实例内部类的实例时，外部类的实例必须已经存在&lt;/p&gt;
&lt;p&gt;静态内部类的实例不会自动持有外部类的特定实例的引用，在创建内部类的实例时，不必创建外部类的实例&lt;/p&gt;
&lt;h4 id=&#34;局部内部类&#34;&gt;局部内部类&lt;/h4&gt;
&lt;p&gt;只能在当前方法中使用&lt;/p&gt;
&lt;p&gt;可访问外部类的所有成员以及方法中用final修饰的内部成员&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;A&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; x)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;B&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//可访问a,x,y&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//不可访问z&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;匿名类&#34;&gt;匿名类&lt;/h4&gt;
&lt;p&gt;匿名类就是没有名字的类，是将类和类的方法定义在一个表达式范围里&lt;/p&gt;
&lt;p&gt;匿名类本身没有构造方法，但是会调用父类的构造方法&lt;/p&gt;
&lt;p&gt;作用：封装类型、直接访问外部类的成员、回调外部类的方法&lt;/p&gt;
&lt;h4 id=&#34;回调&#34;&gt;回调&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Adjustable&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;adjust&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; temperature)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Base&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; speed;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;adjust&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; speed)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.speed=speed;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Base&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; temperature;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;adjustTemperature&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; temperature)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.temperature=temperature;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Closure&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Adjustable&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;adjust&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; temperature)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            adjustTemperature(temperature);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Adjustable &lt;span class=&#34;title function_&#34;&gt;getCallBackReference&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Closure&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Sub&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;Adjustable&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; sub.getCallBackReference();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	a.adjust(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;//温度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	sub.adjust(&lt;span class=&#34;number&#34;&gt;114514&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;//速度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;异常&#34;&gt;异常&lt;/h2&gt;
&lt;p&gt;方法中：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;span class=&#34;keyword&#34;&gt;finally&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;方法声明处：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;public void method() throws xxx&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;自定义异常&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;public class 名字 extends Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;集合&#34;&gt;集合&lt;/h2&gt;
&lt;h3 id=&#34;Set&#34;&gt;Set&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Set&amp;lt;Integer&amp;gt; set = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TreeSet&lt;/span&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Comparator&lt;/span&gt;&amp;lt;Integer&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;compare&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Integer o1, Integer o2)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(o1==&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(o2==&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; o1&amp;gt;o2?-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Integer integer : set) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(integer);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Iterator&amp;lt;Integer&amp;gt; setIt = set.iterator();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(setIt.hasNext())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(setIt.next());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Object[] setArray = set.toArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i&amp;lt;setArray.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(setArray[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;SortedSet是一个按照升序排列元素的Set，狗都不用。&lt;/p&gt;
&lt;h3 id=&#34;List&#34;&gt;List&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; List&amp;lt;Food&amp;gt; list = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;Food&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; List&amp;lt;Food&amp;gt; list = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LinkedList&lt;/span&gt;&amp;lt;Food&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(Food f : list)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;+&lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;+f.type);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//can break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;list.forEach(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x-&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;1 &amp;quot;&lt;/span&gt;+x.type);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//can&amp;#x27;t break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i&amp;lt;list.size();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;+&lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;+list.get(i).type);&lt;span class=&#34;comment&#34;&gt;//can break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Linked还能选择在头或者尾 加元素/获取元素/删除元素&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;Map&#34;&gt;Map&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Map&amp;lt;Integer, String&amp;gt; map = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TreeMap&lt;/span&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Comparator&lt;/span&gt;&amp;lt;Integer&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;compare&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Integer obj1, Integer obj2)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 降序排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; obj2.compareTo(obj1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//return obj1.compareTo(obj2);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.keySet();&lt;span class=&#34;comment&#34;&gt;//返回Set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.values();&lt;span class=&#34;comment&#34;&gt;//返回Collection&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(Entry entry: map.entrySet())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(entry.getKey()+&lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;+entry.getValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;集合对比&#34;&gt;集合对比&lt;/h3&gt;
&lt;h4 id=&#34;Vector-ArrayList&#34;&gt;Vector &amp;amp; ArrayList&lt;/h4&gt;
&lt;p&gt;Vector线程安全&lt;/p&gt;
&lt;p&gt;ArrayList重速度轻安全，线程非安全&lt;/p&gt;
&lt;p&gt;长度需增长时，Vector默认增长一倍，ArrayList增长50%&lt;/p&gt;
&lt;h4 id=&#34;Hashtable-HashMap&#34;&gt;Hashtable &amp;amp; HashMap&lt;/h4&gt;
&lt;p&gt;Hashtable线程安全，不允许null值，继承Dictionary类&lt;/p&gt;
&lt;p&gt;HashMap线程非安全，允许null值，实现Map接口&lt;/p&gt;
&lt;h3 id=&#34;Iterator&#34;&gt;Iterator&lt;/h3&gt;
&lt;p&gt;只能用来遍历喵&lt;/p&gt;
&lt;h3 id=&#34;Arrays-sort&#34;&gt;Arrays.sort&lt;/h3&gt;
&lt;p&gt;不会真有人用这玩意吧&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Integer[] a = &amp;#123;&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Arrays.sort(a,&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Comparator&lt;/span&gt;&amp;lt;Integer&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;compare&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Integer obj1, Integer obj2)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 降序排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; obj1.compareTo(obj2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//return obj1.compareTo(obj2);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;IO&#34;&gt;IO&lt;/h2&gt;
&lt;p&gt;Input/OutputStream：字节流&lt;/p&gt;
&lt;p&gt;Reader/Writer：字符流&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Scanner&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;scanner&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Scanner&lt;/span&gt;(System.in);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;各种流&#34;&gt;各种流&lt;/h3&gt;
&lt;p&gt;过滤流类的主要功能是为输入/输出流提供一个通用的接口，提供将流连接在一起的能力，即将一个流连接到另一个流的尾部，这样可以得到满足应用程序要求的很长的输入和输出过滤器。&lt;/p&gt;
&lt;p&gt;带缓存的输入流和输出流对应的类是：BufferedInputStream，BufferedOutputStream：快得很呐&lt;/p&gt;
&lt;p&gt;回压流：类PushbackInputStream提供了几个unread()方法，把读过的一个或几个字节数据退回到输入流中，当然也可以回压别的字节数据到输入流中。&lt;/p&gt;
&lt;p&gt;unread(int b)   unread(byte[] b)&lt;/p&gt;
&lt;p&gt;打印流PrintStream是非常重要的输出流，在标准输出中经常用到的System.out就是指向PrintStream实例的一个引用&lt;/p&gt;
&lt;p&gt;对象流：读取文件中的对象或将对象写入文件中（看下面序列化）&lt;/p&gt;
&lt;p&gt;管道流：管道数据流主要用于线程间的通信&lt;/p&gt;
&lt;h3 id=&#34;文件&#34;&gt;文件&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//反正我大作业这么写能跑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;chatFile&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;BufferedReader&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;Br&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BufferedReader&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FileReader&lt;/span&gt;(chatFile));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; ((Message = Br.readLine())!=&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(Message);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//这么写也行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;FileInputStream&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;fileInputStream&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; .......;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;BufferedReader&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;reader&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BufferedReader&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;InputStreamReader&lt;/span&gt;(fileInputStream));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String str;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; ((str = reader.readLine())!=&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(str);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;序列化&#34;&gt;序列化&lt;/h3&gt;
&lt;p&gt;简单&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;serializeBox&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;./box.txt&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;ObjectOutputStream&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;oos&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ObjectOutputStream&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FileOutputStream&lt;/span&gt;(f));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    oos.writeObject(box);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Box &lt;span class=&#34;title function_&#34;&gt;deserializeBox&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;./box.txt&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;ObjectInputStream&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;ois&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ObjectInputStream&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FileInputStream&lt;/span&gt;(f));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (Box)ois.readObject();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;多线程&#34;&gt;多线程&lt;/h2&gt;
&lt;h3 id=&#34;进程？线程？&#34;&gt;进程？线程？&lt;/h3&gt;
&lt;p&gt;进程（process）是&lt;strong&gt;程序的一次执行过程&lt;/strong&gt;，是系统运行程序的基本单位。程序是静态的，进程是动态的。系统运行一个程序即是一个进程从创建、运行到消亡的过程&lt;/p&gt;
&lt;p&gt;**线程：**比进程更小的执行单位，一个进程中可以包含多个线程&lt;/p&gt;
&lt;p&gt;线程优先级：范围 1~10 （10 级）。数值越大，级别越高 setPriority( )&lt;/p&gt;
&lt;h3 id=&#34;线程方法&#34;&gt;线程方法&lt;/h3&gt;
&lt;p&gt;start()：启动一个线程。&lt;/p&gt;
&lt;p&gt;run()：线程体,由start()方法调用，run()方法返回时当前线程结束&lt;/p&gt;
&lt;p&gt;sleep(int n)：使线程睡眠n毫秒&lt;/p&gt;
&lt;p&gt;yield()：将CPU控制权主动移交到下一个可运行线程&lt;/p&gt;
&lt;p&gt;join()：方法join()将引起现行线程等待&lt;/p&gt;
&lt;p&gt;sleep&amp;amp;yield：都是静态的实例方法&lt;/p&gt;
&lt;p&gt;sleep()使线程转入阻塞状态，而yield()使线程转入runnable状态&lt;/p&gt;
&lt;p&gt;yield()给相同优先级或更高的线程运行机会，如果当前没有存在相同优先级的线程，则yield()什么都不做&lt;/p&gt;
&lt;p&gt;sleep()会有中断异常抛出，而yiled()不抛出任何异常&lt;/p&gt;
&lt;p&gt;sleep()方法具有更好的可移植性&lt;/p&gt;
&lt;p&gt;wait&amp;amp;sleep&lt;/p&gt;
&lt;p&gt;sleep()方法不会释放对象的锁，而wait()\方法进入等待时，可以释放对象的锁&lt;/p&gt;
&lt;p&gt;wait,notify和notifyAll都是与同步相关联的方法,只有在synchronized方法中才可以用&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Thread1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Thread&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                Thread.sleep(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;o.O&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RuntimeException&lt;/span&gt;(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestThread&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Runnable&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;  &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//??&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;TestThread&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;testThread&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestThread&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;thread1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Thread&lt;/span&gt;(testThread, &lt;span class=&#34;string&#34;&gt;&amp;quot;Thread1&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;thread1.start();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;synchronized&#34;&gt;synchronized&lt;/h3&gt;
&lt;p&gt;用关synchronized为共享资源加锁，在任何时刻只有一个线程能用&lt;/p&gt;
&lt;p&gt;synchronized关键字可以使用在：&lt;/p&gt;
&lt;p&gt;①1.一个成员方法上&lt;/p&gt;
&lt;p&gt;②2.一个静态方法上&lt;/p&gt;
&lt;p&gt;③3.一个语句块上&lt;/p&gt;
&lt;p&gt;synchronized(obj)&lt;/p&gt;
&lt;p&gt;wait让本线程等待；别的线程notify可以让等待区一个线程准备开始（但是如果有线程用锁，该线程还是会处于BLOCKED状态）notifyAll唤醒所有&lt;/p&gt;
&lt;p&gt;wait(xx)可以传入时间，单位毫秒&lt;/p&gt;
&lt;h3 id=&#34;守护进程&#34;&gt;守护进程&lt;/h3&gt;
&lt;p&gt;当一个应用程序的所有非守护线程终止运行时，即使仍然有守护线程在运行，应用程序也将终止&lt;/p&gt;
&lt;p&gt;只要有一个非守护线程在运行，应用程序就不会终止&lt;/p&gt;
&lt;p&gt;用setDaemon() 来将一个线程设为守护线程&lt;/p&gt;
&lt;h3 id=&#34;Timer&#34;&gt;Timer&lt;/h3&gt;
&lt;p&gt;Timer类的schedule(TimerTask task, long delay, long period)方法用来设置定时器需要定时执行的任务&lt;/p&gt;
&lt;p&gt;定时器将在delay毫秒以后开始执行task任务（即执行TimerTask实例的run()方法），每隔period毫秒重复执行一次&lt;/p&gt;
&lt;h2 id=&#34;网络&#34;&gt;网络&lt;/h2&gt;
&lt;p&gt;最常用的传输层的网络通信协议是TCP和UDP.&lt;/p&gt;
&lt;p&gt;端口号的范围为0~65535之间，0~1023之间的端口数是用于一些知名的网络服务和应用&lt;/p&gt;
&lt;p&gt;利用TCP协议进行通信的两个应用程序是有主从之分的，一个称为服务器程序，一个称为客户机程序，两者的功能和编写方法不大一样&lt;/p&gt;
&lt;p&gt;Socket(String host,int port);&lt;/p&gt;
&lt;p&gt;socket.getOutputStream();&lt;/p&gt;
&lt;p&gt;利用UDP通信的两个程序是平等的，没有主次之分，两个程序的代码可以完全一样&lt;/p&gt;
&lt;p&gt;Public DatagramSocket(int port);&lt;/p&gt;
&lt;p&gt;Send(DatagramPacket p)方法&lt;/p&gt;
&lt;p&gt;Receive(DatagramPacket p)&lt;/p&gt;
&lt;p&gt;Public DatagramPacket(byte[] buf,int length);&lt;/p&gt;
&lt;p&gt;tcp能提供数据可靠性&lt;/p&gt;
&lt;p&gt;udp不能保证数据库可靠性&lt;/p&gt;
&lt;p&gt;tcp传输效率比udp低&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
